{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};

//TEMPLATE 16.05.2017
public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

   // Carrega as propriedades
    SysProperties props		= SysProperties.getInstance();
	SysProperties propsEmp  = SysProperties.getInstance();
    JSONObject roteiroCRM	= getRoteiro();
	JSONObject roteiroCRMPrincipal = getRoteiro();

    JSONObject objetoRoteiro = new JSONObject();
    objetoRoteiro.put("contabilidade", roteiroCRM.optString("contabilidade"));

    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    DataBase dbIODepara = null;

    String empresa = getNomeEmpresa();
    String codEmpresa = props.get(empresa + "_COD_EMPRESA");
    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");

	String codEmpresaPlanoContas = codEmpresa;

    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";

    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

    String backupDirName = dirName + "/Processado";
	
	String tipoProduto = "";
	try {
		tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
	} catch (Exception xx) {tipoProduto = "OIC_PACOTE";}
	
	
	if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";
	
 	
	String processaOud = "";
	try {
		processaOud = props.get("PROCESSA_OUD");
	} catch (Exception e) {processaOud = "FALSE";}
	if (processaOud.equals("")) processaOud = "FALSE";
	
	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";

    boolean apagaExtrato        = false;
    boolean apagaContaT         = false;
	boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    String tipoEmail            = "";

    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();
    HashMap mapaVariavel		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();
	HashMap mapaTransacao		= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();

    String cruzaExtrato    	= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";
	int transacaoInicial		= 0;

    boolean geraFiscal 					= false;
    String loteFiscal 					= "";

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida 				= "";
    String contaBuscaPlano 				= "";
    String nomeArquivo 					= "";
    String chave 						= "";
    String classificacao 				= "";
    String dataLote 					= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote 						= "";
    boolean enviouEmail 				= false;
    boolean primeiraVezDuplicata		= true;
    boolean primeiroArquivo 			= true;
    String regraContaMovimento 			= "";
    String regraHistorico 				= "";
    
	JSONObject deParaObj 			= new JSONObject();
	
	StringBuilder cabecalhoPlanilha = new StringBuilder();
	StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
	
	int contadorCabecalho = 0; 
	
	logger.logInfo("CHEGOU AQUI");
	
	try {

        String extencao = "";
        for(int extArquivo = 0; extArquivo < 12; extArquivo++){
            if(extArquivo == 0) extencao = ".ofx,.OFX";
            if(extArquivo == 1) extencao = ".ofx,.OFX";
            if(extArquivo == 2) extencao = ".ofx,.OFX";
            if(extArquivo == 3) extencao = ".csv,.CSV";
            if(extArquivo == 4) extencao = ".csv,.CSV";
            if(extArquivo == 5) extencao = ".csv,.CSV";
            if(extArquivo == 6) extencao = ".xlsx,.XLSX";
            if(extArquivo == 7) extencao = ".xlsx,.XLSX";
            if(extArquivo == 8) extencao = ".xlsx,.XLSX";
            if(extArquivo == 9) extencao = ".txt,.TXT";
            if(extArquivo == 10) extencao = ".txt,.TXT";
            if(extArquivo == 11) extencao = ".txt,.TXT";

            for (int porAba = 0; porAba < 60; porAba++) {

                String apagaArquivo = backupDirName;
                String abasEspecificas = roteiroCRM.optString("Abas_Especificas");
				abasEspecificas   = abasEspecificas.replace(",",";");

                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba))) apagaArquivo = null;
                }

                FilesLoader fileLoader = new FilesLoader(dirName, extencao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                fileLoader.loadFiles();
				
				logger.logInfo("CHEGOU AQUI2");


                for (MemoryFile memFile: fileLoader.getMemFiles()) {
					
					logger.logInfo("CHEGOU AQUI3");

                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;

                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;

                    String contaGetConta	= "";
                    contaPortador			= "";		//pg - cred | rec - deb
                    contaMovimento			= "";		//pg - deb | rec - cred

                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData = "";

                    if(extencao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extencao.contains(".csv,.CSV")) {
                        String nomeArquivoDuplicata = StringUtil.removeSpecialCharsToUC(memFile.getFilename());

                        if (nomeArquivoDuplicata.contains("QUESTOR") || nomeArquivoDuplicata.contains("EXPORTACAO") || nomeArquivoDuplicata.contains("DUPLICATA")) {
                            memFile.setFieldSeparator(",");
                        } else {
                            memFile.setFieldSeparator(";");
                        }
                    }

                    nomeArquivo = memFile.getFilename();

					if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }
					
					if (dbIODepara == null) {
						dbIODepara = connectDeParaDb(logger);
					}

					String transacaoString = nomeArquivo;
					if(nomeArquivo.toUpperCase().startsWith("FILTRO") && nomeArquivo.length() > 21)
						transacaoString = nomeArquivo.substring(21);

                    transacaoInicial = 0;
                    if (transacaoString.contains("_")) {
                        try {transacaoInicial = Integer.parseInt(transacaoString.substring(0, transacaoString.indexOf("_")));}
                        catch (Exception xx) {transacaoInicial = 0;}
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRM.optString("Cruza_Extrato_com_Extrato").toUpperCase();

                    String tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";
					logger.logInfo("CHEGOU AQUI4 " + tipoPlanilha);

                    //if(roteiro.has("contaBuscaPlano"))contaBuscaPlano = roteiro.optString("contaBuscaPlano");

                    //########################################################################

                    // COLOCAR AQUI funcao para carregar variaveis do cliente
                    // CNPJ, EMAIL, contas fixas, etc.


                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================



                    JSONObject objetoParametro = new JSONObject();

                    if (tipoPlanilha.equals("MOVIMENTO")) {
						try {inomeOrigem     = getIndiceRoteiro("fornecedor", roteiroCRM);}		catch (Exception xx) {inomeOrigem		= -1;}
						try {idataMovimento  = getIndiceRoteiro("dataMovimento", roteiroCRM);}	catch (Exception xx) {idataMovimento	= -1;}
						try {inomePortador   = getIndiceRoteiro("portador", roteiroCRM);}		catch (Exception xx) {inomePortador		= -1;}
						try {idocumento      = getIndiceRoteiro("documentoNF", roteiroCRM);}	catch (Exception xx) {idocumento		= -1;}
						try {ivalorDocumento = getIndiceRoteiro("valorDocumento", roteiroCRM);}	catch (Exception xx) {ivalorDocumento	= -1;}
						try {ivalorJuros     = getIndiceRoteiro("valorJuros", roteiroCRM);}		catch (Exception xx) {ivalorJuros		= -1;}
						try {ivalorDesconto  = getIndiceRoteiro("valorDesconto", roteiroCRM);}	catch (Exception xx) {ivalorDesconto	= -1;}
						try {ivalorMulta     = getIndiceRoteiro("valorMulta", roteiroCRM);}		catch (Exception xx) {ivalorMulta		= -1;}
						try {icodCcOrigem    = getIndiceRoteiro("centroCusto", roteiroCRM);}	catch (Exception xx) {icodCcOrigem		= -1;}
						try {ivalorPagamento = getIndiceRoteiro("valorPagamento", roteiroCRM);}	catch (Exception xx) {ivalorPagamento	= -1;}
						try {icomplemento01  = getIndiceRoteiro("complemento01", roteiroCRM);}	catch (Exception xx) {icomplemento01	= -1;}
						try {icomplemento02  = getIndiceRoteiro("complemento02", roteiroCRM);}	catch (Exception xx) {icomplemento02	= -1;}
						try {icomplemento03  = getIndiceRoteiro("complemento03", roteiroCRM);}	catch (Exception xx) {icomplemento03	= -1;}
						try {icomplemento04  = getIndiceRoteiro("complemento04", roteiroCRM);}	catch (Exception xx) {icomplemento04	= -1;}
						try {icomplemento05  = getIndiceRoteiro("complemento05", roteiroCRM);}	catch (Exception xx) {icomplemento05	= -1;}
						try {icomplemento06  = getIndiceRoteiro("complemento06", roteiroCRM);}	catch (Exception xx) {icomplemento06	= -1;}
                        icpfCnpj        = -1;

                    }

					try{
						while (memFile.hasNextLine()) {

							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);
								line = stringNormalizer(line, true);
								
								//#fabrica
								if(!tipoPlanilha.contains("CONTABIL_FOLHA")) cont++;

								if (line.replaceAll("\\|","").replaceAll(";","").equals("")) continue;
								
								// logger.logInfo("CHEGOU AQUI5");
								
								contadorCabecalho++;
								if (contadorCabecalho<15) {
									cabecalhoPlanilha.append(line).append(" "); 
									cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								} else {
									cabecalhoPlanilha = new StringBuilder();
								}

								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////

								if (apagaArquivo != null) {


									//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
									//LEITURA PADRAO ARQUIVOS .OFX
									//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
									if (nomeArquivo.toUpperCase().contains(".OFX")) {
										tipoPlanilha = "EXTRATO-OFX";     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);
										JSONObject jDados = new JSONObject();
										jDados.put("CODEMPRESA", codEmpresa);
										jDados.put("NOMEARQUIVO", nomeArquivo);
										readOFXDefault(memFile, jDados, dbIOCont, logger);
										break;
									} // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
									// ----------------------------------------------------------------------------------------------------------
									logger.logInfo("CC AQ " + tipoPlanilha);
									// if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
									if (!cabecalhoPlanilha.toString().equals("") && !roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0) { // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

										JSONObject variaveis = new JSONObject();
										variaveis.put("line", 			line);
										variaveis.put("anoData", 		anoData); 
										variaveis.put("dirName", 		dirName);
										variaveis.put("jStatus", 		new JSONObject());
										variaveis.put("extensao", 		extencao);
										variaveis.put("codEmpresa", 	codEmpresa);
										variaveis.put("nomeArquivo", 	nomeArquivo);
										variaveis.put("nomeEmpresa", 	nomeEmpresa);
										variaveis.put("nomePortador", 	nomePortador);
										variaveis.put("tipoPlanilha", 	tipoPlanilha);
										variaveis.put("complemento01", 	complemento01);
										variaveis.put("complemento02", 	complemento02);
										variaveis.put("nomePortador2", 	nomePortador2);
										variaveis.put("tipoLancamento", tipoLancamento);
										variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());									
										
										// if (codEmpresa.contains("104")) {
											// roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
										// }
										
										String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
										
										
										// logger.logInfo("retorna padroes -> " + retornaPadroes);
										
										
										// logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);
	 
										JSONObject objRetorno = new JSONObject(retornaPadroes);
										if (objRetorno.has("tipoRetorno")) {
											anoData        = objRetorno.optString("anoData");
											retornaPadroes = objRetorno.optString("tipoRetorno");
											nomePortador   = objRetorno.optString("nomePortador").trim();
											complemento01  = objRetorno.optString("complemento01").trim();
											nomePortador2  = objRetorno.optString("nomePortador2").trim();
										}
										
										// logger.logInfo("NP23 " + nomePortador + " | " + nomePortador2);
										
										// logger.logInfo("NP2 ==== "+nomePortador2);
										if (retornaPadroes.equals("continue")) continue;
										if (retornaPadroes.equals("break"))   {
											// jStatus = new JSONObject();
											putStatus(dirName, "", new JSONObject(), logger);
											break;
										}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									//                      LEITURA PADRAO DE DUPLICATAS
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").equals("BAIXAR") && memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").equals("CHAVE DUPLICATA") && memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").equals("RAZAO SOCIAL")) {
										tipoPlanilha = "DUPLICATA";
										if(primeiraVezDuplicata) {
											limparIODuplicata(codEmpresa, dbIOCont, logger);
										}
										JSONObject jIndices = new  JSONObject();

										jIndices.put("IBAIXAR", 0);
										jIndices.put("ICODIGOFORNECEDOR", 1);
										jIndices.put("INOMEORIGEM", 2);
										jIndices.put("ICHAVEDUPLICATA", 3);
										jIndices.put("IDUPLICATA", 4);
										jIndices.put("ISERIE", 5);
										jIndices.put("IPARCELA", 6);
										jIndices.put("IVENCIMENTO", 7);
										jIndices.put("IVALORPARCELA", 8);
										jIndices.put("ISITUACAO", 10);
										jIndices.put("IVALORJUROS", -1);
										jIndices.put("IVALORDESCONTO", -1);
										jIndices.put("IVALORMULTA", -1);

										jIndices.put("CODEMPRESA", codEmpresa);

										primeiraVezDuplicata = inserirIODuplicata(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										break;
									} // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
									// ----------------------------------------------------------------------------------------------------------
								}

								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////


								if(memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("TIPO") &&
								   memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","").contains("CONTA GERENCIAL") &&
								   memFile.getStringFieldRemoveEspCharsUpper(7).replaceAll("\"","").contains("RATEIO DEBITO")){
									tipoPlanilha = "ADIANTAMENTOS DE VIAGEM";

									inomeOrigem		= 5;
									idataMovimento	= 1;
									inomePortador	= 12;
									idocumento		= 3;
									ivalorDocumento	= 9;
									ivalorJuros		= -1;
									ivalorDesconto	= -1;
									ivalorMulta		= -1;
									icodCcOrigem	= -1;
									ivalorPagamento	= -1;
									icomplemento01	= 6;
									icomplemento02	= 2;
									icomplemento03	= 4;
									icomplemento04	= 13;
									icomplemento05	= -1;
									icomplemento06	= -1;
									continue;
								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;

							
								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								JSONObject jDadosObj = new JSONObject();
								tipoPlanilha = getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialCharsToUC(nomeArquivo), jDadosObj);
								
								logger.logInfo("CC AQ2 " + tipoPlanilha + " | " + StringUtil.removeSpecialCharsToUC(nomeArquivo));
								
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									if(roteiroCRM.optString("fornecedor").length() < 3)		{try {inomeOrigem     = getIndiceRoteiro("fornecedor", roteiroCRM);}	catch (Exception xx) {inomeOrigem		= -1;}}
									if(roteiroCRM.optString("dataMovimento").length() < 3)	{try {idataMovimento  = getIndiceRoteiro("dataMovimento", roteiroCRM);}	catch (Exception xx) {idataMovimento	= -1;}}
									if(roteiroCRM.optString("portador").length() < 3)		{try {inomePortador   = getIndiceRoteiro("portador", roteiroCRM);}		catch (Exception xx) {inomePortador		= -1;}}
									if(roteiroCRM.optString("documentoNF").length() < 3)	{try {idocumento      = getIndiceRoteiro("documentoNF", roteiroCRM);}	catch (Exception xx) {idocumento		= -1;}}
									if(roteiroCRM.optString("valorDocumento").length() < 3)	{try {ivalorDocumento = getIndiceRoteiro("valorDocumento", roteiroCRM);}catch (Exception xx) {ivalorDocumento	= -1;}}
									if(roteiroCRM.optString("valorJuros").length() < 3)		{try {ivalorJuros     = getIndiceRoteiro("valorJuros", roteiroCRM);}	catch (Exception xx) {ivalorJuros		= -1;}}
									if(roteiroCRM.optString("valorDesconto").length() < 3)	{try {ivalorDesconto  = getIndiceRoteiro("valorDesconto", roteiroCRM);}	catch (Exception xx) {ivalorDesconto	= -1;}}
									if(roteiroCRM.optString("valorMulta").length() < 3)		{try {ivalorMulta     = getIndiceRoteiro("valorMulta", roteiroCRM);}	catch (Exception xx) {ivalorMulta		= -1;}}
									if(roteiroCRM.optString("centroCusto").length() < 3)	{try {icodCcOrigem    = getIndiceRoteiro("centroCusto", roteiroCRM);}	catch (Exception xx) {icodCcOrigem		= -1;}}
									if(roteiroCRM.optString("valorPagamento").length() < 3)	{try {ivalorPagamento = getIndiceRoteiro("valorPagamento", roteiroCRM);}catch (Exception xx) {ivalorPagamento	= -1;}}
									if(roteiroCRM.optString("complemento01").length() < 3)	{try {icomplemento01  = getIndiceRoteiro("complemento01", roteiroCRM);}	catch (Exception xx) {icomplemento01	= -1;}}
									if(roteiroCRM.optString("complemento02").length() < 3)	{try {icomplemento02  = getIndiceRoteiro("complemento02", roteiroCRM);}	catch (Exception xx) {icomplemento02	= -1;}}
									if(roteiroCRM.optString("complemento03").length() < 3)	{try {icomplemento03  = getIndiceRoteiro("complemento03", roteiroCRM);}	catch (Exception xx) {icomplemento03	= -1;}}
									if(roteiroCRM.optString("complemento04").length() < 3)	{try {icomplemento04  = getIndiceRoteiro("complemento04", roteiroCRM);}	catch (Exception xx) {icomplemento04	= -1;}}
									if(roteiroCRM.optString("complemento05").length() < 3)	{try {icomplemento05  = getIndiceRoteiro("complemento05", roteiroCRM);}	catch (Exception xx) {icomplemento05	= -1;}}
									if(roteiroCRM.optString("complemento06").length() < 3)	{try {icomplemento06  = getIndiceRoteiro("complemento06", roteiroCRM);}	catch (Exception xx) {icomplemento06	= -1;}}
								}
							
							  //\\if(!tipoPlanilha.contains("ADIANTAMENTO") && !tipoPlanilha.contains("CAIXA")){
							  // \\    int contador = 0;
							  //  \\   for (int j=0; j<memFile.getFieldsSize(); j++) {
							  //   \\if (!memFile.getStringField(j).equals("")) {
							  //    \\     memFile.setField(contador, memFile.getStringField(j));
							  //    //        if (j > contador) memFile.setField(j,"");
							  //   //         contador++;
							  //  //      }
							  // //   }
							  ////}

								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
								if(line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase()) &&
								   line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase()) &&
								   line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase()) &&
								   roteiroCRM.optString("fornecedor").length() > 4) {

									for (int i = 0; i < memFile.getFieldsSize(); i++) {
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) continue;

										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase())) idataMovimento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase())) inomeOrigem = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase())) ivalorDocumento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorPagamento")).toUpperCase())) ivalorPagamento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorJuros")).toUpperCase())) ivalorJuros = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDesconto")).toUpperCase())) ivalorDesconto = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorMulta")).toUpperCase())) ivalorMulta = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("centroCusto")).toUpperCase())) icodCcOrigem = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("portador")).toUpperCase())) inomePortador = i;


										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("documentoNF")).toUpperCase())) idocumento = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento01")).toUpperCase())) icomplemento01 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento02")).toUpperCase())) icomplemento02 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento03")).toUpperCase())) icomplemento03 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento04")).toUpperCase())) icomplemento04 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento05")).toUpperCase())) icomplemento05 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento06")).toUpperCase())) icomplemento06 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento07")).toUpperCase())) icomplemento07 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento08")).toUpperCase())) icomplemento08 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento09")).toUpperCase())) icomplemento09 = i;
										if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento010")).toUpperCase())) icomplemento10 = i;
										

									}
								}
								
								logger.logInfo("CC AQ333 " + tipoPlanilha);
								
								if (!tipoPlanilha.contains("ESCRITURACAO") && (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA("))) {
									if (inomePortador >= 0) {
										if (!tipoPlanilha.contains("ADIANTAMENTO") && !tipoPlanilha.contains("CAIXA") &&  memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("CHEQUE:")) {
											complemento01 = "";
											complemento04 = "";
											nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
											continue;
										}
									}
									
									// logger.logInfo("DEU BOM AQQ " + inomeOrigem + " | " + idocumento + " | " + icomplemento01 + " | " + icomplemento04);
									
									if (tipoPlanilha.contains("EXPORTACAOENTRADA")) {
										if (inomePortador >= 0) nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
									}

									logger.logInfo("DEU BOM AQQ " + idataMovimento);

									if(idataMovimento >= 0) {

                                        logger.logInfo("ENTROU IF IDATAMOV");

										if (!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("") ) {
											nomeOrigem   = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
											if (tipoPlanilha.contains("ADIANTAMENTO") || tipoPlanilha.contains("CAIXA"))  nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
											if (idocumento >= 0) documento    = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                            if (icomplemento01 >= 0) complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                            if (icomplemento04 >= 0 && !tipoPlanilha.contains("CAIXA")) complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
										}
										if (memFile.getStringField(idataMovimento).equals("")) continue;
										
										// logger.logInfo("DEU BOM AQ DOIS");
										if (tipoPlanilha.contains("CAIXA")) {
											nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
											complemento04 = nomeArquivo.toUpperCase();
										}

                                        //CAPTURA DA DATA PARA O ROTEIRO PRINCIPAL LOGO ABAIXO
										try {
											dataMovimento     = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), "dd/MM/yyyy");
                                            dataLote          = getCampoDate(dataMovimento, "", "yyyy-MM");
                                            logger.logInfo("DATA NO PRIMEIRO TRY -> " + dataMovimento);
										} catch (Exception dt1) {
											try {
												Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
												dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
												dataLote = DateUtil.dateToString(dt, "yyyy-MM");

                                                logger.logInfo("DATA NO SEGUNDO TRY -> " + dataMovimento);
											} catch (Exception dt2) {
												try {
													Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy HH:mm:ss");	// --- VERIFICAR
													dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
													dataLote = DateUtil.dateToString(dt, "yyyy-MM");

                                                    logger.logInfo("DATA NO TERCEIRO TRY -> " + dataMovimento);
												} catch (Exception dt2) {
													try {
														dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
														if (dataMovimento.length() > 10) dataMovimento = dataMovimento.substring(0, 10);
														Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
														dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
														dataLote = DateUtil.dateToString(dt, "yyyy-MM");

                                                        logger.logInfo("DATA NO QUARTO TRY -> " + dataMovimento);
														
													} catch (Exception dt2) { continue; }
												}
											}
										}
									}


									/// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
									/// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

									if(tipoPlanilha.contains("ADIANTAMENTO")){
										nomePortador	= "";
										if (inomePortador >= 0) nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
									}
									
									if(!tipoPlanilha.equals("MOVIMENTO")) complemento01	= "";
									complemento02	= "";
									complemento03	= "";
									

									complemento05	= "";

									complemento06	= "";
									complemento07	= "";
									complemento08	= "";
									complemento09	= "";
									complemento10	= "";

									cpfCnpj			= "";

									//nomeOrigem	= "";
									//documento		= "";
									parcelaDoc      = 1;
									historico		= "";

									valorDocumento	= 0;
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;

									if(!tipoPlanilha.equals("MOVIMENTO")) {
                                        if (icomplemento01 >= 0) complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");  
                                        if (icomplemento04 >= 0 && !tipoPlanilha.contains("CAIXA")) complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"",""); 
                                    } 
									
									if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
									if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
									
									if(!tipoPlanilha.contains("ADIANTAMENTO") && !tipoPlanilha.contains("CAIXA") && nomePortador.contains("-")) complemento05 = nomePortador.substring(nomePortador.lastIndexOf("-")).replace("-","").trim();
									else if(icomplemento05 >= 0) complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

									if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
									if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
									if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
									if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
									if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                    // logger.logInfo("Doc: " + documento + " <line> " + line);
									complemento01 = stringNormalizer(complemento01, true);
									complemento02 = stringNormalizer(complemento02, true);
									complemento03 = stringNormalizer(complemento03, true);
									complemento04 = stringNormalizer(complemento04, true);
									complemento05 = stringNormalizer(complemento05, true);
									complemento06 = stringNormalizer(complemento06, true);
									complemento07 = stringNormalizer(complemento07, true);
									complemento08 = stringNormalizer(complemento08, true);
									complemento09 = stringNormalizer(complemento09, true);
									complemento10 = stringNormalizer(complemento10, true);
									nomePortador = stringNormalizer(nomePortador, true);

									if(idocumento >=0 && !tipoPlanilha.equals("MOVIMENTO"))		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

									if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");
									if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

									if(ivalorDocumento >=0){
										try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									if (valorDocumento == 0 && tipoPlanilha.contains("ADIANTAMENTO") && complemento01.startsWith("ADIANTAMENTO DE VIAGE")) {
										complemento05 = "ESTORNO";
										try{valorDocumento = Math.abs(memFile.getDoubleField(10));}
										catch (Exception vlrd) { valorDocumento = 0; }
                                        if (valorDocumento == 0) continue;
									}
									
									// if (valorDocumento  > 66 || valorDocumento < 65) continue;
									
									logger.logInfo("COMPZIN " + complemento06 + " | " + nomeOrigem);

									if (tipoPlanilha.contains("MOTORISTASTERCEIROS")) {
										if (complemento06.contains("C")) {
											nomePortador = nomeOrigem;
										}
									}

									logger.logInfo("AAAAAA " + nomePortador);

									if(ivalorJuros >=0){
										try{valorJuros = memFile.getDoubleField(ivalorJuros);}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									if(ivalorDesconto >=0){
										try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									if(ivalorMulta >=0){
										try{valorMulta = memFile.getDoubleField(ivalorMulta);}
										catch(Exception vlrm) {valorMulta = 0;}
									}

									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									//---~---~---~---~---~---~-

                                    if(ivalorDocumento < 0 && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}

									if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
										if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
										if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
									}

                                    if(valorDocumento == 0) continue;

                                    valorDocumento = Math.abs(valorDocumento);

                                    logger.logInfo("DANDO MT BOM " + valorDocumento + " | " + dataMovimento);
								
									
								}

                                if (tipoPlanilha.contains("ESCRITURACAO") && (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA (")))) {
									// zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());

                                    // #Fabrica(2019-05-20)
                                    try{
                                        dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
                                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                    }catch(Exception e){
                                        // dataMovimento   = "";
                                        // dataLote        = "";
                                    }
                                   
                                    // leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
											
									// 	}
									// }

									// if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, false, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, false, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, false, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, false, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, false, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, false, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, false, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, false, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}

									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento < 0 && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);

                                    if (dataMovimento.trim().equals("")) continue;
									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									// if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorDocumento > 0) isLinhaPrincipal = true;
								}

								
								
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {

									/*dataMovimento = getDateTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro);
									if (dataMovimento.equals("")) continue;

									try {
										Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
										dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
										dataLote = DateUtil.dateToString(dt, "yyyy-MM");
									} catch (Exception xx) { continue;}
	*/

									String dataString = getStringTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro);

									if (!dataString.equals("")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}
										if (!dataString.contains("/") && dataString.contains("20")) {
											try {
												Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
												dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
												dataLote = DateUtil.dateToString(dts, "yyyy-MM");
												if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
													dataMovimento = "";
													continue;
												}
											} catch (Exception dt1) {
												continue;
											}
										}
									}

									complemento01 = getStringTXT(roteiroCRM.optString("complemento01").toUpperCase(), line, objetoParametro);
									complemento02 = getStringTXT(roteiroCRM.optString("complemento02").toUpperCase(), line, objetoParametro);
									complemento03 = getStringTXT(roteiroCRM.optString("complemento03").toUpperCase(), line, objetoParametro);
									complemento04 = getStringTXT(roteiroCRM.optString("complemento04").toUpperCase(), line, objetoParametro);
									complemento05 = getStringTXT(roteiroCRM.optString("complemento05").toUpperCase(), line, objetoParametro);
									complemento06 = getStringTXT(roteiroCRM.optString("complemento06").toUpperCase(), line, objetoParametro);
									complemento07 = getStringTXT(roteiroCRM.optString("complemento07").toUpperCase(), line, objetoParametro);
									complemento08 = getStringTXT(roteiroCRM.optString("complemento08").toUpperCase(), line, objetoParametro);
									complemento09 = getStringTXT(roteiroCRM.optString("complemento09").toUpperCase(), line, objetoParametro);
									complemento10 = getStringTXT(roteiroCRM.optString("complemento10").toUpperCase(), line, objetoParametro);

									nomePortador  = getStringTXT(roteiroCRM.optString("portador").toUpperCase(), line, objetoParametro);
									documento     = getStringTXT(roteiroCRM.optString("documentoNF").toUpperCase(), line, objetoParametro);
									codCcOrigem   = getStringTXT(roteiroCRM.optString("centroCusto").toUpperCase(), line, objetoParametro);
									
									valorDocumento = getDoubleTXT(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									valorJuros	   = getDoubleTXT(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

									if(!tipoPlanilha.contains("CONTABIL_FOLHA"))
										nomeOrigem    = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);
									
									if(tipoPlanilha.contains("CONTABIL_FOLHA")){
										
										logger.logInfo("VALANTES " + valorDocumento);
										
										valorDocumento = valorDocumento / 100;
										// if(line.length() < 40) 
										logger.logInfo("VALDEPOIS " + valorDocumento);
											nomeOrigem = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);
										// else {
											cont++;
											// nomeOrigem = "";
										// }
										
									
									}
								}

								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								//---~---~---~---~---~---~-

								if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();


								//##########################################################



								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;


								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								lote = nomeEmpresa + "_" + codEmpresa + "_" + nomeArquivo  + "_" + dataLote + "_" + tipoLancamento;
								chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;


								if(!tipoPlanilha.contains("ADIANTAMENTO") && !tipoPlanilha.contains("CAIXA")){
									if (complemento01.contains("FINAME") || complemento01.contains("EMPRESTIMO")) {
										complemento02 = "FINANCIAMENTOS";
									}
                                    if (complemento01.contains("BRADESCO") && nomeOrigem.contains("BRADESCO")) {
										complemento02 = "FINANCIAMENTOS";
									}
									if (complemento01.contains("FINAME") || complemento01.contains("EMPRESTIMO")) {
										complemento02 = "FINANCIAMENTOS";
									}
									if (complemento01.contains("CONSORCIO")) {
										complemento02 = "CONSORCIOS";
									}
									if (complemento01.contains("PARCELAMENTO DE") || complemento01.contains("-PRT") || complemento01.contains("-PERT")) {
										complemento02 = "PARCELAMENTOS";
									}

									if (complemento02.equals("FINANCIAMENTOS")) {
										valorDocumento = valorDocumento + valorJuros;
									}

									//if (nomePortador.contains("-")) documento = nomePortador.substring(nomePortador.lastIndexOf("-")+1);
								}

								if(chave.length() > 200)  chave = chave.substring(0, 200);
								String key = chave  + "-CTB";


								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.documento         = documento;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.nomePortador      = nomePortador;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento01     = complemento01;
									ttMov2.complemento02     = complemento02;
									ttMov2.complemento03     = complemento03;
									ttMov2.complemento04     = complemento04;
									ttMov2.complemento05     = complemento05;
									ttMov2.complemento06     = complemento06;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(porAba);
									ttMov2.nomeOrigem        = nomeOrigem;
								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								if(tipoPlanilha.contains("CONTABIL_FOLHA") && !nomeOrigem.equals("")) ttMov2.nomeOrigem = nomeOrigem;
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								if (!tipoPlanilha.contains("ADIANTAMENTO") && !tipoPlanilha.contains("CAIXA") && complemento02.equals("FINANCIAMENTOS")) ttMov2.valorJuros = 0;
								logger.logInfo("TTS " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
								mapaVariavel.put(key,ttMov2);

								if (!tipoPlanilha.contains("ADIANTAMENTO") && !tipoPlanilha.contains("CAIXA") && complemento02.equals("FINANCIAMENTOS")) {
									key = chave  + "JUROS-CTB";

									ttMovimentoPadrao ttMov3      = (ttMovimentoPadrao)mapaVariavel.get(key);
									if (ttMov3 == null) {
										ttMov3 = new ttMovimentoPadrao(ttMov2);
										ttMov3.chave             = chave + "JUROS-CTB";
										ttMov3.complemento01     = complemento01;
										ttMov3.complemento02     = "FINANCIAMENTOS-JUROS";
										ttMov3.tipoPlanilha      = tipoPlanilha;

										ttMov3.valorDocumento   = valorJuros;
										ttMov3.valorDesconto    = 0;
										ttMov3.valorMulta       = 0;
										ttMov3.valorJuros       = 0;
										ttMov3.abaPlanilha       = String.valueOf(porAba);

										mapaVariavel.put(key,ttMov3);
									}
								}
							} catch (Exception e) {
								logger.logError("EndpointA:", e);
							}
						} 		//while (memFile.hasNextLine())

					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
                    // --------------------------------------------------------------------------------------------------------------------
                    if (!tipoPlanilha.contains("EXTRATO") && (cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) ||
                        (tipoPlanilha.contains("EXTRATO") && (cruzaExtrato.contains("FALSE") || cruzaExtrato.contains("FALSO")))) {

                        try {
                            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                for (int t=0; t<extratoEmpresa.length(); t++) {

                                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                                    recMov.put("CODEMPRESA", codEmpresa);
                                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                                    if (!tipoPlanilha.contains("EXTRATO") && (cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO"))) {
                                        recMov.put("NOMEARQUIVO", nomeArquivo);
                                    }
                                    else {
                                        recMov.put("NOMEARQUIVO", "");
                                    }

                                    recMov.put("TIPOLANCAMENTO", tipoLancamento);
                                    recMov.put("CONTAMOVIMENTO", "");
                                    recMov.put("CONTAPORTADOR", "");
                                    recMov.put("CONTLINHATEXTO", String.valueOf(t));

                                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);

                                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                                    apagaExtrato    = true;
                                }
                            }
                        }
                        catch (Exception xx) {
                            logger.logInfo("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
                        }

                    } // if tipo planilha nao igual extrato
                    // --------------------------------------------------------------------------------------------------------------------
                } // while
            }

        }
    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    }
    StringBuilder txtFiscal = new StringBuilder();
    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador = new StringBuilder();
    String nomePortadorAnterior = "";

    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            if(ttMov.tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;

            logger.logInfo("DATA TTMOV -> " + ttMov.dataMovimento + "VALOR TTMOV -> " + ttMov.valorDocumento);

			if (ttMov.tipoPlanilha.contains("MOVIMENTO")) {
				String keyTr = ttMov.complemento05;
				ttTransacao ttTr      = (ttTransacao)mapaTransacao.get(keyTr);
				if (ttTr == null) {
					transacaoInicial++;
					ttTr = new ttTransacao();
					ttTr.transacao    = transacaoInicial;
					ttTr.bordero      = ttMov.complemento05;
				}
				mapaTransacao.put(keyTr,ttTr);
			}

            // ------------------------------------------------------------------------------------------------------------------
            // INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO = "";
            String PORTADOR = "";
            String CHAVE = "";
            boolean jaCruzou = false;


            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR")) chaveExtrato = codEmpresa + "-" + dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" + dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO = recMov.optString("DATAMOVIMENTO");
                    PORTADOR = recMov.optString("PORTADOR");
                    CHAVE = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();
                    jaCruzou = true;

                }

            }

            if (cruzaExtrato.contains("TRUE") && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato = roteiroCRM.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm = new Date();
                Date dataMovimentoDateMaisDois = new Date();
                Date dataMovimentoDateMaisTres = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR")) chaveExtrato = codEmpresa + "-" + dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" + dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO = recMov.optString("DATAMOVIMENTO");
                    PORTADOR = recMov.optString("PORTADOR");
                    CHAVE = recMov.optString("CHAVE");

                    ttMov.nomePortador = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();

                }

            }


            // ------------------------------------------------------------------------------------------------------------------
            // FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------



            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef = mesRef - 1;
                if (mesRef == 0) {
                    mesRef = 12;
                    anoRef = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef = mesRef - 1;
                if (mesRef == 0) {
                    mesRef = 12;
                    anoRef = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior = "";
            String trimestreMesAnoAtual = "";
            String descricaoPlanoContaPortador = "";
            String descricaoPlanoContaMovimento = "";

            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

            contaJuros = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito = roteiroCRM.optString("contaFixaDebito");
            contaDesconto = roteiroCRM.optString("contaFixaDesconto");
            contaMulta = roteiroCRM.optString("contaFixaMulta");



            contaMovimento = "";
            contaPortador = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }

            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO")) contaMovimento = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento = getConta09(contaMovimento, ttMov.nomeOrigem, ttMov.documento, "", ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            contaPortador = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            ttMov.codFilial = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                        ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                        ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            ttMov.complemento03 = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
            histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08, histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
            ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
            ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
            ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01, histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02, histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03, histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04, histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05, histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06, histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07, histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08, histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09, histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10, histobj);
            ttMov.nomeOrigem = getLimpaCampos("nomeOrigem", ttMov.nomeOrigem, histobj);
            ttMov.documento = getLimpaCampos("documento", ttMov.documento, histobj);
            ttMov.nomePortador = getLimpaCampos("nomePortador", ttMov.nomePortador, histobj);
			
			
            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01, histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02, histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03, histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04, histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05, histobj);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06, histobj);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07, histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08, histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09, histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10, histobj);
            ttMov.nomeOrigem = getLimpaCamposAvancado("nomeOrigem", ttMov.nomeOrigem, histobj);
            ttMov.documento = getLimpaCamposAvancado("documento", ttMov.documento, histobj);
            ttMov.nomePortador = getLimpaCamposAvancado("nomePortador", ttMov.nomePortador, histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem); 	   histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
            histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento4(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento5(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento6(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador = getContaPortador2(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador = getContaPortador3(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador = getContaPortador4(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador = getContaPortador5(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador = getContaPortador6(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            regraContaMovimento = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            objetoRoteiro.put("regraConta", regraContaMovimento);
            objetoRoteiro.put("regraHistorico", regraHistorico);


            double valorPrincipal = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }

            ttMov.contaJuros = getContaJuros(contaJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto = getContaDesconto(contaDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta = getContaMulta(contaMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil = getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            if (contaPortador.equals("") && !ttMov.nomePortador.equals("") && !nomePortadorAnterior.equals(ttMov.nomePortador)) {
                txtPortador.append(roteiroCRM.optString("contabilidade"));
                txtPortador.append(";");
                txtPortador.append(roteiroCRM.optString("idRoteiro"));
                txtPortador.append(";");
                txtPortador.append(nomeEmpresa);
                txtPortador.append(";");
                txtPortador.append(ttMov.tipoLancamento);
                txtPortador.append(";");
                txtPortador.append(ttMov.nomePortador);
                txtPortador.append("\r\n");
                nomePortadorAnterior = ttMov.nomePortador;
                geraRegraPortador = true;
            }




            boolean regraCRM = false;
            if (!contaMovimento.equals("")) regraCRM = true;

            if (contaMovimento.contains("INVERTE") || contaPortador.contains("INVERTE")) {
                contaInvertida = contaMovimento.replaceAll("INVERTE","");
                contaMovimento = contaPortador.replaceAll("INVERTE","");
                contaPortador = contaInvertida.replaceAll("INVERTE","");
            }

            //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaMovimento)
                .queryUnique();

                if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                    dbIOCont.insert("IO_PLANOCONTA")
                    .fields("CODEMPRESA,CONTACONTABIL")
                    .param(codEmpresa)
                    .param(contaMovimento)
                    .execute();
                }
            }

            if (contaMovimento.equals("")){
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					//JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					futureObject.put("codEmpresaPlano", codEmpresaPlanoContas);
					JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					
					if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
					if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							//logger.logInfo("SUJANDO "  + cnpjEmpresaRequest + " | " + cnpjContabilidadeRequest + " | " + ttMov.nomeOrigem);
							try{
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
 								
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								if (contaMovimento == null) contaMovimento = "";
								// logger.logInfo("CONTS " + contaMovimento);
								// Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota 
								if (contaMovimento.contains("T")) {
									apagaContaT    = true;
								}
								
								// logger.logInfo("CMM " + contaMovimento + " | " + apagaContaT);
								
								
							}else contaMovimento = "";
							
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/
							
							// RETIRA  T DA CONTA MOVIMENTO
							contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
							ttP.contaContabil     = contaMovimento;
							mapaDePara.put(ttMov.nomeOrigem,ttP);
						
						} 
						else {
							contaMovimento = ttP.contaContabil;
						}
						
						
					}  
				} catch  (Exception Ee) {}
			}


            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String razaoSocial = ttMov.nomeOrigem;
            String razaoSocialDuplicata = ttMov.nomeOrigem;

            if (!contaMovimento.equals("")){

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO,CONTAANALITICA")
                .param(codEmpresa)
                .param(contaMovimento)
                .queryUnique();

                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {

                    descricaoPlanoContaMovimento = descricaoPlano.optString("DESCRICAOPLANO").replaceAll("EAMP;","&").replaceAll(";","").trim();

                    if (!classificaFornec.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                        razaoSocial = descricaoPlano.optString("DESCRICAOPLANO").trim();
                    }

                    // Joga no nome do fornecedor o que esta no plano de contas
                    if (!classificaPlano.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
                        ttMov.nomeOrigem = descricaoPlano.optString("DESCRICAOPLANO").trim();
                    }
                    if (descricaoPlano.optString("DESCRICAOPLANO").length() < 2 || descricaoPlano.optString("DESCRICAOPLANO").equals("") || descricaoPlano.optString("DESCRICAOPLANO") == null) {
                        eFornecedor = true;
                    }
                }

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }

            }

            if (!contaPortador.equals("")){
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO,CONTAANALITICA")
                .param(codEmpresa)
                .param(contaPortador)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoPlanoContaPortador = descricaoPlano.optString("DESCRICAOPLANO").replaceAll("EAMP;","&").replaceAll(";","").trim();
                }
            }


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito = contaMovimento;
                ttMov.contaCredito = contaPortador;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito = contaMovimento;
                ttMov.contaDebito = contaPortador;
            }

            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }

            String parcelaAtualeFinal = "";
            String parcelaAtual = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);



            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                           ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                           ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);

            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());


            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();

            ttMov.codFilial = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                        ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                        ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
			
			if (ttMov.tipoPlanilha.contains("FOLHA"))
				ttMov.historico = "TR:"+ttMov.complemento06+"#"+ttMov.historico;
			
			
			logger.logInfo("CPS " + ttMov.historico + " | " + ttMov.complemento06 + " | " + ttMov.tipoPlanilha);

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico = ttMov.historico + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros = ttMov.historicoJuros + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta = ttMov.historicoMulta + " Filial:" + ttMov.codFilial;
            }


            String codParticipante = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                                     ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                                     ttMov.nomeArquivo, ttMov.centroCusto, "");
            if (!codParticipante.equals("")) {
                ttMov.historico = ttMov.historico + " Participante:" + codParticipante;
                ttMov.historicoJuros = ttMov.historicoJuros + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto + " Participante:" + codParticipante;
                ttMov.historicoMulta = ttMov.historicoMulta + " Participante:" + codParticipante;
            }

            ttMov.historico = ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoJuros = ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoMulta = ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();

            // ------------------------------------------------
            // GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }


            JSONObject jDescricaoDupl = new JSONObject();

            if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM){

                JSONObject jDados = new JSONObject();
                jDados.put("CODEMPRESA", codEmpresa);
                jDados.put("RAZAOSOCIAL", razaoSocial);
                jDados.put("NOMEORIGEM", ttMov.nomeOrigem);
                jDados.put("DOCUMENTO", ttMov.documento);
                jDados.put("DATAMOVIMENTO", ttMov.dataMovimento);
                jDados.put("PARCELADOC", ttMov.parcelaDoc);
                jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                jDados.put("VALORJUROS", ttMov.valorJuros);
                jDados.put("VALORDESCONTO", ttMov.valorDesconto);
                jDados.put("TABELACONTABIL", tabelaContabil);
                jDescricaoDupl = buscarIODuplicata(jDados, dbIOCont, logger);

                Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy"); // --- VERIFICAR
                dataLote = DateUtil.dateToString(dtL, "yyyy-MM");


                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                    txtFiscal.append(jDescricaoDupl.optString("CODEMPRESA"));
                    txtFiscal.append(";");
                    txtFiscal.append("1;");
                    txtFiscal.append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("VALORFINAL"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO"));
                    txtFiscal.append("\r\n");

                    geraFiscal = true;
                    loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                    if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                    ttMov.tipoPlanilha = "NAO LER";
                    mapaVariavel.put(key,ttMov);
                    continue;
                }
                if (eFornecedor) {
                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
                        String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                        txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(razaoSocialDuplicata);
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL"));
                        txtFornecedor.append("\r\n");

                        geraFiscal = true;
                        loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                        if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                        ttMov.tipoPlanilha = "NAO LER";
                        mapaVariavel.put(key,ttMov);
                        continue;


                    }
                }
            }

            chave = ttMov.chave;
            chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            chave = chave + "-CTB";

            String keyAc = chave;

            ttMovimentoPadrao ttMov3 = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3 == null) {
                ttMov3 = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto = 0;
                ttMov3.valorJuros = 0;
                ttMov3.valorDocumento = 0;
                ttMov3.valorMulta = 0;
                ttMov3.documento = "";
            }
            if (ttMov3.documento.equals("")) {
                ttMov3.documento = ttMov.documento;
            } else ttMov3.documento = ttMov3.documento + ", " + ttMov.documento;

            ttMov3.valorDesconto = ttMov3.valorDesconto + ttMov.valorDesconto;
            ttMov3.valorDocumento = ttMov3.valorDocumento + ttMov.valorDocumento;
            ttMov3.valorMulta = ttMov3.valorMulta + ttMov.valorMulta;
            ttMov3.valorJuros = ttMov3.valorJuros + ttMov.valorJuros;
            ttMov3.chave = chave;
			
			boolean abreLancamento = false;

			if (ttMov.tipoPlanilha.contains("MOTORISTASTERCEIROS")) {
				if (ttMov.complemento06.contains("D")) {
					ttMov.contaCredito = "";
				}
				if (ttMov.complemento06.contains("C")) {
					ttMov.contaDebito = "";
					abreLancamento = true;
				}
			}
		
            mapaVariavel.put(key,ttMov);
			
			if (!abreLancamento) mapaOficial.put(keyAc,ttMov3);
			

            if (((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0) || abreLancamento) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                key = chave;
                ttMovimentoPadrao ttMov2 = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2 == null) {
                    ttMov2 = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador = 0;
                    ttMov2.valorDesconto = 0;
                    ttMov2.valorJuros = 0;
                    ttMov2.valorDocumento = 0;
                    ttMov2.valorMulta = 0;
                }
                ttMov2.tipoMovimento = "CTBPORT";
                ttMov2.valorDesconto = ttMov2.valorDesconto + ttMov.valorDesconto;
                ttMov2.valorMulta = ttMov2.valorMulta + ttMov.valorMulta;
                ttMov2.valorJuros = ttMov2.valorJuros + ttMov.valorJuros;
                ttMov2.chave = chave;
                ttMov2.chaveExtrato = "";
                ttMov2.documento = ttMov3.documento;
                ttMov2.classificacao = ttMov.classificacao;
                ttMov2.valorDocumento = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR")){
                    ttMov2.naturezaContabil = "C";
                    ttMov2.contaDebito = "";
                    ttMov2.contaCredito = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER")){
                    ttMov2.naturezaContabil = "D";
                    ttMov2.contaDebito = ttMov.contaDebito;
                    ttMov2.contaCredito = "";
                }
				
				mapaOficial.put(key,ttMov2);
            }
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRM.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".txt";
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal.toString());

            loteFiscal = loteFiscal.replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRM.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());
        }


        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------


        StringBuilder ResumoTxt = new StringBuilder();
        String rn = "\r\n";
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");
        ResumoTxt.append(rn);

        ResumoTxt.append("STATUS;");
        ResumoTxt.append("DATA;TIPO DATA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("DOCUMENTO;");
        ResumoTxt.append("CLIENTE/FORNECEDOR;");
        ResumoTxt.append("PORTADOR;");
        ResumoTxt.append("COMPLEMENTO01;");
        ResumoTxt.append("COMPLEMENTO02;");
        ResumoTxt.append("COMPLEMENTO03;");
        ResumoTxt.append("COMPLEMENTO04;");
        ResumoTxt.append("COMPLEMENTO05;");
        ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
        ResumoTxt.append("DATA;");
        ResumoTxt.append("DEBITO;");
        ResumoTxt.append("CLASS DEB;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("CREDITO;");
        ResumoTxt.append("CLASS CRED;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("HISTORICO;");
        ResumoTxt.append("ORIGEM");

        StringBuilder txtDePara = new StringBuilder();

        txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
        txtDePara.append("\r\n");


        mapaVariavel = new HashMap();

        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {
            String chaveExtrato = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}

            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO")) continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			if(!ttMov.tipoPlanilha.contains("ADIANTAMENTO")){
				String keyTr = ttMov.complemento05;
				ttTransacao ttTr      = (ttTransacao)mapaTransacao.get(keyTr);
				if (ttTr != null) {
					ttMov.historico			= "TR:" + String.valueOf(ttTr.transacao) + "#" + ttMov.historico;
					ttMov.historicoDesconto = "TR:" + String.valueOf(ttTr.transacao) + "#" + ttMov.historicoDesconto;
					ttMov.historicoJuros = "TR:" + String.valueOf(ttTr.transacao) + "#" + ttMov.historicoJuros;
					ttMov.historicoMulta = "TR:" + String.valueOf(ttTr.transacao) + "#" + ttMov.historicoMulta;
				}
			}

            JSONObject extratoEmpresa = new JSONObject();


            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                .param(chaveExtrato + "%")
                .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(1)
                        .param(chaveExtrato)
                        .execute();

                    }
                }

            }


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;

                logger.logInfo("BTL -> 2424| tipoPlanilha -> " + ttMov.tipoPlanilha + " | dataM -> " + ttMov.dataMovimento + " | valorD -> " + ttMov.valorDocumento + " | nomeO -> " + ttMov.nomeOrigem + " | nomeP -> " + ttMov.nomePortador );

                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();

                for (int xx = 0;xx<5;xx++) {
                    try {
                        Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                        if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm; tipoData = "D+1";}
                        if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm; tipoData = "D-1";}
                        if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois; tipoData = "D+2";}
                        if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

                        registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
                        .fields("CONTADEBITO,CONTACREDITO,HISTORICO")
                        .param(codEmpresa)
                        .param(dataLeitura)
                        .param(ttMov.valorDocumento)
                        .query();

                        if (registro != null && registro.length() > 0) break;
                    }
                    catch (Exception xx) {
                        break;
                    }
                }



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal 	= "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

                if (registro != null && registro.length() > 0) {
                    for (int t=0; t<registro.length(); t++) {

                        JSONObject recMov = registro.optJSONObject(t);
                        String contaDebitoRazao = recMov.optString("CONTADEBITO");
                        String contaCreditoRazao = recMov.optString("CONTACREDITO");
                        String historicoRazao = recMov.optString("HISTORICO");

                        String descricaoCredito = "";
                        String descricaoDebito = "";
                        String classificacaoDebito = "";
                        String classificacaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaDebitoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaCreditoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        ResumoTxt.append("\r\n");

                        if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
                        if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(tipoData);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.documento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeOrigem);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomePortador);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento01);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento02);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento03);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento04);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento05);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento06);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.contaDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.contaCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraContaMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraHistorico);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaDebitoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoDebito);
                        ResumoTxt.append(";");


                        ResumoTxt.append(descricaoDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaCreditoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(descricaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(historicoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeArquivo);
                        ResumoTxt.append(";");

						objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                        objetoRoteiro.put("CHAVE", ttMov.chave + contaDebitoRazao);

						objetoRoteiro.put("contaCreditoRazao", contaCreditoRazao);
						objetoRoteiro.put("contaDebitoRazao", contaDebitoRazao);
						objetoRoteiro.put("historicoRazao", historicoRazao);
						objetoRoteiro.put("regraConta", regraContaMovimento);
						objetoRoteiro.put("regraHistorico", regraHistorico);
						objetoRoteiro.put("codigoHistorico", "");

                        objetoRoteiro.put("descricaoContaDebitoRazao",  descricaoDebito);
                        objetoRoteiro.put("descricaoContaCreditoRazao", descricaoCredito);
                        objetoRoteiro.put("classificacaoDebito",  classificacaoDebito);
						objetoRoteiro.put("classificacaoCredito", classificacaoCredito);
						if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                    }
                }
                else {
                    ResumoTxt.append("\r\n");
                    ResumoTxt.append("NAO ENCONTRADO;");
                    ResumoTxt.append(ttMov.dataMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(tipoData);
                    ResumoTxt.append(";");
                    ResumoTxt.append(valorFinal);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.documento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomeOrigem);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomePortador);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento01);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento02);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento03);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento04);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento05);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento06);
                    ResumoTxt.append(";;");

                    ResumoTxt.append(ttMov.contaDebito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.contaCredito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraContaMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.historico);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraHistorico);
                    ResumoTxt.append(";;");
                    ResumoTxt.append(ttMov.nomeArquivo);
                    ResumoTxt.append(";");
                    objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                    if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);

                }
            }



            if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0) classificacao = "C";
                if (ttMov.valorDesconto > 0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto > 0 && ttMov.valorJuros > 0) classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0) classificacao = "D";
                if (ttMov.valorDesconto > 0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto > 0 && ttMov.valorJuros > 0) classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";

            if (classificacao.startsWith("X") && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}


            if (ttMov.tipoMovimento.equals("CTB")) {
                if (ttMov.contaDebito.equals("") || ttMov.contaDebito.equals("") || ttMov.contaDebito.equals(ttMov.contaCredito)) {
                    String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                    valorFinal = valorFinal.replaceAll("\\.",",");
                    txtDePara.append(ttMov.dataMovimento).append(";");
                    txtDePara.append(valorFinal).append(";");
                    txtDePara.append(ttMov.nomeOrigem).append(";");
                    txtDePara.append(ttMov.nomePortador).append(";");
                    txtDePara.append(ttMov.contaDebito).append(";");
                    txtDePara.append(ttMov.contaCredito).append(";");
                    txtDePara.append(ttMov.documento).append(";");
                    txtDePara.append(ttMov.complemento01).append(";");
                    txtDePara.append(ttMov.complemento02).append(";");
                    txtDePara.append(ttMov.complemento03).append(";");
                    txtDePara.append(ttMov.complemento04).append(";");
                    txtDePara.append(ttMov.complemento05).append(";");
                    txtDePara.append(ttMov.centroCusto).append(";");
                    txtDePara.append(ttMov.nomeArquivo);
                    txtDePara.append(rn);
                }

            }


            ttLote ttLot = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot == null) {
                ttLot = new ttLote();
                ttLot.lote = ttMov.lote;
            }
            mapaLote.put(ttMov.lote,ttLot);

            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);
				
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
 
				}

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
                    records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

            if(tipoLancamento.contains("PAGAR")){
                if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT")) classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB")) classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    classDes = classificacao + ttMov.classificacao + "01";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "02";
                }
                if(classificacao.startsWith("D")){
                    if (ttMov.tipoMovimento.equals("CTBPORT")) classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    if (ttMov.tipoMovimento.equals("CTB")) classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "01";
                    classMul = classificacao + ttMov.classificacao + "01";
                }
            }
            if(tipoLancamento.contains("RECEBER")){
                if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT")) classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB")) classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    classDes = classificacao + ttMov.classificacao + "01";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "02";
                }
                if(classificacao.startsWith("C")){
                    if (ttMov.tipoMovimento.equals("CTBPORT")) classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    if (ttMov.tipoMovimento.equals("CTB")) classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "01";
                    classMul = classificacao + ttMov.classificacao + "01";
                }
            }


            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);
				
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
 
				}

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
                records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);
				
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
 
				}

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
                    records.put(rec3);
                }

                if (ttMov.valorJuros > 0) {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO", ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO", "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                    }
                    records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
                        records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0) {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO", ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                    }
                    records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0) {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO", ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO", "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                    }
                    records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
                        records.put(rec3);
                    }
                }
            }
        }

        if (apagaExtrato) {
            dbIOCont.delete("IO_EXTRATO")
            .where("CODEMPRESA=?")
            .param(codEmpresa)
            .execute();
        }
		// Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras 
		if (apagaContaT) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				
				if (tipoLancamento.contains("PAGAR")) {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
				else {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
			} catch (Exception e) {
				logger.logInfo("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
			}
		}

        // resumo comparativo com razao

        if (comparaRazao) {

            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
            FileWriter writerRazao = new FileWriter(filenameRazao);
            writerRazao.writeNewFile(ResumoTxt.toString());
        }


        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());


        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {

            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
            // =======================================================================================
            lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(lote)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", "");
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }

    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {
        if (dbIOCont != null) {
            dbIOCont.closeConnection();
        }
		if (dbIODepara != null) {
			dbIODepara.closeConnection();
		}
    }

    return records;
}

class ttLote {
    public String lote;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
    }
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttTransacao {
    public int transacao;
    public String bordero;
    public ttTransacao(){}
    public ttTransacao(ttTransacao tt){
        transacao=tt.transacao;
        bordero=tt.bordero;
    }
}



public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {

    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo));
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;

}










































































































































































































































































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2017-112055");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("fornecedor", "5");
    js.put("dataMovimento", "36");
    js.put("portador", "1");
    js.put("documentoNF", "1");
    js.put("valorDocumento", "-1");
    js.put("valorJuros", "29");
    js.put("valorDesconto", "31");
    js.put("valorMulta", "-1");
    js.put("valorPagamento", "34");
    js.put("complemento01", "13");
    js.put("complemento02", "-1");
    js.put("complemento03", "0");
    js.put("complemento04", "1");
    js.put("complemento05", "-1");
    js.put("complemento06", "-1");
    js.put("centroCusto", "-1");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "-1");

    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "2858");
    js.put("contaFixaJuros", "4701");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PAGAMENTOS CHEQUE");
    js.put("Planilhas_Padroes", "Extratos OFX;Extratos OFX");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroCAIXA_ACERTO1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0877472");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "4");
    js.put("dataMovimento", "0");
    js.put("portador", "2");
    js.put("documentoNF", "3");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "#NOMEDOARQUIVO");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CAIXA ACERTO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "NOME DO ARQUIVO");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroCAIXA_ACERTO2() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0875472");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q6R000009FVkiQAG");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "60.334.339/0001-56");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "4");
    js.put("dataMovimento", "1");
    js.put("portador", "");
    js.put("documentoNF", "3");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "2");
    js.put("complemento02", "4");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CAIXA ACERTO POLI.CSV");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroCONTABIL_FOLHA3() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2018-104362");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "COLUNA(70,99)");
    js.put("dataMovimento", "COLUNA(03,10)");
    js.put("portador", "");
    js.put("documentoNF", "");
    js.put("valorDocumento", "COLUNA(40,50)");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "COLUNA(52,56)");
    js.put("complemento02", "COLUNA(12,22)");
    js.put("complemento03", "COLUNA(24,34)");
    js.put("complemento04", "COLUNA(70,99)");
    js.put("complemento05", "");
    js.put("complemento06", "COLUNA(64,69)");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "FOLHA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".TXT - ARQUIVO TEXTO");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroCONTABIL_FOLHA4() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0875473");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q6R000009FVkiQAG");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "60.334.339/0001-56");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "COLUNA(70,99)");
    js.put("dataMovimento", "COLUNA(03,10)");
    js.put("portador", "");
    js.put("documentoNF", "");
    js.put("valorDocumento", "COLUNA(40,50)");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "COLUNA(52,56)");
    js.put("complemento02", "COLUNA(12,22)");
    js.put("complemento03", "COLUNA(24,34)");
    js.put("complemento04", "COLUNA(70,99)");
    js.put("complemento05", "");
    js.put("complemento06", "COLUNA(64,69)");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CONTABILIZACAO MATRIZ.TXT");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".TXT - ARQUIVO TEXTO");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroESCRITURACAO5() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0875474");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q6R000009FVkiQAG");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "60.334.339/0001-56");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "18");
    js.put("dataMovimento", "6");
    js.put("portador", "22");
    js.put("documentoNF", "11");
    js.put("valorDocumento", "12");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "22");
    js.put("complemento02", "13");
    js.put("complemento03", "7");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ESCRITURACAO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroESCRITURACAO6() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2020-017769");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "18");
    js.put("dataMovimento", "6");
    js.put("portador", "22");
    js.put("documentoNF", "11");
    js.put("valorDocumento", "12");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "22");
    js.put("complemento02", "13");
    js.put("complemento03", "7");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ESCRITURACAO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroMOV_EXPORTACAOENTRADA7() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0878212");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "RAZAO SOCIAL DO CNPJ CONTRATADO/VENDEDOR");
    js.put("dataMovimento", "DATA ENTRADA");
    js.put("portador", "DESCRICAO DA CLASSIFICACAO CONTABIL");
    js.put("documentoNF", "NUMERO DO DOCUMENTO");
    js.put("valorDocumento", "VALOR CONTABIL");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "COD. EMPRESA DO CONTRATANTE/COMPRADORA");
    js.put("complemento02", "COD. FISCAL");
    js.put("complemento03", "DESCRICAO DA CLASSIFICACAO FINANCEIRA");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "EXPORTACAO DA ENTRADA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "COD. EMPRESA DO CONTRATANTE/CO");
    js.put("Rotulo_Complemento_02", "COD. FISCAL");
    js.put("Rotulo_Complemento_03", "DESCRICAO DA CLASSIFICACAO FIN");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroMOV_MOTORISTASPROPRIOS8() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0878180");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "6");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "7");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "1");
    js.put("complemento02", "2");
    js.put("complemento03", "3");
    js.put("complemento04", "4");
    js.put("complemento05", "9");
    js.put("complemento06", "13");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "MOTORISTAS 439");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "MOTORISTA");
    js.put("Rotulo_Complemento_02", "FUNCAO");
    js.put("Rotulo_Complemento_03", "FILIAL");
    js.put("Rotulo_Complemento_04", "VIAGEM");
    js.put("Rotulo_Complemento_05", "CONTA CONTABIL");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroMOV_MOTORISTASTERCEIROS9() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0878199");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "9");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "1");
    js.put("complemento02", "0");
    js.put("complemento03", "3");
    js.put("complemento04", "4");
    js.put("complemento05", "");
    js.put("complemento06", "6");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "MOTORISTAS 440");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "MOTORISTA");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "FILIAL");
    js.put("Rotulo_Complemento_04", "CONTRATO");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroMOVIMENTOPAGGRUPOOPEL110() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-1237392");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q6R000008whiNQAQ");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "00.000.000/0000-00");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "10");
    js.put("dataMovimento", "#COLUNA A CONTEM(DATA :)COLUNA B");
    js.put("portador", "#COLUNA A CONTEM (CONTA N)");
    js.put("documentoNF", "7");
    js.put("valorDocumento", "19");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "14");
    js.put("complemento02", "");
    js.put("complemento03", "3");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "16");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "COMPLEMENTO01");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "RELATORIO PADRAO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroPAMCARD11() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2018-012495");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "4");
    js.put("dataMovimento", "0");
    js.put("portador", "2");
    js.put("documentoNF", "3");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "2");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PAMCARD");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroPEDAGIO12() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-1090419");
    js.put("idRoteiro", "a0A1C00000iW8HH");
    js.put("idEmpresa", "a0q1C000005Ej2KQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.423.462/0001-72");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "4");
    js.put("dataMovimento", "0");
    js.put("portador", "2");
    js.put("documentoNF", "3");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Polilogistica");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PEDAGIO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("CAIXA ACERTO")) achouTipo = true;
    if (achouTipo) return "CAIXA_ACERTO1";
    achouTipo = true;
    String [] campos2 = "EXTRATO;ANALITICO".split(";");
    for (int x=0;x<campos2.length;x++) {
        if (!line.contains(campos2[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "CAIXA_ACERTO2";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("CONTABILIZACAO")) achouTipo = true;
    if (achouTipo) return "CONTABIL_FOLHA3";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("CONTABILIZACAO")) achouTipo = true;
    if (achouTipo) return "CONTABIL_FOLHA4";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("ESCRITURACAO")) achouTipo = true;
    if (achouTipo) return "ESCRITURACAO5";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("ESCRITURACAO")) achouTipo = true;
    if (achouTipo) return "ESCRITURACAO6";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("EXPORTACAO DA ENTRADA")) achouTipo = true;
    if (achouTipo) return "MOV_EXPORTACAOENTRADA7";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("MOTORISTAS PROPRIOS")) achouTipo = true;
    if (achouTipo) return "MOV_MOTORISTASPROPRIOS8";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("MOTORISTAS TERCEIROS")) achouTipo = true;
    if (achouTipo) return "MOV_MOTORISTASTERCEIROS9";
    achouTipo = true;
    String [] campos10 = "RELATORIO EXTRATO BANCARIO;MNEMONICO".split(";");
    for (int x=0;x<campos10.length;x++) {
        if (!line.contains(campos10[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "MOVIMENTOPAGGRUPOOPEL110";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("PAMCARD")) achouTipo = true;
    if (achouTipo) return "PAMCARD11";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("PEDAGIO")) achouTipo = true;
    if (achouTipo) return "PEDAGIO12";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("ADI")) { //ROT-2017-112055
        conta = "6480";
        contaMovimento = "6480";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CT")) { //ROT-2017-112055
        conta = "1741";
        contaMovimento = "1741";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PGD")) { //ROT-2017-112055
        conta = "288";
        contaMovimento = "288";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TAR")) { //ROT-2017-112055
        conta = "4698";
        contaMovimento = "4698";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TRA")) { //ROT-2017-112055
        conta = "288";
        contaMovimento = "288";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS SERVICOS TOMADOS")) { //ROT-2017-112055
        conta = "1582";
        contaMovimento = "1582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS")) { //ROT-2017-112055
        conta = "861476";
        contaMovimento = "861476";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERENC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIQ")) { //ROT-2017-112055
        conta = "5006";
        contaMovimento = "5006";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS A RECOLHER")) { //ROT-2017-112055
        conta = "1541";
        contaMovimento = "1541";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) { //ROT-2017-112055
        conta = "313";
        contaMovimento = "313";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMEN")) { //ROT-2017-112055
        conta = "1637";
        contaMovimento = "1637";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("SALARIOS A PAGAR")) { //ROT-2017-112055
        conta = "1634";
        contaMovimento = "1634";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS A RECOLHER PRESTADOS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-112055
        conta = "1582";
        contaMovimento = "1582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("RESCISOES A PAGAR")) { //ROT-2017-112055
        conta = "4984";
        contaMovimento = "4984";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("AGUA - DMAE")) { //ROT-2017-112055
        conta = "4476";
        contaMovimento = "4476";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SERVICOS PRESTADOS")) { //ROT-2017-112055
        conta = "1546";
        contaMovimento = "1546";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS DE TRANSITO")) { //ROT-2017-112055
        conta = "50160";
        contaMovimento = "50160";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PIS A RECOLHER")) { //ROT-2017-112055
        conta = "1556";
        contaMovimento = "1556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("COFINS A RECOLHER")) { //ROT-2017-112055
        conta = "1552";
        contaMovimento = "1552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS")) { //ROT-2017-112055
        conta = "9184";
        contaMovimento = "9184";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO COFINS")) { //ROT-2017-112055
        conta = "5428";
        contaMovimento = "5428";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) { //ROT-2022-1237392
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACV")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACV")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("R")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASTERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA")) { //ROT-2017-112055
        conta = "4698";
        contaMovimento = "4698";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) { //ROT-2017-112055
        conta = "9376";
        contaMovimento = "9376";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDAGIO")) { //ROT-2017-112055
        conta = "50066";
        contaMovimento = "50066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) { //ROT-2017-112055
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) { //ROT-2017-112055
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (tipoPlanilha.contains("PEDAGIO") && documento.contains("TAR")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS")) { //ROT-2017-112055
        conta = "5192551";
        contaMovimento = "5192551";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "521438";
        contaMovimento = "521438";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALOISIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA")) { //ROT-2017-112055
        conta = "853620";
        contaMovimento = "853620";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMADOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARROYO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KIYOMURA")) { //ROT-2017-112055
        conta = "538315";
        contaMovimento = "538315";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARMELIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NONATO")) { //ROT-2017-112055
        conta = "5192552";
        contaMovimento = "5192552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "5192553";
        contaMovimento = "5192553";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARNALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARAUJO")) { //ROT-2017-112055
        conta = "857153";
        contaMovimento = "857153";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-112055
        conta = "842231";
        contaMovimento = "842231";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROCESSAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DADOS")) { //ROT-2017-112055
        conta = "500000";
        contaMovimento = "500000";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASGARD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVA")) { //ROT-2017-112055
        conta = "832145";
        contaMovimento = "832145";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "667654";
        contaMovimento = "667654";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECANICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RUBINHO")) { //ROT-2017-112055
        conta = "513076";
        contaMovimento = "513076";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL")) { //ROT-2017-112055
        conta = "511963";
        contaMovimento = "511963";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VITOR")) { //ROT-2017-112055
        conta = "608900";
        contaMovimento = "608900";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("B.S") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "858264";
        contaMovimento = "858264";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BABY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "761964";
        contaMovimento = "761964";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BELLA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "546783";
        contaMovimento = "546783";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOUTIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "857673";
        contaMovimento = "857673";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORRACHAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "504615";
        contaMovimento = "504615";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASILEIRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "500776";
        contaMovimento = "500776";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BUENO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VEICULOS")) { //ROT-2017-112055
        conta = "850902";
        contaMovimento = "850902";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CABEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUSUL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACABAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESPERANCA")) { //ROT-2017-112055
        conta = "855357";
        contaMovimento = "855357";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERV")) { //ROT-2017-112055
        conta = "851352";
        contaMovimento = "851352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA")) { //ROT-2017-112055
        conta = "546337";
        contaMovimento = "546337";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSMISSAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMINHOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOTORES")) { //ROT-2017-112055
        conta = "500547";
        contaMovimento = "500547";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANGUEIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "836602";
        contaMovimento = "836602";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINHA")) { //ROT-2017-112055
        conta = "842066";
        contaMovimento = "842066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASPPER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VAREJO")) { //ROT-2017-112055
        conta = "507360";
        contaMovimento = "507360";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENCOSUD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-112055
        conta = "5192554";
        contaMovimento = "5192554";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TINTAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) { //ROT-2017-112055
        conta = "508431";
        contaMovimento = "508431";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GESTAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO")) { //ROT-2017-112055
        conta = "501046";
        contaMovimento = "501046";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OESTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAIS")) { //ROT-2017-112055
        conta = "504371";
        contaMovimento = "504371";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECATRONICA")) { //ROT-2017-112055
        conta = "849192";
        contaMovimento = "849192";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAITON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "840121";
        contaMovimento = "840121";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICINA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURANCA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRABALHO")) { //ROT-2017-112055
        conta = "856836";
        contaMovimento = "856836";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRECIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVA")) { //ROT-2017-112055
        conta = "857716";
        contaMovimento = "857716";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CMI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICE")) { //ROT-2017-112055
        conta = "528397";
        contaMovimento = "528397";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JVD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURANCA")) { //ROT-2017-112055
        conta = "504409";
        contaMovimento = "504409";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONQUISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "661072";
        contaMovimento = "661072";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONQUIXTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECAPAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS")) { //ROT-2017-112055
        conta = "518095";
        contaMovimento = "518095";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIANO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDOSO")) { //ROT-2017-112055
        conta = "759287";
        contaMovimento = "759287";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES")) { //ROT-2017-112055
        conta = "530698";
        contaMovimento = "530698";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAKAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECATRONICOS")) { //ROT-2017-112055
        conta = "513041";
        contaMovimento = "513041";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAMIAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS")) { //ROT-2017-112055
        conta = "830854";
        contaMovimento = "830854";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAMIAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER")) { //ROT-2017-112055
        conta = "759582";
        contaMovimento = "759582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DATAPAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "606622";
        contaMovimento = "606622";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVINHO")) { //ROT-2017-112055
        conta = "857678";
        contaMovimento = "857678";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIEGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS")) { //ROT-2017-112055
        conta = "854736";
        contaMovimento = "854736";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRETAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "853493";
        contaMovimento = "853493";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "500491";
        contaMovimento = "500491";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEO")) { //ROT-2017-112055
        conta = "505605";
        contaMovimento = "505605";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAS")) { //ROT-2017-112055
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DRUGOVICH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "517663";
        contaMovimento = "517663";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E.J.") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KRIEGER")) { //ROT-2017-112055
        conta = "510730";
        contaMovimento = "510730";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDILEIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "5192555";
        contaMovimento = "5192555";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSA")) { //ROT-2017-112055
        conta = "752897";
        contaMovimento = "752897";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "501548";
        contaMovimento = "501548";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMECANICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WCS")) { //ROT-2017-112055
        conta = "633227";
        contaMovimento = "633227";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELEVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "858268";
        contaMovimento = "858268";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIAGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUSA")) { //ROT-2017-112055
        conta = "836062";
        contaMovimento = "836062";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELTON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUNES")) { //ROT-2017-112055
        conta = "5192556";
        contaMovimento = "5192556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELVIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES")) { //ROT-2017-112055
        conta = "512948";
        contaMovimento = "512948";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMANUELLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIALHO")) { //ROT-2017-112055
        conta = "5192557";
        contaMovimento = "5192557";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASILEIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEBIDAS")) { //ROT-2017-112055
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ERIK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANDRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUNES")) { //ROT-2017-112055
        conta = "831136";
        contaMovimento = "831136";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIONAL")) { //ROT-2017-112055
        conta = "506817";
        contaMovimento = "506817";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABRICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREGOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIANGULO")) { //ROT-2017-112055
        conta = "502988";
        contaMovimento = "502988";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACCHINI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "507013";
        contaMovimento = "507013";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEGRAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-112055
        conta = "518794";
        contaMovimento = "518794";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLADIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "518150";
        contaMovimento = "518150";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPLEMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODOVIARIO")) { //ROT-2017-112055
        conta = "716091";
        contaMovimento = "716091";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLANELIN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEXTIL")) { //ROT-2017-112055
        conta = "502861";
        contaMovimento = "502861";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORIVALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "501360";
        contaMovimento = "501360";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORTBRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOPECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S/A")) { //ROT-2017-112055
        conta = "832759";
        contaMovimento = "832759";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAVARES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "552039";
        contaMovimento = "552039";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETEBRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "840064";
        contaMovimento = "840064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUSION") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOFTWARE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "733112";
        contaMovimento = "733112";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPILHADEIRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "857675";
        contaMovimento = "857675";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GERTRAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "666815";
        contaMovimento = "666815";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAGA - ME")) { //ROT-2017-112055
        conta = "844509";
        contaMovimento = "844509";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIA")) { //ROT-2017-112055
        conta = "844510";
        contaMovimento = "844510";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILSIMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "719246";
        contaMovimento = "719246";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLINCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGINA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "855391";
        contaMovimento = "855391";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLOBAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUCAO")) { //ROT-2017-112055
        conta = "856453";
        contaMovimento = "856453";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAMENTAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "849743";
        contaMovimento = "849743";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAFICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONFIANCA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) { //ROT-2017-112055
        conta = "530810";
        contaMovimento = "530810";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HIDRAUTEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "618015";
        contaMovimento = "618015";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HW") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "513524";
        contaMovimento = "513524";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INOVAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "761651";
        contaMovimento = "761651";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSIGNIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GESTAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RISCOS")) { //ROT-2017-112055
        conta = "857684";
        contaMovimento = "857684";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERCAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SYSTEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "659212";
        contaMovimento = "659212";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEO")) { //ROT-2017-112055
        conta = "503777";
        contaMovimento = "503777";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRMAOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S/A")) { //ROT-2017-112055
        conta = "501266";
        contaMovimento = "501266";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAMBE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO")) { //ROT-2017-112055
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCAPAMENTOS")) { //ROT-2017-112055
        conta = "599152";
        contaMovimento = "599152";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECATRONICA")) { //ROT-2017-112055
        conta = "845026";
        contaMovimento = "845026";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) { //ROT-2017-112055
        conta = "856509";
        contaMovimento = "856509";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTOS")) { //ROT-2017-112055
        conta = "576890";
        contaMovimento = "576890";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSELIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUSA")) { //ROT-2017-112055
        conta = "515431";
        contaMovimento = "515431";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "860727";
        contaMovimento = "860727";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA")) { //ROT-2017-112055
        conta = "856514";
        contaMovimento = "856514";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASALLI")) { //ROT-2017-112055
        conta = "832121";
        contaMovimento = "832121";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAIZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUTIONS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SYSTEMS")) { //ROT-2017-112055
        conta = "845224";
        contaMovimento = "845224";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KELLY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELESTINO")) { //ROT-2017-112055
        conta = "503976";
        contaMovimento = "503976";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAJES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVINHO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERIAL")) { //ROT-2017-112055
        conta = "857679";
        contaMovimento = "857679";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LATINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "849190";
        contaMovimento = "849190";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAPIDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAVORIT")) { //ROT-2017-112055
        conta = "674005";
        contaMovimento = "674005";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEPOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUZIDOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "605997";
        contaMovimento = "605997";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLEY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS")) { //ROT-2017-112055
        conta = "844401";
        contaMovimento = "844401";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERGHER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIA")) { //ROT-2017-112055
        conta = "503073";
        contaMovimento = "503073";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) { //ROT-2017-112055
        conta = "733151";
        contaMovimento = "733151";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOJA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORRACHEIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST")) { //ROT-2017-112055
        conta = "500651";
        contaMovimento = "500651";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VINICIUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "856832";
        contaMovimento = "856832";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUKSCHAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "850066";
        contaMovimento = "850066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUMEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "525011";
        contaMovimento = "525011";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOPECAS")) { //ROT-2017-112055
        conta = "524054";
        contaMovimento = "524054";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "562917";
        contaMovimento = "562917";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PART") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACESSORIOS")) { //ROT-2017-112055
        conta = "853455";
        contaMovimento = "853455";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M&A") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA")) { //ROT-2017-112055
        conta = "733110";
        contaMovimento = "733110";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGICPRINT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAFICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "854518";
        contaMovimento = "854518";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGNA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BARBOSA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIOS")) { //ROT-2017-112055
        conta = "5192558";
        contaMovimento = "5192558";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) { //ROT-2017-112055
        conta = "760649";
        contaMovimento = "760649";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARLUCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA")) { //ROT-2017-112055
        conta = "530600";
        contaMovimento = "530600";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-112055
        conta = "503047";
        contaMovimento = "503047";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADARIA")) { //ROT-2017-112055
        conta = "842378";
        contaMovimento = "842378";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATABEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRAGAS")) { //ROT-2017-112055
        conta = "590819";
        contaMovimento = "590819";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAURICIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDES")) { //ROT-2017-112055
        conta = "844402";
        contaMovimento = "844402";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAXILABOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIAGNOSTICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "5192559";
        contaMovimento = "5192559";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEGATECNOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPLEMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODOVIARIOS")) { //ROT-2017-112055
        conta = "548549";
        contaMovimento = "548549";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTIN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS")) { //ROT-2017-112055
        conta = "548633";
        contaMovimento = "548633";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONTEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONTAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAIS")) { //ROT-2017-112055
        conta = "520140";
        contaMovimento = "520140";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MTN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRETAS")) { //ROT-2017-112055
        conta = "509083";
        contaMovimento = "509083";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ND") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) { //ROT-2017-112055
        conta = "860730";
        contaMovimento = "860730";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NELIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARQUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS")) { //ROT-2017-112055
        conta = "612640";
        contaMovimento = "612640";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEW") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LG")) { //ROT-2017-112055
        conta = "855929";
        contaMovimento = "855929";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERMEDICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDISANITAS")) { //ROT-2017-112055
        conta = "709841";
        contaMovimento = "709841";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERMEDICA")) { //ROT-2017-112055
        conta = "667665";
        contaMovimento = "667665";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ODELMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDEIROS")) { //ROT-2017-112055
        conta = "758070";
        contaMovimento = "758070";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISTEMAS")) { //ROT-2017-112055
        conta = "547796";
        contaMovimento = "547796";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPUTADORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "530853";
        contaMovimento = "530853";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACAEMBU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOPECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "500488";
        contaMovimento = "500488";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIRCEU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEDASSARI")) { //ROT-2017-112055
        conta = "530749";
        contaMovimento = "530749";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEUM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUZIDI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-112055
        conta = "502876";
        contaMovimento = "502876";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBREAGENS")) { //ROT-2017-112055
        conta = "846511";
        contaMovimento = "846511";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRESIDENTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "521952";
        contaMovimento = "521952";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RACINI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUITES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL")) { //ROT-2017-112055
        conta = "857168";
        contaMovimento = "857168";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) { //ROT-2017-112055
        conta = "548338";
        contaMovimento = "548338";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIONAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOLAS")) { //ROT-2017-112055
        conta = "509014";
        contaMovimento = "509014";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESTAURANTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORGES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PANTOJA")) { //ROT-2017-112055
        conta = "855369";
        contaMovimento = "855369";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RETIFICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CABECOTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIP")) { //ROT-2017-112055
        conta = "843154";
        contaMovimento = "843154";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICARDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GARCIA")) { //ROT-2017-112055
        conta = "530528";
        contaMovimento = "530528";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DERIVADOS")) { //ROT-2017-112055
        conta = "504363";
        contaMovimento = "504363";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODESIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUZA")) { //ROT-2017-112055
        conta = "856830";
        contaMovimento = "856830";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "500473";
        contaMovimento = "500473";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANE")) { //ROT-2017-112055
        conta = "5192560";
        contaMovimento = "5192560";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROMULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECORA")) { //ROT-2017-112055
        conta = "515417";
        contaMovimento = "515417";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FARIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUZA")) { //ROT-2017-112055
        conta = "5192561";
        contaMovimento = "5192561";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIFORMES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "541291";
        contaMovimento = "541291";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTAR")) { //ROT-2017-112055
        conta = "520426";
        contaMovimento = "520426";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS")) { //ROT-2017-112055
        conta = "839310";
        contaMovimento = "839310";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SHOPPING") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "5192562";
        contaMovimento = "5192562";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA")) { //ROT-2017-112055
        conta = "500492";
        contaMovimento = "500492";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "507047";
        contaMovimento = "507047";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPAROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-112055
        conta = "860993";
        contaMovimento = "860993";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STOQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "503039";
        contaMovimento = "503039";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELEFONICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S/A")) { //ROT-2017-112055
        conta = "501462";
        contaMovimento = "501462";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECANICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL")) { //ROT-2017-112055
        conta = "733463";
        contaMovimento = "733463";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUCOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAS")) { //ROT-2017-112055
        conta = "509907";
        contaMovimento = "509907";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TORNEADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIANGULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECANICA")) { //ROT-2017-112055
        conta = "515420";
        contaMovimento = "515420";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TORNEARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE")) { //ROT-2017-112055
        conta = "515442";
        contaMovimento = "515442";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTVS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOFTWARE")) { //ROT-2017-112055
        conta = "758484";
        contaMovimento = "758484";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL")) { //ROT-2017-112055
        conta = "533773";
        contaMovimento = "533773";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIANGULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROFILTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "500489";
        contaMovimento = "500489";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIPLICAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VEICULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "861464";
        contaMovimento = "861464";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIVALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "500957";
        contaMovimento = "500957";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RASTREAD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMUNICACOES")) { //ROT-2017-112055
        conta = "860862";
        contaMovimento = "860862";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA")) { //ROT-2017-112055
        conta = "830862";
        contaMovimento = "830862";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTROL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "521996";
        contaMovimento = "521996";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UDIVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "513349";
        contaMovimento = "513349";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALGROUP")) { //ROT-2017-112055
        conta = "500008";
        contaMovimento = "500008";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIBRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA")) { //ROT-2017-112055
        conta = "500342";
        contaMovimento = "500342";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WAYLOG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECH")) { //ROT-2017-112055
        conta = "845180";
        contaMovimento = "845180";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XP8") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISTEMAS")) { //ROT-2017-112055
        conta = "758861";
        contaMovimento = "758861";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100007")) { //ROT-2017-112055
        conta = "50090";
        contaMovimento = "50090";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200700006")) { //ROT-2017-112055
        conta = "4478";
        contaMovimento = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100400006")) { //ROT-2017-112055
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100400008")) { //ROT-2017-112055
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("11200200001")) { //ROT-2017-112055
        conta = "312";
        contaMovimento = "312";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100400009")) { //ROT-2017-112055
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500001")) { //ROT-2017-112055
        conta = "1684";
        contaMovimento = "1684";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500002")) { //ROT-2017-112055
        conta = "1685";
        contaMovimento = "1685";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500003")) { //ROT-2017-112055
        conta = "1686";
        contaMovimento = "1686";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500004")) { //ROT-2017-112055
        conta = "1688";
        contaMovimento = "1688";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500005")) { //ROT-2017-112055
        conta = "1689";
        contaMovimento = "1689";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500006")) { //ROT-2017-112055
        conta = "1690";
        contaMovimento = "1690";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41100700002")) { //ROT-2017-112055
        conta = "316";
        contaMovimento = "316";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100001")) { //ROT-2017-112055
        conta = "50087";
        contaMovimento = "50087";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100006")) { //ROT-2017-112055
        conta = "50089";
        contaMovimento = "50089";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100011")) { //ROT-2017-112055
        conta = "50091";
        contaMovimento = "50091";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100012")) { //ROT-2017-112055
        conta = "50092";
        contaMovimento = "50092";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100013")) { //ROT-2017-112055
        conta = "50093";
        contaMovimento = "50093";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100015")) { //ROT-2017-112055
        conta = "50094";
        contaMovimento = "50094";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("21100400001")) { //ROT-2017-112055
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100024")) { //ROT-2017-112055
        conta = "50100";
        contaMovimento = "50100";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100040")) { //ROT-2017-112055
        conta = "50111";
        contaMovimento = "50111";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100041")) { //ROT-2017-112055
        conta = "50112";
        contaMovimento = "50112";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100043")) { //ROT-2017-112055
        conta = "50113";
        contaMovimento = "50113";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100047")) { //ROT-2017-112055
        conta = "50114";
        contaMovimento = "50114";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100048")) { //ROT-2017-112055
        conta = "50115";
        contaMovimento = "50115";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100049")) { //ROT-2017-112055
        conta = "50116";
        contaMovimento = "50116";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100050")) { //ROT-2017-112055
        conta = "50117";
        contaMovimento = "50117";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100051")) { //ROT-2017-112055
        conta = "50118";
        contaMovimento = "50118";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100052")) { //ROT-2017-112055
        conta = "50119";
        contaMovimento = "50119";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100001")) { //ROT-2017-112055
        conta = "4328";
        contaMovimento = "4328";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100002")) { //ROT-2017-112055
        conta = "4329";
        contaMovimento = "4329";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100006")) { //ROT-2017-112055
        conta = "9686";
        contaMovimento = "9686";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100012")) { //ROT-2017-112055
        conta = "50122";
        contaMovimento = "50122";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100040")) { //ROT-2017-112055
        conta = "50111";
        contaMovimento = "50111";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100012")) { //ROT-2017-112055
        conta = "50122";
        contaMovimento = "50122";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100013")) { //ROT-2017-112055
        conta = "50123";
        contaMovimento = "50123";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100015")) { //ROT-2017-112055
        conta = "50124";
        contaMovimento = "50124";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100022")) { //ROT-2017-112055
        conta = "4636";
        contaMovimento = "4636";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100024")) { //ROT-2017-112055
        conta = "4331";
        contaMovimento = "4331";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100040")) { //ROT-2017-112055
        conta = "4335";
        contaMovimento = "4335";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100041")) { //ROT-2017-112055
        conta = "50140";
        contaMovimento = "50140";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100043")) { //ROT-2017-112055
        conta = "50141";
        contaMovimento = "50141";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100047")) { //ROT-2017-112055
        conta = "50144";
        contaMovimento = "50144";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100048")) { //ROT-2017-112055
        conta = "50148";
        contaMovimento = "50148";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100049")) { //ROT-2017-112055
        conta = "50149";
        contaMovimento = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100050")) { //ROT-2017-112055
        conta = "50147";
        contaMovimento = "50147";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100051")) { //ROT-2017-112055
        conta = "50149";
        contaMovimento = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("41200100052")) { //ROT-2017-112055
        conta = "50149";
        contaMovimento = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("ADI")) { //ROT-2017-112055
        conta = "6480";
        contaMovimento = "6480";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CT")) { //ROT-2017-112055
        conta = "1741";
        contaMovimento = "1741";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PGD")) { //ROT-2017-112055
        conta = "288";
        contaMovimento = "288";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TAR")) { //ROT-2017-112055
        conta = "4698";
        contaMovimento = "4698";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TRA")) { //ROT-2017-112055
        conta = "288";
        contaMovimento = "288";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS SERVICOS TOMADOS")) { //ROT-2017-112055
        conta = "1582";
        contaMovimento = "1582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS")) { //ROT-2017-112055
        conta = "861476";
        contaMovimento = "861476";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERENC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIQ")) { //ROT-2017-112055
        conta = "5006";
        contaMovimento = "5006";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS A RECOLHER")) { //ROT-2017-112055
        conta = "1541";
        contaMovimento = "1541";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) { //ROT-2017-112055
        conta = "313";
        contaMovimento = "313";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMEN")) { //ROT-2017-112055
        conta = "1637";
        contaMovimento = "1637";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("SALARIOS A PAGAR")) { //ROT-2017-112055
        conta = "1634";
        contaMovimento = "1634";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS A RECOLHER PRESTADOS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-112055
        conta = "1582";
        contaMovimento = "1582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("RESCISOES A PAGAR")) { //ROT-2017-112055
        conta = "4984";
        contaMovimento = "4984";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("AGUA - DMAE")) { //ROT-2017-112055
        conta = "4476";
        contaMovimento = "4476";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SERVICOS PRESTADOS")) { //ROT-2017-112055
        conta = "1546";
        contaMovimento = "1546";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS DE TRANSITO")) { //ROT-2017-112055
        conta = "50160";
        contaMovimento = "50160";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PIS A RECOLHER")) { //ROT-2017-112055
        conta = "1556";
        contaMovimento = "1556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("COFINS A RECOLHER")) { //ROT-2017-112055
        conta = "1552";
        contaMovimento = "1552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS")) { //ROT-2017-112055
        conta = "9184";
        contaMovimento = "9184";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO COFINS")) { //ROT-2017-112055
        conta = "5428";
        contaMovimento = "5428";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) { //ROT-2022-1237392
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACV")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACV")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("R")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASTERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA")) { //ROT-2017-112055
        conta = "4698";
        contaMovimento = "4698";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) { //ROT-2017-112055
        conta = "9376";
        contaMovimento = "9376";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDAGIO")) { //ROT-2017-112055
        conta = "50066";
        contaMovimento = "50066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) { //ROT-2017-112055
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) { //ROT-2017-112055
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("BANCO BRASIL")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORRETA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSP")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ESCRITURACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EM BRANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("2916")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS")) { //ROT-2017-112055
        conta = "5192551";
        contaMovimento = "5192551";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "521438";
        contaMovimento = "521438";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALOISIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA")) { //ROT-2017-112055
        conta = "853620";
        contaMovimento = "853620";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMADOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARROYO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KIYOMURA")) { //ROT-2017-112055
        conta = "538315";
        contaMovimento = "538315";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARMELIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NONATO")) { //ROT-2017-112055
        conta = "5192552";
        contaMovimento = "5192552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "5192553";
        contaMovimento = "5192553";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARNALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARAUJO")) { //ROT-2017-112055
        conta = "857153";
        contaMovimento = "857153";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-112055
        conta = "842231";
        contaMovimento = "842231";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROCESSAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DADOS")) { //ROT-2017-112055
        conta = "500000";
        contaMovimento = "500000";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASGARD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVA")) { //ROT-2017-112055
        conta = "832145";
        contaMovimento = "832145";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "667654";
        contaMovimento = "667654";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECANICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RUBINHO")) { //ROT-2017-112055
        conta = "513076";
        contaMovimento = "513076";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL")) { //ROT-2017-112055
        conta = "511963";
        contaMovimento = "511963";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VITOR")) { //ROT-2017-112055
        conta = "608900";
        contaMovimento = "608900";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("B.S") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "858264";
        contaMovimento = "858264";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BABY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "761964";
        contaMovimento = "761964";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BELLA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "546783";
        contaMovimento = "546783";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOUTIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "857673";
        contaMovimento = "857673";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORRACHAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "504615";
        contaMovimento = "504615";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASILEIRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "500776";
        contaMovimento = "500776";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BUENO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VEICULOS")) { //ROT-2017-112055
        conta = "850902";
        contaMovimento = "850902";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CABEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUSUL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACABAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESPERANCA")) { //ROT-2017-112055
        conta = "855357";
        contaMovimento = "855357";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERV")) { //ROT-2017-112055
        conta = "851352";
        contaMovimento = "851352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA")) { //ROT-2017-112055
        conta = "546337";
        contaMovimento = "546337";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSMISSAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMINHOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOTORES")) { //ROT-2017-112055
        conta = "500547";
        contaMovimento = "500547";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANGUEIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "836602";
        contaMovimento = "836602";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASAVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINHA")) { //ROT-2017-112055
        conta = "842066";
        contaMovimento = "842066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASPPER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VAREJO")) { //ROT-2017-112055
        conta = "507360";
        contaMovimento = "507360";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENCOSUD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-112055
        conta = "5192554";
        contaMovimento = "5192554";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TINTAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) { //ROT-2017-112055
        conta = "508431";
        contaMovimento = "508431";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GESTAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO")) { //ROT-2017-112055
        conta = "501046";
        contaMovimento = "501046";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OESTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAIS")) { //ROT-2017-112055
        conta = "504371";
        contaMovimento = "504371";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECATRONICA")) { //ROT-2017-112055
        conta = "849192";
        contaMovimento = "849192";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAITON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "840121";
        contaMovimento = "840121";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICINA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURANCA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRABALHO")) { //ROT-2017-112055
        conta = "856836";
        contaMovimento = "856836";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRECIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVA")) { //ROT-2017-112055
        conta = "857716";
        contaMovimento = "857716";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CMI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICE")) { //ROT-2017-112055
        conta = "528397";
        contaMovimento = "528397";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JVD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURANCA")) { //ROT-2017-112055
        conta = "504409";
        contaMovimento = "504409";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONQUISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "661072";
        contaMovimento = "661072";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONQUIXTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECAPAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS")) { //ROT-2017-112055
        conta = "518095";
        contaMovimento = "518095";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIANO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDOSO")) { //ROT-2017-112055
        conta = "759287";
        contaMovimento = "759287";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES")) { //ROT-2017-112055
        conta = "530698";
        contaMovimento = "530698";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAKAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECATRONICOS")) { //ROT-2017-112055
        conta = "513041";
        contaMovimento = "513041";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAMIAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS")) { //ROT-2017-112055
        conta = "830854";
        contaMovimento = "830854";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAMIAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER")) { //ROT-2017-112055
        conta = "759582";
        contaMovimento = "759582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DATAPAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "606622";
        contaMovimento = "606622";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVINHO")) { //ROT-2017-112055
        conta = "857678";
        contaMovimento = "857678";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIEGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS")) { //ROT-2017-112055
        conta = "854736";
        contaMovimento = "854736";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRETAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "853493";
        contaMovimento = "853493";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "500491";
        contaMovimento = "500491";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEO")) { //ROT-2017-112055
        conta = "505605";
        contaMovimento = "505605";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAS")) { //ROT-2017-112055
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DRUGOVICH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "517663";
        contaMovimento = "517663";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E.J.") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KRIEGER")) { //ROT-2017-112055
        conta = "510730";
        contaMovimento = "510730";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDILEIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "5192555";
        contaMovimento = "5192555";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSA")) { //ROT-2017-112055
        conta = "752897";
        contaMovimento = "752897";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "501548";
        contaMovimento = "501548";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMECANICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WCS")) { //ROT-2017-112055
        conta = "633227";
        contaMovimento = "633227";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELEVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "858268";
        contaMovimento = "858268";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIAGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUSA")) { //ROT-2017-112055
        conta = "836062";
        contaMovimento = "836062";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELTON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUNES")) { //ROT-2017-112055
        conta = "5192556";
        contaMovimento = "5192556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELVIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES")) { //ROT-2017-112055
        conta = "512948";
        contaMovimento = "512948";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMANUELLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIALHO")) { //ROT-2017-112055
        conta = "5192557";
        contaMovimento = "5192557";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASILEIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEBIDAS")) { //ROT-2017-112055
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ERIK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANDRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUNES")) { //ROT-2017-112055
        conta = "831136";
        contaMovimento = "831136";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIONAL")) { //ROT-2017-112055
        conta = "506817";
        contaMovimento = "506817";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABRICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREGOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIANGULO")) { //ROT-2017-112055
        conta = "502988";
        contaMovimento = "502988";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACCHINI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S.A")) { //ROT-2017-112055
        conta = "507013";
        contaMovimento = "507013";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEGRAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-112055
        conta = "518794";
        contaMovimento = "518794";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLADIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "518150";
        contaMovimento = "518150";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPLEMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODOVIARIO")) { //ROT-2017-112055
        conta = "716091";
        contaMovimento = "716091";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLANELIN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEXTIL")) { //ROT-2017-112055
        conta = "502861";
        contaMovimento = "502861";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORIVALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "501360";
        contaMovimento = "501360";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORTBRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOPECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S/A")) { //ROT-2017-112055
        conta = "832759";
        contaMovimento = "832759";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAVARES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "552039";
        contaMovimento = "552039";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETEBRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "840064";
        contaMovimento = "840064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUSION") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOFTWARE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "733112";
        contaMovimento = "733112";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPILHADEIRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "857675";
        contaMovimento = "857675";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GERTRAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "666815";
        contaMovimento = "666815";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAGA - ME")) { //ROT-2017-112055
        conta = "844509";
        contaMovimento = "844509";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIA")) { //ROT-2017-112055
        conta = "844510";
        contaMovimento = "844510";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILSIMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "719246";
        contaMovimento = "719246";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLINCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGINA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "855391";
        contaMovimento = "855391";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLOBAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUCAO")) { //ROT-2017-112055
        conta = "856453";
        contaMovimento = "856453";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAMENTAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "849743";
        contaMovimento = "849743";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAFICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONFIANCA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) { //ROT-2017-112055
        conta = "530810";
        contaMovimento = "530810";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HIDRAUTEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "618015";
        contaMovimento = "618015";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HW") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "513524";
        contaMovimento = "513524";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INOVAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "761651";
        contaMovimento = "761651";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSIGNIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GESTAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RISCOS")) { //ROT-2017-112055
        conta = "857684";
        contaMovimento = "857684";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERCAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SYSTEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "659212";
        contaMovimento = "659212";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEO")) { //ROT-2017-112055
        conta = "503777";
        contaMovimento = "503777";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRMAOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S/A")) { //ROT-2017-112055
        conta = "501266";
        contaMovimento = "501266";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAMBE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO")) { //ROT-2017-112055
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCAPAMENTOS")) { //ROT-2017-112055
        conta = "599152";
        contaMovimento = "599152";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECATRONICA")) { //ROT-2017-112055
        conta = "845026";
        contaMovimento = "845026";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) { //ROT-2017-112055
        conta = "856509";
        contaMovimento = "856509";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTOS")) { //ROT-2017-112055
        conta = "576890";
        contaMovimento = "576890";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSELIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUSA")) { //ROT-2017-112055
        conta = "515431";
        contaMovimento = "515431";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "860727";
        contaMovimento = "860727";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA")) { //ROT-2017-112055
        conta = "856514";
        contaMovimento = "856514";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASALLI")) { //ROT-2017-112055
        conta = "832121";
        contaMovimento = "832121";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAIZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUTIONS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SYSTEMS")) { //ROT-2017-112055
        conta = "845224";
        contaMovimento = "845224";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KELLY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELESTINO")) { //ROT-2017-112055
        conta = "503976";
        contaMovimento = "503976";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAJES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVINHO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERIAL")) { //ROT-2017-112055
        conta = "857679";
        contaMovimento = "857679";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LATINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "849190";
        contaMovimento = "849190";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAPIDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAVORIT")) { //ROT-2017-112055
        conta = "674005";
        contaMovimento = "674005";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEPOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUZIDOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "605997";
        contaMovimento = "605997";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLEY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS")) { //ROT-2017-112055
        conta = "844401";
        contaMovimento = "844401";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERGHER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIA")) { //ROT-2017-112055
        conta = "503073";
        contaMovimento = "503073";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) { //ROT-2017-112055
        conta = "733151";
        contaMovimento = "733151";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOJA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORRACHEIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST")) { //ROT-2017-112055
        conta = "500651";
        contaMovimento = "500651";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VINICIUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-112055
        conta = "856832";
        contaMovimento = "856832";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUKSCHAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "850066";
        contaMovimento = "850066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUMEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "525011";
        contaMovimento = "525011";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOPECAS")) { //ROT-2017-112055
        conta = "524054";
        contaMovimento = "524054";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "562917";
        contaMovimento = "562917";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PART") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACESSORIOS")) { //ROT-2017-112055
        conta = "853455";
        contaMovimento = "853455";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M&A") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA")) { //ROT-2017-112055
        conta = "733110";
        contaMovimento = "733110";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGICPRINT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAFICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "854518";
        contaMovimento = "854518";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGNA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BARBOSA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIOS")) { //ROT-2017-112055
        conta = "5192558";
        contaMovimento = "5192558";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) { //ROT-2017-112055
        conta = "760649";
        contaMovimento = "760649";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARLUCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA")) { //ROT-2017-112055
        conta = "530600";
        contaMovimento = "530600";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-112055
        conta = "503047";
        contaMovimento = "503047";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADARIA")) { //ROT-2017-112055
        conta = "842378";
        contaMovimento = "842378";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATABEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRAGAS")) { //ROT-2017-112055
        conta = "590819";
        contaMovimento = "590819";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAURICIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDES")) { //ROT-2017-112055
        conta = "844402";
        contaMovimento = "844402";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAXILABOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIAGNOSTICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "5192559";
        contaMovimento = "5192559";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEGATECNOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPLEMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODOVIARIOS")) { //ROT-2017-112055
        conta = "548549";
        contaMovimento = "548549";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTIN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS")) { //ROT-2017-112055
        conta = "548633";
        contaMovimento = "548633";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONTEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONTAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIAIS")) { //ROT-2017-112055
        conta = "520140";
        contaMovimento = "520140";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MTN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARRETAS")) { //ROT-2017-112055
        conta = "509083";
        contaMovimento = "509083";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ND") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) { //ROT-2017-112055
        conta = "860730";
        contaMovimento = "860730";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NELIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARQUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS")) { //ROT-2017-112055
        conta = "612640";
        contaMovimento = "612640";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEW") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LG")) { //ROT-2017-112055
        conta = "855929";
        contaMovimento = "855929";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERMEDICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDISANITAS")) { //ROT-2017-112055
        conta = "709841";
        contaMovimento = "709841";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERMEDICA")) { //ROT-2017-112055
        conta = "667665";
        contaMovimento = "667665";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ODELMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDEIROS")) { //ROT-2017-112055
        conta = "758070";
        contaMovimento = "758070";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISTEMAS")) { //ROT-2017-112055
        conta = "547796";
        contaMovimento = "547796";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPUTADORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "530853";
        contaMovimento = "530853";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACAEMBU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOPECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "500488";
        contaMovimento = "500488";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIRCEU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEDASSARI")) { //ROT-2017-112055
        conta = "530749";
        contaMovimento = "530749";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEUM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUZIDI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-112055
        conta = "502876";
        contaMovimento = "502876";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBREAGENS")) { //ROT-2017-112055
        conta = "846511";
        contaMovimento = "846511";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRESIDENTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "521952";
        contaMovimento = "521952";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RACINI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUITES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL")) { //ROT-2017-112055
        conta = "857168";
        contaMovimento = "857168";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) { //ROT-2017-112055
        conta = "548338";
        contaMovimento = "548338";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIONAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOLAS")) { //ROT-2017-112055
        conta = "509014";
        contaMovimento = "509014";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESTAURANTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORGES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PANTOJA")) { //ROT-2017-112055
        conta = "855369";
        contaMovimento = "855369";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RETIFICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CABECOTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIP")) { //ROT-2017-112055
        conta = "843154";
        contaMovimento = "843154";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICARDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GARCIA")) { //ROT-2017-112055
        conta = "530528";
        contaMovimento = "530528";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DERIVADOS")) { //ROT-2017-112055
        conta = "504363";
        contaMovimento = "504363";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODESIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUZA")) { //ROT-2017-112055
        conta = "856830";
        contaMovimento = "856830";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS")) { //ROT-2017-112055
        conta = "500473";
        contaMovimento = "500473";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANE")) { //ROT-2017-112055
        conta = "5192560";
        contaMovimento = "5192560";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROMULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECORA")) { //ROT-2017-112055
        conta = "515417";
        contaMovimento = "515417";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FARIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOUZA")) { //ROT-2017-112055
        conta = "5192561";
        contaMovimento = "5192561";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIFORMES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "541291";
        contaMovimento = "541291";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTAR")) { //ROT-2017-112055
        conta = "520426";
        contaMovimento = "520426";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS")) { //ROT-2017-112055
        conta = "839310";
        contaMovimento = "839310";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SHOPPING") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "5192562";
        contaMovimento = "5192562";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA")) { //ROT-2017-112055
        conta = "500492";
        contaMovimento = "500492";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "507047";
        contaMovimento = "507047";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPAROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-112055
        conta = "860993";
        contaMovimento = "860993";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STOQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "503039";
        contaMovimento = "503039";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELEFONICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S/A")) { //ROT-2017-112055
        conta = "501462";
        contaMovimento = "501462";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECANICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL")) { //ROT-2017-112055
        conta = "733463";
        contaMovimento = "733463";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUCOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAS")) { //ROT-2017-112055
        conta = "509907";
        contaMovimento = "509907";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TORNEADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIANGULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MECANICA")) { //ROT-2017-112055
        conta = "515420";
        contaMovimento = "515420";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TORNEARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE")) { //ROT-2017-112055
        conta = "515442";
        contaMovimento = "515442";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTVS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOFTWARE")) { //ROT-2017-112055
        conta = "758484";
        contaMovimento = "758484";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL")) { //ROT-2017-112055
        conta = "533773";
        contaMovimento = "533773";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIANGULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROFILTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "500489";
        contaMovimento = "500489";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIPLICAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VEICULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EIRELI")) { //ROT-2017-112055
        conta = "861464";
        contaMovimento = "861464";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIVALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "500957";
        contaMovimento = "500957";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RASTREAD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMUNICACOES")) { //ROT-2017-112055
        conta = "860862";
        contaMovimento = "860862";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA")) { //ROT-2017-112055
        conta = "830862";
        contaMovimento = "830862";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRUCKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTROL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) { //ROT-2017-112055
        conta = "521996";
        contaMovimento = "521996";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UDIVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-112055
        conta = "513349";
        contaMovimento = "513349";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALGROUP")) { //ROT-2017-112055
        conta = "500008";
        contaMovimento = "500008";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIBRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA")) { //ROT-2017-112055
        conta = "500342";
        contaMovimento = "500342";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WAYLOG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECH")) { //ROT-2017-112055
        conta = "845180";
        contaMovimento = "845180";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XP8") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISTEMAS")) { //ROT-2017-112055
        conta = "758861";
        contaMovimento = "758861";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA")) { //ROT-2017-112055
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("ADI")) {
        conta = "Quando Tipo Planilha contem 'PAMCARD', Complemento (06) contem 'ADI', CONTA MOVIMENTO SERA = '6480'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CT")) {
        conta = "Quando Tipo Planilha contem 'PAMCARD', Complemento (06) contem 'CT', CONTA MOVIMENTO SERA = '1741'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PGD")) {
        conta = "Quando Tipo Planilha contem 'PAMCARD', Complemento (06) contem 'PGD', CONTA MOVIMENTO SERA = '288'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TAR")) {
        conta = "Quando Tipo Planilha contem 'PAMCARD', Complemento (06) contem 'TAR', CONTA MOVIMENTO SERA = '4698'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TRA")) {
        conta = "Quando Tipo Planilha contem 'PAMCARD', Complemento (06) contem 'TRA', CONTA MOVIMENTO SERA = '288'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS SERVICOS TOMADOS")) {
        conta = "Quando Complemento (01) contem 'ISS SERVICOS TOMADOS', CONTA MOVIMENTO SERA = '1582'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'ICMS', CONTA MOVIMENTO SERA = '861476'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERENC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIQ")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ICMS', Complemento (01) contem 'FERENC', Complemento (01) contem 'ALIQ', CONTA MOVIMENTO SERA = '5006'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS A RECOLHER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'ICMS A RECOLHER', CONTA MOVIMENTO SERA = '1541'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ADIANT', Complemento (01) contem 'FERIAS', CONTA MOVIMENTO SERA = '313'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMEN")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PENSAO', Complemento (01) contem 'ALIMEN', CONTA MOVIMENTO SERA = '1637'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("SALARIOS A PAGAR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'SALARIOS A PAGAR', CONTA MOVIMENTO SERA = '1634'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS A RECOLHER PRESTADOS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (01) contem 'ISS A RECOLHER PRESTADOS', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '1582'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("RESCISOES A PAGAR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'RESCISOES A PAGAR', CONTA MOVIMENTO SERA = '4984'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("AGUA - DMAE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'AGUA - DMAE', CONTA MOVIMENTO SERA = '4476'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SERVICOS PRESTADOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'IRRF SERVICOS PRESTADOS', CONTA MOVIMENTO SERA = '1546'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS DE TRANSITO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'MULTAS DE TRANSITO', CONTA MOVIMENTO SERA = '50160'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PIS A RECOLHER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'PIS A RECOLHER', CONTA MOVIMENTO SERA = '1556'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("COFINS A RECOLHER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'COFINS A RECOLHER', CONTA MOVIMENTO SERA = '1552'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'PARCELAMENTO PIS', CONTA MOVIMENTO SERA = '9184'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO COFINS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'PARCELAMENTO COFINS', CONTA MOVIMENTO SERA = '5428'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTOPAGGRUPOOPEL1', Complemento (06) contem 'TOTAL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACV")) {
        conta = "Quando Tipo Planilha contem 'CAIXA_ACERTO', Complemento (04) contem 'BE', Portador contem 'ACV', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACV")) {
        conta = "Quando Tipo Planilha contem 'CAIXA_ACERTO', Complemento (04) contem 'MATRIZ', Portador contem 'ACV', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("R")) {
        conta = "Quando Tipo Planilha contem 'MOV_MOTORISTASPROPRIOS', Complemento (06) contem 'R', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'MOV_MOTORISTASPROPRIOS', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASTERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("")) {
        conta = "Quando Tipo Planilha contem 'MOV_MOTORISTASTERCEIROS', Complemento (02) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'PEDAGIO', Fornecedor/Cliente contem 'TARIFA', CONTA MOVIMENTO SERA = '4698'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) {
        conta = "Quando Tipo Planilha contem 'PEDAGIO', Fornecedor/Cliente contem 'TRAN', CONTA MOVIMENTO SERA = '9376'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDAGIO")) {
        conta = "Quando Tipo Planilha contem 'PEDAGIO', Fornecedor/Cliente contem 'VALE', Fornecedor/Cliente contem 'PEDAGIO', CONTA MOVIMENTO SERA = '50066'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) {
        conta = "Quando Tipo Planilha contem 'CAIXA_ACERTO', Complemento (04) contem 'BE', Portador contem 'TRA', CONTA MOVIMENTO SERA = '5'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) {
        conta = "Quando Tipo Planilha contem 'CAIXA_ACERTO', Complemento (04) contem 'MATRIZ', Portador contem 'TRA', CONTA MOVIMENTO SERA = '5'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PIS")) {
        conta = "Quando Complemento (01) comeca com 'PIS', CONTA MOVIMENTO SERA = '1556'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("COFINS")) {
        conta = "Quando Complemento (01) comeca com 'COFINS', CONTA MOVIMENTO SERA = '1552'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ISS")) {
        conta = "Quando Complemento (01) comeca com 'ISS', CONTA MOVIMENTO SERA = '1547'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS ST A RECOLHER")) {
        conta = "Quando Complemento (01) comeca com 'ICMS ST A RECOLHER', CONTA MOVIMENTO SERA = '1541'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("MULTAS DE TRANSITO")) {
        conta = "Quando Complemento (01) comeca com 'MULTAS DE TRANSITO', CONTA MOVIMENTO SERA = '5498'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("DIARIAS")) {
        conta = "Quando Complemento (01) comeca com 'DIARIAS', CONTA MOVIMENTO SERA = '5497'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ANTT")) {
        conta = "Quando Complemento (01) comeca com 'ANTT', CONTA MOVIMENTO SERA = '4859'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO")) {
        conta = "Quando Complemento (01) contem 'SEGURO', CONTA MOVIMENTO SERA = '4548'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SALARIOS E ORDENADOS")) {
        conta = "Quando Complemento (01) comeca com 'SALARIOS E ORDENADOS', CONTA MOVIMENTO SERA = '1634'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRO LABORE A PAGAR")) {
        conta = "Quando Complemento (01) comeca com 'PRO LABORE A PAGAR', CONTA MOVIMENTO SERA = '1635'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("INDENIZACOES RESCISOES")) {
        conta = "Quando Complemento (01) comeca com 'INDENIZACOES RESCISOES', CONTA MOVIMENTO SERA = '4328'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGO")) {
        conta = "Quando Complemento (01) contem 'FERIAS', Complemento (01) contem 'ENCARGO', CONTA MOVIMENTO SERA = '4328'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("INSS - EMPRESA")) {
        conta = "Quando Complemento (01) comeca com 'INSS - EMPRESA', CONTA MOVIMENTO SERA = '1659'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IRRF - RECEITA FEDERAL")) {
        conta = "Quando Complemento (01) comeca com 'IRRF - RECEITA FEDERAL', CONTA MOVIMENTO SERA = '1546'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '1660'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PENSAO ALIMENTICIA")) {
        conta = "Quando Complemento (01) comeca com 'PENSAO ALIMENTICIA', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONTRIBUICAO SINDIC / CONFEDER / ASSISTE")) {
        conta = "Quando Complemento (01) comeca com 'CONTRIBUICAO SINDIC / CONFEDER / ASSISTE', CONTA MOVIMENTO SERA = '1661'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CORREIOS")) {
        conta = "Quando Complemento (01) comeca com 'CORREIOS', CONTA MOVIMENTO SERA = '4479'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ENERGIA ELETRICA")) {
        conta = "Quando Complemento (01) comeca com 'ENERGIA ELETRICA', CONTA MOVIMENTO SERA = '4477'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SINDICATO PATRONAL - EMPRESA")) {
        conta = "Quando Complemento (01) comeca com 'SINDICATO PATRONAL - EMPRESA', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("TELEFONIA FIXA")) {
        conta = "Quando Complemento (01) comeca com 'TELEFONIA FIXA', CONTA MOVIMENTO SERA = '4478'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IBAMA - INSTITUTO BRASILEIRO DE MEIO AMB")) {
        conta = "Quando Complemento (01) comeca com 'IBAMA - INSTITUTO BRASILEIRO DE MEIO AMB', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("OUTRAS TAXAS E IMPOSTOS ESTADUAIS")) {
        conta = "Quando Complemento (01) comeca com 'OUTRAS TAXAS E IMPOSTOS ESTADUAIS', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PIS/COFINS/CSLL A RECOLHER")) {
        conta = "Quando Complemento (01) comeca com 'PIS/COFINS/CSLL A RECOLHER', CONTA MOVIMENTO SERA = '1580'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS OPERACOES OUTROS ESTADOS (GNRE)")) {
        conta = "Quando Complemento (01) comeca com 'ICMS OPERACOES OUTROS ESTADOS (GNRE)', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("OUTROS IMPOSTOS E TAXAS MUNICIPAIS")) {
        conta = "Quando Complemento (01) comeca com 'OUTROS IMPOSTOS E TAXAS MUNICIPAIS', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE VIAGEM")) {
        conta = "Quando Complemento (01) comeca com 'ADIANTAMENTO DE VIAGEM', CONTA MOVIMENTO SERA = '6480'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IRPJ A RECOLHER")) {
        conta = "Quando Complemento (01) comeca com 'IRPJ A RECOLHER', CONTA MOVIMENTO SERA = '1545'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("INDENIZACOES A VEICULOS DE TERCEIROS")) {
        conta = "Quando Complemento (01) comeca com 'INDENIZACOES A VEICULOS DE TERCEIROS', CONTA MOVIMENTO SERA = '4548'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI LOGISTICA")) {
        conta = "Quando Complemento (01) comeca com 'ADIANTAMENTO DE SALARIOS', Fornecedor/Cliente contem 'POLI LOGISTICA', CONTA MOVIMENTO SERA = '4328'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CUSTO COM VALE TRANSPORTE")) {
        conta = "Quando Complemento (01) comeca com 'CUSTO COM VALE TRANSPORTE', CONTA MOVIMENTO SERA = '4328'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CUSTO C/ ASSIST. MEDICA - COLABORADOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LABET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOXICOLOGICOS")) {
        conta = "Quando Complemento (01) comeca com 'CUSTO C/ ASSIST. MEDICA - COLABORADOR', Fornecedor/Cliente contem 'LABET', Fornecedor/Cliente contem 'EXAME', Fornecedor/Cliente contem 'TOXICOLOGICOS', CONTA MOVIMENTO SERA = '4328'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CUSTO COM ALIMENTACAO DE FUNCIONARIOS")) {
        conta = "Quando Complemento (01) comeca com 'CUSTO COM ALIMENTACAO DE FUNCIONARIOS', CONTA MOVIMENTO SERA = '4546'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ALIMENTACAO DE FUNCIONARIOS")) {
        conta = "Quando Complemento (01) comeca com 'ALIMENTACAO DE FUNCIONARIOS', CONTA MOVIMENTO SERA = '4546'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CSLL A RECOLHER")) {
        conta = "Quando Complemento (01) comeca com 'CSLL A RECOLHER', CONTA MOVIMENTO SERA = '1553'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IRRF A RECOLHER")) {
        conta = "Quando Complemento (01) comeca com 'IRRF A RECOLHER', CONTA MOVIMENTO SERA = '1546'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ISS RETIDO")) {
        conta = "Quando Complemento (01) comeca com 'ISS RETIDO', CONTA MOVIMENTO SERA = '1582'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("AVARIAS")) {
        conta = "Quando Complemento (01) comeca com 'AVARIAS', CONTA MOVIMENTO SERA = '5071'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PEDAGIO")) {
        conta = "Quando Complemento (01) comeca com 'PEDAGIO', CONTA MOVIMENTO SERA = '5497'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("COMPANHIA BRASILEIRA DE SOLUCOES")) {
        conta = "Quando Fornecedor/Cliente comeca com 'COMPANHIA BRASILEIRA DE SOLUCOES', CONTA MOVIMENTO SERA = '288'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSULTORIA CONTABIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ASERCO")) {
        conta = "Quando Complemento (01) comeca com 'CONSULTORIA CONTABIL', Fornecedor/Cliente comeca com 'ASERCO', CONTA MOVIMENTO SERA = '506512'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SEGURANCA PREDI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEIXOTO")) {
        conta = "Quando Complemento (01) comeca com 'SEGURANCA PREDI', Fornecedor/Cliente contem 'PEIXOTO', CONTA MOVIMENTO SERA = '4430'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("MATERIAIS DE ESCRITORIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ASERCO")) {
        conta = "Quando Complemento (01) comeca com 'MATERIAIS DE ESCRITORIO', Fornecedor/Cliente comeca com 'ASERCO', CONTA MOVIMENTO SERA = '4857'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("HONORARIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ASERCO")) {
        conta = "Quando Complemento (01) contem 'HONORARIO', Fornecedor/Cliente comeca com 'ASERCO', CONTA MOVIMENTO SERA = '4859'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("TAXAS ADMINISTRATIVAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TICKET SERVICO")) {
        conta = "Quando Complemento (01) comeca com 'TAXAS ADMINISTRATIVAS', Fornecedor/Cliente comeca com 'TICKET SERVICO', CONTA MOVIMENTO SERA = '4859'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("BANCO BRASIL")) {
        conta = "Quando Complemento (01) comeca com 'CONSORCIO', Fornecedor/Cliente comeca com 'BANCO BRASIL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4100270ME")) {
        conta = "Quando Complemento (01) comeca com 'CONSORCIO', Fornecedor/Cliente contem 'BRADESCO', Complemento (04) contem '4100270ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8384293ME")) {
        conta = "Quando Complemento (01) comeca com 'CONSORCIO', Fornecedor/Cliente contem 'BRADESCO', Complemento (04) contem '8384293ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4100269ME")) {
        conta = "Quando Complemento (01) comeca com 'CONSORCIO', Fornecedor/Cliente contem 'BRADESCO', Complemento (04) contem '4100269ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '642400ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '361600ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '660400ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '384800ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '805800ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '30502100ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '30502000ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547500ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547600ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31545800ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547100ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31542600ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31546700ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31545900ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31542500ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547300ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31545500ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173932ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '178021ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '209867ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '176486ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173874ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173918ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173927ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173923ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174836ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174832ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173856ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174834ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173930ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173920ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME")) {
        conta = "Quando Complemento (01) comeca com '0313-FINAME BANCO BRADESCO', Complemento (04) contem '8832102ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME")) {
        conta = "Quando Complemento (01) comeca com '0313-FINAME BANCO BRADESCO', Complemento (04) contem '9123717ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '9123687ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME")) {
        conta = "Quando Complemento (01) comeca com '0313-FINAME BANCO BRADESCO', Complemento (04) contem '8832129ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME")) {
        conta = "Quando Complemento (01) comeca com '0313-FINAME BANCO BRADESCO', Complemento (04) contem '8773696ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO DO BRASIL', Complemento (04) contem '40013030ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("43081ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARCEL")) {
        conta = "Quando Complemento (01) comeca com 'PARCELAMENTO DE INSS', Complemento (04) contem '43081ME', Fornecedor/Cliente contem 'INSS', Fornecedor/Cliente contem 'PARCEL', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE IRPJ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("2089ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL")) {
        conta = "Quando Complemento (01) comeca com 'PARCELAMENTO DE IRPJ', Complemento (04) contem '2089ME', Fornecedor/Cliente contem 'RECEITA', Fornecedor/Cliente contem 'FEDERAL', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORRETA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSP")) {
        conta = "Quando Complemento (01) comeca com 'ADIANTAMENTO DE SALARIOS', Fornecedor/Cliente contem 'CORRETA', Fornecedor/Cliente contem 'LOGISTICA', Fornecedor/Cliente contem 'TRANSP', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907348ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907343ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907353ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907346ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME")) {
        conta = "Quando Complemento (01) comeca com '0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '4036846ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907289ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907337ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME")) {
        conta = "Quando Complemento (01) comeca com '0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '770711ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME")) {
        conta = "Quando Complemento (01) comeca com '0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '796290ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE CLIENTE (DEVOL. STOQUE)") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STOQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCANTI")) {
        conta = "Quando Complemento (01) comeca com 'ADIANTAMENTO DE CLIENTE (DEVOL. STOQUE)', Fornecedor/Cliente contem 'STOQUE', Fornecedor/Cliente contem 'MERCANTI', CONTA MOVIMENTO SERA = '7611'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("AQUISICAO DE VEICULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DAIANE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARANTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REZENDE")) {
        conta = "Quando Complemento (01) comeca com 'AQUISICAO DE VEICULOS', Fornecedor/Cliente comeca com 'DAIANE', Fornecedor/Cliente contem 'ARANTES', Fornecedor/Cliente contem 'REZENDE', CONTA MOVIMENTO SERA = '1089'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS DIFERENCIAL DE ALIQUOTA A RECOLHER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTADO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAZENDA")) {
        conta = "Quando Complemento (01) comeca com 'ICMS DIFERENCIAL DE ALIQUOTA A RECOLHER', Fornecedor/Cliente comeca com 'SECRETARIA', Fornecedor/Cliente contem 'ESTADO', Fornecedor/Cliente contem 'FAZENDA', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRT - PREVIDENCIARIO DA RFB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4135ME")) {
        conta = "Quando Complemento (01) comeca com 'PRT - PREVIDENCIARIO DA RFB', Complemento (04) contem '4135ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRT - DEMAIS DEBITOS DA RFB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("5184ME")) {
        conta = "Quando Complemento (01) comeca com 'PRT - DEMAIS DEBITOS DA RFB', Complemento (04) contem '5184ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PERT - DEBITOS PREVIDENCIARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARC")) {
        conta = "Quando Complemento (01) comeca com 'PERT - DEBITOS PREVIDENCIARIOS', Fornecedor/Cliente contem 'INSS', Fornecedor/Cliente contem 'PARC', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PERT - DEMAIS DEBITOS RFB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) {
        conta = "Quando Complemento (01) comeca com 'PERT - DEMAIS DEBITOS RFB', Fornecedor/Cliente contem 'RECEITA', Fornecedor/Cliente contem 'FEDERAL', Fornecedor/Cliente contem 'BRASIL', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '642400ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '361600ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '660400ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '384800ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0309-FINAME BANCO ITAU', Complemento (04) contem '805800ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '30502100ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '30502000ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547500ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547600ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31545800ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547100ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31542600ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31546700ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31545900ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31542500ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31547300ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0311-FINAME BANCO VOLVO', Complemento (04) contem '31545500ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173932ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '178021ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '209867ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '176486ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173874ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173918ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173927ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173923ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174836ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174832ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173856ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174834ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173930ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173920ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0313-FINAME BANCO BRADESCO', Complemento (04) contem '8832102ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '9123717ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '9123687ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '8832129ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '8773696ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO DO BRASIL', Complemento (04) contem '40013030ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907348ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907343ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907353ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907346ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '4036846ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907289ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO', Complemento (04) contem '3907337ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '770711ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com '0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '796290ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0450-ADIANTAMENTO DE 13 SALARIO")) {
        conta = "Quando Complemento (01) comeca com '0450-ADIANTAMENTO DE 13 SALARIO', CONTA MOVIMENTO SERA = '4328'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("3342130022132")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente igual a '3342130022132', CONTA MOVIMENTO SERA = '6714'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("3166374524")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente igual a '3166374524', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("6067-4")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente igual a '6067-4', CONTA MOVIMENTO SERA = '10'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("000054620")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente igual a '000054620', CONTA MOVIMENTO SERA = '20'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("5027")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente igual a '5027', CONTA MOVIMENTO SERA = '9'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("50270")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente igual a '50270', CONTA MOVIMENTO SERA = '8974'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR LIQ")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR LIQ', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR BAIXA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR BAIXA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR C/C")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR C/C', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR COMANDADA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR COMANDADA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR DOC/TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR DOC/TED', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR LIB")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR LIB', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR MANUTEN")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR MANUTEN', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR MAXCTA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR MAXCTA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR OBB")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR OBB', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR PAG")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR PAG', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("TAR TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'TAR TED', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DOC/TED INTERNET TED INTERNET")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'DOC/TED INTERNET TED INTERNET', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DB CEST PJ")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'DB CEST PJ', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("CARGA CARTAO TRANSPORTES")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'CARGA CARTAO TRANSPORTES', CONTA MOVIMENTO SERA = '6480'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TARIFA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0106-IPVA A APROPRIAR")) {
        conta = "Quando Complemento (01) comeca com '0106-IPVA A APROPRIAR', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0108-LICENCIAMENTO TRLAV")) {
        conta = "Quando Complemento (01) comeca com '0108-LICENCIAMENTO TRLAV', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0106-IPVA A APROPRIAR")) {
        conta = "Quando Complemento (01) comeca com '0106-IPVA A APROPRIAR', CONTA MOVIMENTO SERA = '4532'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VIAGEM")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'ADIANTAMENTO', Complemento (01) contem 'VIAGEM', CONTA MOVIMENTO SERA = '6480'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARGA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESCARGA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENTREGA")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'CARGA', Complemento (01) contem 'DESCARGA', Complemento (01) contem 'ENTREGA', CONTA MOVIMENTO SERA = '6480'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FRETES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARRETO")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'FRETES', Complemento (01) contem 'CARRETO', CONTA MOVIMENTO SERA = '6480'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IOF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OPERACOES FINANCEIRAS")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'IOF', Complemento (01) contem 'OPERACOES FINANCEIRAS', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCARIO")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'TARIFA', Complemento (01) contem 'SERVICO', Complemento (01) contem 'BANCARIO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENTRE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTA")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'TRANSFERENCIA', Complemento (01) contem 'ENTRE', Complemento (01) contem 'CONTA', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VIAGE") &&
        StringUtil.removeSpecialCharsToUC(complemento05).startsWith("ESTORNO")) {
        conta = "Quando Tipo Planilha contem 'ADIANTAMENTO', Tipo Planilha contem 'VIAGEM', Complemento (01) contem 'ADIANTAMENTO', Complemento (01) contem 'VIAGE', Complemento (05) comeca com 'ESTORNO', CONTA MOVIMENTO SERA = '6480'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO SAFRA")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO SAFRA', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO SAFRA', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '819427ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '819427ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO AYMORE', Complemento (04) contem '467012ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO AYMORE', Complemento (04) contem '467012ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME")) {
        conta = "Quando Complemento (01) comeca com '0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '814077ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL', Complemento (04) contem '814077ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO AYMORE', Complemento (04) contem '379412586ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO AYMORE', Complemento (04) contem '379412586ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("123687ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '123687ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("123687ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BRADESCO', Complemento (04) contem '123687ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("27467012ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO AYMORE', Complemento (04) contem '27467012ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("27467012ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO AYMORE', Complemento (04) contem '27467012ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO BANCO DAYCOVAL S/A") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO BANCO DAYCOVAL S/A', Complemento (04) contem '814077ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO BANCO DAYCOVAL S/A") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'EMPRESTIMO BANCO DAYCOVAL S/A', Complemento (04) contem '814077ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO DO BRASIL', Complemento (04) contem '40013030ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO DO BRASIL', Complemento (04) contem '40013030ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173856ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173856ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173874ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173874ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173918ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173918ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173920ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173920ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174836ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174836ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '176486ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '176486ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '178021ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '178021ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '209867ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '209867ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173923ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173923ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173927ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173927ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173930ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173930ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173932ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '173932ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174832ME', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174832ME', Complemento (02) contem 'FINANCIAMENTOS-JUROS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME")) {
        conta = "Quando Complemento (01) comeca com 'FINAME BANCO BDMG', Complemento (04) contem '174834ME', REGRA DE FINANCIAMENTOS";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) {
        conta = "9376";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) {
        conta = "8974";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD")) {
        conta = "8974";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) {
        conta = "50273";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) {
        conta = "9716";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("AFERICAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TACOGRAFO")) {
        conta = "50020";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNCIONARIOS")) {
        conta = "4342";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSIST") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TECNICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EMPILHADEIRA")) {
        conta = "50051";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PLANO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAUDE")) {
        conta = "50138";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("AVARIAS")) {
        conta = "50065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESCARGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ENTREGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OUTRAS")) {
        conta = "50042";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COMBUSTIVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARTAO")) {
        conta = "50014";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COMBUSTIVEL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ETANOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GASOLINA")) {
        conta = "50013";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTABIL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRIBUTARIA")) {
        conta = "50177";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("JURIDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SOCIETARIA")) {
        conta = "50178";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PRAGAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUMIGACAO")) {
        conta = "50043";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNCIONARIOS")) {
        conta = "50120";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA")) {
        conta = "50109";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA")) {
        conta = "50110";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EPI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EQUIPAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SEGURANCA")) {
        conta = "50105";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("AIMENTACAO")) {
        conta = "50097";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("UNIFORMES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CRACHAS")) {
        conta = "50103";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DEMAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PRESTADO")) {
        conta = "50181";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EMBALAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OPERACAO")) {
        conta = "50248";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ESTOQUE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EQUIPAMENTOS")) {
        conta = "50018";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FERRAMENTAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MAQUINAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INISUMOS")) {
        conta = "50021";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FRETES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARRETOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PJ")) {
        conta = "50057";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GINASTICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LABORAL")) {
        conta = "50258";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL")) {
        conta = "50063";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INTERNET")) {
        conta = "50185";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LUBRIFICANTES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GRAXAS")) {
        conta = "50012";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SOFTWARE")) {
        conta = "50187";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MOVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EQUIPAMENTOS")) {
        conta = "50216";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ESCRITORIO")) {
        conta = "50212";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LIMPEZA")) {
        conta = "50211";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("USO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONSUMO")) {
        conta = "50213";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REFORMAS")) {
        conta = "50243";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARROCERIA")) {
        conta = "50023";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LAVAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FROTA")) {
        conta = "50024";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNILARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PINTURA")) {
        conta = "50025";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OLEO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DIESEL")) {
        conta = "50011";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACESSORIOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("VEICULOS")) {
        conta = "50027";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ELETRICAS")) {
        conta = "50028";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PEDAGIO")) {
        conta = "50066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ORDENADOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("JOVEM")) {
        conta = "50150";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SEGURANCA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PREDIAL")) {
        conta = "50179";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BORRACHARIA")) {
        conta = "50016";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARROCERIA")) {
        conta = "50029";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LIMPEZA")) {
        conta = "50180";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PLOTAGEM")) {
        conta = "50037";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("RASTREAMENTO")) {
        conta = "50054";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TAPECARIA")) {
        conta = "50038";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ELETRICO")) {
        conta = "50033";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNILARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PINTURA")) {
        conta = "50034";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LAVAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("VEICULOS")) {
        conta = "50030";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MECANICO")) {
        conta = "50035";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SINISTROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ROUBOS")) {
        conta = "50053";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TELEFONIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FIXA")) {
        conta = "50253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALIMENTACAO")) {
        conta = "50127";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PESSOAL")) {
        conta = "50121";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("UNIFORMES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CRACHAS")) {
        conta = "4352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS")) {
        conta = "9716";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COLABORADOR")) {
        conta = "50137";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ODONTOLOGICA")) {
        conta = "50136";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("JORNADA")) {
        conta = "861471";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SINISTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SEGURADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REC")) {
        conta = "50275";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONVENIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FRETE")) {
        conta = "50060";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ODONTOLOGICA")) {
        conta = "50108";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COMUNICACAO")) {
        conta = "50217";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OUTRA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INFORMATICA")) {
        conta = "50190";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DIVERSO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("VEICULO")) {
        conta = "50032";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FERRAMENTAS / MAQUINAS / INSUMOS OFICINA")) {
        conta = "50021";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MAQUINAS E EQUIPAMENTOS")) {
        conta = "1083";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVISAO DE VEICULOS")) {
        conta = "50158";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GUINCHO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REBOQUE")) {
        conta = "50068";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESPACHANTE")) {
        conta = "50076";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("5027")) {
        conta = "9";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("50270")) {
        conta = "8974";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("37452")) {
        conta = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("4806")) {
        conta = "14";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("5462")) {
        conta = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("6067")) {
        conta = "10";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("7177528")) {
        conta = "5634";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("13000967")) {
        conta = "15";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100049")) {
        conta = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100048")) {
        conta = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11200200001")) {
        conta = "312";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100047")) {
        conta = "50144";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100043")) {
        conta = "50113";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100043")) {
        conta = "50141";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100040")) {
        conta = "50111";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100043")) {
        conta = "50113";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100047")) {
        conta = "50114";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100049")) {
        conta = "50116";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100050")) {
        conta = "50117";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100051")) {
        conta = "50118";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100040")) {
        conta = "4335";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100043")) {
        conta = "50141";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100047")) {
        conta = "50144";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100050")) {
        conta = "50147";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100051")) {
        conta = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100022")) {
        conta = "50098";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100022")) {
        conta = "50098";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("00000073-1")) {
        conta = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100400001")) {
        conta = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100400004")) {
        conta = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("1100400006")) {
        conta = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100400007")) {
        conta = "1661";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100400008")) {
        conta = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100400009")) {
        conta = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100400010")) {
        conta = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500001")) {
        conta = "1684";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500002")) {
        conta = "1685";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500004")) {
        conta = "1688";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500005")) {
        conta = "1689";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500006")) {
        conta = "1690";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41100400007")) {
        conta = "7297";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100001")) {
        conta = "50087";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100007")) {
        conta = "50090";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100019")) {
        conta = "50097";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100033")) {
        conta = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100036")) {
        conta = "50108";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100039")) {
        conta = "50110";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100048")) {
        conta = "50115";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100052")) {
        conta = "50119";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100001")) {
        conta = "4328";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100007")) {
        conta = "4351";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100012")) {
        conta = "50122";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100013")) {
        conta = "50123";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100015")) {
        conta = "50124";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100033")) {
        conta = "4338";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100036")) {
        conta = "50136";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100039")) {
        conta = "50138";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100049")) {
        conta = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200100052")) {
        conta = "50149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41200700006")) {
        conta = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500003")) {
        conta = "1686";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("41100700002")) {
        conta = "50087";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11200200002")) {
        conta = "313";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PGD-AJUSTE")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) {
        conta = "9376";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRAN")) {
        conta = "8974";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) {
        conta = "50273";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRA")) {
        conta = "9716";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("AFERICAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TACOGRAFO")) {
        conta = "50020";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNCIONARIOS")) {
        conta = "4342";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSIST") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TECNICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EMPILHADEIRA")) {
        conta = "50051";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PLANO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAUDE")) {
        conta = "50138";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("AVARIAS")) {
        conta = "50065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESCARGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ENTREGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OUTRAS")) {
        conta = "50042";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COMBUSTIVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARTAO")) {
        conta = "50014";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COMBUSTIVEL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ETANOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GASOLINA")) {
        conta = "50013";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTABIL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRIBUTARIA")) {
        conta = "50177";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONSULTORIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("JURIDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SOCIETARIA")) {
        conta = "50178";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PRAGAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUMIGACAO")) {
        conta = "50043";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNCIONARIOS")) {
        conta = "50120";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA")) {
        conta = "50109";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA")) {
        conta = "50110";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EPI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EQUIPAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SEGURANCA")) {
        conta = "50105";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("AIMENTACAO")) {
        conta = "50097";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("UNIFORMES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CRACHAS")) {
        conta = "50103";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DEMAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PRESTADO")) {
        conta = "50181";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EMBALAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OPERACAO")) {
        conta = "50248";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ESTOQUE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EQUIPAMENTOS")) {
        conta = "50018";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FERRAMENTAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MAQUINAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INISUMOS")) {
        conta = "50021";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FRETES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARRETOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PJ")) {
        conta = "50057";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GINASTICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LABORAL")) {
        conta = "50258";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL")) {
        conta = "50063";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INTERNET")) {
        conta = "50185";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LUBRIFICANTES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GRAXAS")) {
        conta = "50012";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SOFTWARE")) {
        conta = "50187";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MOVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("EQUIPAMENTOS")) {
        conta = "50216";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ESCRITORIO")) {
        conta = "50212";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LIMPEZA")) {
        conta = "50211";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("USO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONSUMO")) {
        conta = "50213";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REFORMAS")) {
        conta = "50243";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARROCERIA")) {
        conta = "50023";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LAVAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FROTA")) {
        conta = "50024";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MATERIAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNILARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PINTURA")) {
        conta = "50025";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OLEO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DIESEL")) {
        conta = "50011";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ACESSORIOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("VEICULOS")) {
        conta = "50027";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PECAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ELETRICAS")) {
        conta = "50028";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PEDAGIO")) {
        conta = "50066";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ORDENADOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("JOVEM")) {
        conta = "50150";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SEGURANCA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PREDIAL")) {
        conta = "50179";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BORRACHARIA")) {
        conta = "50016";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARROCERIA")) {
        conta = "50029";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LIMPEZA")) {
        conta = "50180";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PLOTAGEM")) {
        conta = "50037";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("RASTREAMENTO")) {
        conta = "50054";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TAPECARIA")) {
        conta = "50038";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ELETRICO")) {
        conta = "50033";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FUNILARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PINTURA")) {
        conta = "50034";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("LAVAGEM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("VEICULOS")) {
        conta = "50030";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MECANICO")) {
        conta = "50035";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SINISTROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ROUBOS")) {
        conta = "50053";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TELEFONIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FIXA")) {
        conta = "50253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALIMENTACAO")) {
        conta = "50127";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PESSOAL")) {
        conta = "50121";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("UNIFORMES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CRACHAS")) {
        conta = "4352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MEDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COLABORADOR")) {
        conta = "50137";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ODONTOLOGICA")) {
        conta = "50136";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("JORNADA")) {
        conta = "861471";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CARGA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SINISTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SEGURADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REC")) {
        conta = "50275";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONVENIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FRETE")) {
        conta = "50060";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ODONTOLOGICA")) {
        conta = "50108";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("COMUNICACAO")) {
        conta = "50217";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("OUTRA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INFORMATICA")) {
        conta = "50190";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DIVERSO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("VEICULO")) {
        conta = "50032";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FERRAMENTAS / MAQUINAS / INSUMOS OFICINA")) {
        conta = "50021";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("MAQUINAS E EQUIPAMENTOS")) {
        conta = "1083";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVISAO DE VEICULOS")) {
        conta = "50158";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("GUINCHO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REBOQUE")) {
        conta = "50068";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("DESPACHANTE")) {
        conta = "50076";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("37454-0")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("5461-2")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("6076-3")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("6950-7")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PGD-AJUSTE")) {
        conta = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(line).contains("PENDENCIA BANCARIA:")) {
        tratarIgnoraLinha = true;
    }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PAMCARD, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOV_EXPORTACAOENTRADA, HISTORICO = VLR. REF. Documento/NF Fornecedor/Cliente   INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASTERCEIROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOV_MOTORISTASTERCEIROS, HISTORICO = Complemento (01) CONTRATO Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOV_MOTORISTASPROPRIOS, HISTORICO = Complemento (01) VIAGEM Complemento (04) EVENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PEDAGIO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIARIAS VIAGEM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem DIARIAS VIAGEM, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("13 SALARIO                   1") && StringUtil.removeSpecialCharsToUC(complemento04).contains("13"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem 13 SALARIO          1, Complemento (04) contem 13, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJUSTE INSS FERIAS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("FERIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem AJUSTE INSS FERIAS, Complemento (04) contem FERIAS, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100036") && StringUtil.removeSpecialCharsToUC(complemento02).contains("21100400001"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Complemento (03) contem 41101100036, Complemento (02) contem 21100400001, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSISTENCIA MEDICA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("41101100039"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem ASSISTENCIA MEDICA, Complemento (03) contem 41101100039, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESC ADIANTAMENTO VIAGEM") && StringUtil.removeSpecialCharsToUC(complemento02).contains("21100400001"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem DESC ADIANTAMENTO VIAGEM, Complemento (02) contem 21100400001, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100012") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DSR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Complemento (02) contem 41101100012, Fornecedor/Cliente contem DSR, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERIAS A PAGAR") && StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500001"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem FERIAS A PAGAR, Complemento (02) contem 21100500001, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS A RECOLHER") && StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100040"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem FGTS A RECOLHER, Complemento (02) contem 41101100040, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CAIXA_ACERTO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("21100500001"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem FERIAS, Complemento (04) contem FERIAS, Complemento (03) contem 21100500001, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJUSTE FGTS FERIAS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100049"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem AJUSTE FGTS FERIAS, Complemento (04) contem FGTS, Complemento (02) contem 41101100049, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("11200200001") && StringUtil.removeSpecialCharsToUC(complemento04).contains("SALARIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTECIPACAO DE SALARIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Complemento (03) contem 11200200001, Complemento (04) contem SALARIO, Fornecedor/Cliente contem ANTECIPACAO DE SALARIO, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTECIPACOES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("13") && StringUtil.removeSpecialCharsToUC(complemento03).contains("11200200003"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem ANTECIPACOES, Fornecedor/Cliente contem 13, Complemento (03) contem 11200200003, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500003"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem FGTS, Complemento (04) contem FGTS, Complemento (02) contem 21100500003, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem DESC, Fornecedor/Cliente contem CARTAO, Fornecedor/Cliente contem ALIMENTACAO, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, HISTORICO = Complemento (04) | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1556") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1556, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1552") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1552, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1547") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1547, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1541") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1541, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1634") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1634, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1635") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1635, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0137-INDENIZACOES RESCISOES") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4328, Complemento (01) comeca com 0137-INDENIZACOES RESCISOES, Tipo Planilha nao contem FOLHA, HISTORICO = FUNC";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0147-FERIAS / ENCARGOS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4328, Complemento (01) comeca com 0147-FERIAS / ENCARGOS, Tipo Planilha nao contem FOLHA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1659, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1546") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1546, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1660") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1660, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1637") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1637, Tipo Planilha nao contem FOLHA, HISTORICO = PENSAO ALIMENTICIA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1580") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CSRF") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1580, Fornecedor/Cliente contem CSRF, Tipo Planilha nao contem FOLHA, HISTORICO = CSRF RETIDA DO MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6480") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6480, Tipo Planilha nao contem PAMCARD, Tipo Planilha nao contem FOLHA, HISTORICO = Data Movimento - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1545") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1545, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0340-ADIANTAMENTO DE SALARIOS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4328, Complemento (01) comeca com 0340-ADIANTAMENTO DE SALARIOS, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1553") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1553, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1582, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5071") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0093-AVARIAS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5071, Complemento (01) comeca com 0093-AVARIAS, Tipo Planilha nao contem FOLHA, HISTORICO = Complemento (04) - Fornecedor/Cliente REF. AVARIAS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5497") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0097-PEDAGIO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5497, Complemento (01) comeca com 0097-PEDAGIO, Tipo Planilha nao contem FOLHA, HISTORICO = Complemento (04) - Fornecedor/Cliente REF. PEDAGIO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4857") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0229-MATERIAIS DE ESCRITORIO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4857, Complemento (01) comeca com 0229-MATERIAIS DE ESCRITORIO, Tipo Planilha nao contem FOLHA, HISTORICO = Complemento (04) - Fornecedor/Cliente REF. MATERIAIS DE ESCRITORIO";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem FINAME, Tipo Planilha nao contem FOLHA, HISTORICO = PARCELA Parcela Atual-Final DO CONTRATO Complemento (03) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem EMPRESTIMO, Tipo Planilha nao contem FOLHA, HISTORICO = PARCELA Parcela Atual-Final DO CONTRATO Complemento (03) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem FINAME, Complemento (02) contem FINANCIAMENTOS-JUROS, Tipo Planilha nao contem FOLHA, HISTORICO = JUROS S/ PARCELA Parcela Atual-Final DO CONTRATO Complemento (03) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem EMPRESTIMO, Complemento (02) contem FINANCIAMENTOS-JUROS, Tipo Planilha nao contem FOLHA, HISTORICO = JUROS S/ PARCELA Parcela Atual-Final DO CONTRATO Complemento (03) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0450-ADIANTAMENTO DE 13 SALARIO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4328, Complemento (01) comeca com 0450-ADIANTAMENTO DE 13 SALARIO, Tipo Planilha nao contem FOLHA, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6480") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6480, Tipo Planilha contem ADIANTAMENTO, Tipo Planilha contem VIAGEM, HISTORICO = Complemento (04) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("3342130022132"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente igual a 3342130022132, HISTORICO = TRANSFERENCIA DE Descricao Plano Conta Portador PARA Descricao Plano Conta Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("3166374524"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente igual a 3166374524, HISTORICO = TRANSFERENCIA DE Descricao Plano Conta Portador PARA Descricao Plano Conta Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("6067-4"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente igual a 6067-4, HISTORICO = TRANSFERENCIA DE Descricao Plano Conta Portador PARA Descricao Plano Conta Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("000054620"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente igual a 000054620, HISTORICO = TRANSFERENCIA DE Descricao Plano Conta Portador PARA Descricao Plano Conta Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("5027"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente igual a 5027, HISTORICO = TRANSFERENCIA DE Descricao Plano Conta Portador PARA Descricao Plano Conta Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("50270"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente igual a 50270, HISTORICO = TRANSFERENCIA DE Descricao Plano Conta Portador PARA Descricao Plano Conta Movimento";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ESCRITURACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ESCRITURACAO, HISTORICO = Complemento (03) Documento/NF Fornecedor/Cliente  INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GPS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ACIDENTE") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TRAB") && StringUtil.removeSpecialCharsToUC(complemento04).contains("GPS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem GPS, Complemento (04) contem ACIDENTE, Complemento (04) contem TRAB, Complemento (04) contem GPS, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJUSTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("13"))  historico = "HISTORICO POR REGRA = Quando Complemento (04) contem FGTS, Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem AJUSTE, Fornecedor/Cliente contem FGTS, Fornecedor/Cliente contem 13, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJUSTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("13") && StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100051"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem AJUSTE, Fornecedor/Cliente contem INSS, Fornecedor/Cliente contem 13, Complemento (02) contem 41101100051, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJUSTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROVISAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("13") && StringUtil.removeSpecialCharsToUC(complemento02).contains("41101100050"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem AJUSTE, Fornecedor/Cliente contem PROVISAO, Fornecedor/Cliente contem 13, Complemento (02) contem 41101100050, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("21100500006"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem BAIXA, Fornecedor/Cliente contem PROV, Fornecedor/Cliente contem FGTS, Complemento (02) contem 21100500006, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem BAIXA, Fornecedor/Cliente contem PROV, Fornecedor/Cliente contem INSS, Fornecedor/Cliente contem FERIAS, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CONTABIL_FOLHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("13"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CONTABIL_FOLHA, Fornecedor/Cliente contem BAIXA, Fornecedor/Cliente contem PROV, Fornecedor/Cliente contem INSS, Fornecedor/Cliente contem 13, HISTORICO =  |";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem FOLHA, HISTORICO = Fornecedor/Cliente Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ISS, Complemento (01) contem SERV, HISTORICO = PAGAMENTO GUIA ISS REFERENTE Mes-Ano Anterior REF. NF Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a ICMS, HISTORICO = PAGAMENTO GNRE REF. DACTE N. Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERENCIAL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIQ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ICMS, Complemento (01) contem FERENCIAL, Complemento (01) contem ALIQ, HISTORICO = PAGAMENTO ICMS DIFERENCA ALIQUOTA MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS A RECOLHER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ICMS A RECOLHER, HISTORICO = PAGAMENTO DAE ICMS MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANT") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ADIANT, Complemento (01) contem FERIAS, HISTORICO = PAGTO FERIAS CFE REC.";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("AVARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STOQUE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem AVARIA, Fornecedor/Cliente contem STOQUE, HISTORICO = RECUPERACAO DESPESAS REF. NF Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PENSAO, Complemento (01) contem ALIMENT, HISTORICO = PAGAMENTO PENSAO ALIMENTICIA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("SALARIOS A PAGAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a SALARIOS A PAGAR, HISTORICO = PAGTO FUNCIONARIOS CONF FOLHA MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1661") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1661, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("REC") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PREST"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ISS, Complemento (01) contem REC, Complemento (01) contem PREST, HISTORICO = PAGAMENTO DAM ISS RETIDO MES Mes-Ano Anterior REF. NF Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS DE TRANSITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem MULTAS DE TRANSITO, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISOES A PAGAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RESCISOES A PAGAR, HISTORICO = PAGTO RESCISAO DE";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA - DMAE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem AGUA - DMAE, HISTORICO = PAGAMENTO DMAE DEP. MUNICIPAL DE AGUA E ESGOTO MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SERVICOS PRESTADOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem IRRF SERVICOS PRESTADOS, HISTORICO = PAGAMENTO IRRF REFERENTE MES Mes-Ano Anterior REF. NOTAS FISCAIS";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("COFINS A RECOLHER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a COFINS A RECOLHER, HISTORICO = PAGAMENTO GUIA COFINS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PIS A RECOLHER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a PIS A RECOLHER, HISTORICO = PAGAMENTO GUIA PIS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a PARCELAMENTO PIS, HISTORICO = PAGAMENTO DARF PARCELAMENTO PIS";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO COFINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a PARCELAMENTO COFINS, HISTORICO = PAGAMENTO DARF PARCELAMENTO PIS";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS/COFINS PGFN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) igual a PARCELAMENTO PIS/COFINS PGFN, HISTORICO = PAGAMENTO DARF PARCELAMENTO PIS/COFINS";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4100270ME")) {
        parcelaBase = 28;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8384293ME")) {
        parcelaBase = 28;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4100269ME")) {
        parcelaBase = 29;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME")) {
        parcelaBase = 50;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME")) {
        parcelaBase = 50;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME")) {
        parcelaBase = 39;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME")) {
        parcelaBase = 18;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME")) {
        parcelaBase = 40;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME")) {
        parcelaBase = 52;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME")) {
        parcelaBase = 46;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME")) {
        parcelaBase = 52;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME")) {
        parcelaBase = 50;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME")) {
        parcelaBase = 35;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("43081ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARCEL")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE IRPJ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("2089ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME")) {
        parcelaBase = 13;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME")) {
        parcelaBase = 22;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME")) {
        parcelaBase = 9;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRT - PREVIDENCIARIO DA RFB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4135ME")) {
        parcelaBase = 7;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRT - DEMAIS DEBITOS DA RFB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("5184ME")) {
        parcelaBase = 7;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 50;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 50;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 39;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 18;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 40;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 52;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 45;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 46;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 52;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 50;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 35;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 13;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 22;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 9;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("BANCO BRADESCO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5.872")) {
        parcelaBase = 41;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        parcelaBase = 1;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 1;
    }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME")) {
        parcelaBase = 66;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME")) {
        parcelaBase = 69;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("43081ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARCEL")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 54;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 66;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 69;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("BANCO BRADESCO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5.872")) {
        parcelaBase = 114;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        parcelaBase = 24;
    }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4100270ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8384293ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4100269ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("43081ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARCEL")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO DE IRPJ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("2089ME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRT - PREVIDENCIARIO DA RFB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4135ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PRT - DEMAIS DEBITOS DA RFB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("5184ME")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("642400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("361600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("660400ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("384800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0309-FINAME BANCO ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("805800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("30502000ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545800ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547100ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542600ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31546700ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545900ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31542500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31547300ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0311-FINAME BANCO VOLVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("31545500ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173932ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("178021ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("209867ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("176486ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173874ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173918ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173927ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173923ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174836ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174832ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173856ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("174834ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173930ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BDMG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("173920ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0313-FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832102ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123717ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("9123687ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8832129ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("8773696ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO DO BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("40013030ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907348ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907343ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907353ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907346ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0358-EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("4036846ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907289ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("3907337ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("770711ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("796290ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME")) {
        mesAnoBase = "06/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("819427ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("467012ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0365-EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("EMPRESTIMO/FINANCIAMENTO-BANCO DAYCOVAL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("814077ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("BANCO BRADESCO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5.872")) {
        mesAnoBase = "10/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME")) {
        mesAnoBase = "06/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FINAME BANCO AYMORE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("379412586ME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS")) {
        mesAnoBase = "06/2018";
    }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_EXPORTACAOENTRADA"))  historico = "VLR. REF." + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASTERCEIROS"))  historico = "" + " " + complemento01 + " " + "CONTRATO" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOV_MOTORISTASPROPRIOS"))  historico = "" + " " + complemento01 + " " + "VIAGEM" + " " + complemento04 + " " + "EVENTO" + " " + nomeOrigem + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CAIXA_ACERTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PEDAGIO") && StringUtil.removeSpecialCharsToUC(documento).contains("TAR"))    historico = "" + nomeOrigem + "    CodigoHistorico:10000";  //id -> 2504079.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + complemento04 + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1556") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1552") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:11";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1547") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:14";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1541") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:19";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1634") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:232";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1635") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:48";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0137-INDENIZACOES RESCISOES") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "FUNC"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0147-FERIAS / ENCARGOS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1039";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:13";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1546") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:254";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1660") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:12";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1637") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "PENSAO ALIMENTICIA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1580") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CSRF") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "CSRF RETIDA DO MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6480") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAMCARD") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + dataMovimento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1069";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1545") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:92";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0340-ADIANTAMENTO DE SALARIOS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:144";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1553") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:91";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:403";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5071") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0093-AVARIAS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + complemento04 + " " + "-" + " " + nomeOrigem + " " + "REF. AVARIAS"  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5497") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0097-PEDAGIO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + complemento04 + " " + "-" + " " + nomeOrigem + " " + "REF. PEDAGIO"  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4857") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0229-MATERIAIS DE ESCRITORIO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + complemento04 + " " + "-" + " " + nomeOrigem + " " + "REF. MATERIAIS DE ESCRITORIO"  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "PARCELA" + " " + parcelaAtualeFinal + " " + "DO CONTRATO" + " " + complemento03 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "PARCELA" + " " + parcelaAtualeFinal + " " + "DO CONTRATO" + " " + complemento03 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FINAME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "JUROS S/ PARCELA" + " " + parcelaAtualeFinal + " " + "DO CONTRATO" + " " + complemento03 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRESTIMO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANCIAMENTOS-JUROS") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "JUROS S/ PARCELA" + " " + parcelaAtualeFinal + " " + "DO CONTRATO" + " " + complemento03 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4328") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("0450-ADIANTAMENTO DE 13 SALARIO") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:127";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6480") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ADIANTAMENTO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VIAGEM"))  historico = "" + " " + complemento04 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10009";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("3342130022132"))  historico = "TRANSFERENCIA DE" + " " + descricaoPlanoPortador + " " + "PARA" + " " + descricaoPlanoMovimento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("3166374524"))  historico = "TRANSFERENCIA DE" + " " + descricaoPlanoPortador + " " + "PARA" + " " + descricaoPlanoMovimento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("6067-4"))  historico = "TRANSFERENCIA DE" + " " + descricaoPlanoPortador + " " + "PARA" + " " + descricaoPlanoMovimento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("000054620"))  historico = "TRANSFERENCIA DE" + " " + descricaoPlanoPortador + " " + "PARA" + " " + descricaoPlanoMovimento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("5027"))  historico = "TRANSFERENCIA DE" + " " + descricaoPlanoPortador + " " + "PARA" + " " + descricaoPlanoMovimento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("50270"))  historico = "TRANSFERENCIA DE" + " " + descricaoPlanoPortador + " " + "PARA" + " " + descricaoPlanoMovimento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ESCRITURACAO"))  historico = "" + " " + complemento03 + " " + "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + "INVERTECONTA" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + nomeOrigem + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:227";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV"))  historico = "PAGAMENTO GUIA ISS REFERENTE" + " " + mesAnoAnterior + " " + "REF. NF" + " " + documento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("ICMS"))  historico = "PAGAMENTO GNRE REF. DACTE N." + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERENCIAL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIQ"))  historico = "PAGAMENTO ICMS DIFERENCA ALIQUOTA MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS A RECOLHER"))  historico = "PAGAMENTO DAE ICMS MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANT") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS"))  historico = "PAGTO FERIAS CFE REC."  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("AVARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STOQUE"))  historico = "RECUPERACAO DESPESAS REF. NF" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENT"))  historico = "PAGAMENTO PENSAO ALIMENTICIA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("SALARIOS A PAGAR"))  historico = "PAGTO FUNCIONARIOS CONF FOLHA MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1661") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGTO" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("REC") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PREST"))  historico = "PAGAMENTO DAM ISS RETIDO MES" + " " + mesAnoAnterior + " " + "REF. NF" + " " + documento + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MULTAS DE TRANSITO"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISOES A PAGAR"))  historico = "PAGTO RESCISAO DE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA - DMAE"))  historico = "PAGAMENTO DMAE DEP. MUNICIPAL DE AGUA E ESGOTO MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SERVICOS PRESTADOS"))  historico = "PAGAMENTO IRRF REFERENTE MES" + " " + mesAnoAnterior + " " + "REF. NOTAS FISCAIS"  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("COFINS A RECOLHER"))  historico = "PAGAMENTO GUIA COFINS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PIS A RECOLHER"))  historico = "PAGAMENTO GUIA PIS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS"))  historico = "PAGAMENTO DARF PARCELAMENTO PIS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO COFINS"))  historico = "PAGAMENTO DARF PARCELAMENTO PIS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("PARCELAMENTO PIS/COFINS PGFN"))  historico = "PAGAMENTO DARF PARCELAMENTO PIS/COFINS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (!StringUtil.removeSpecialCharsToUC(complemento04).contains("HISTORICO PADRAO OTTIMIZZA"))  historico = "NF" + " " + complemento04 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:32";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (!StringUtil.removeSpecialCharsToUC(complemento04).contains("HISTORICO PADRAO OTTIMIZZA"))  historico = "NF" + " " + complemento04 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1014";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("MATRIZ")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("CUSTODIO")) {
        retornaFilial = "2";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("BOA") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ESPERANCA")) {
        retornaFilial = "5";
    }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACERTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,0," / "); //ROT-2017-112055
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,"- "); //ROT-2017-112055

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ ERP-BYSOFT @##############################################*/
public HashMap readBysoftIBroker(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
          
	return mapaVariavel;
}						
           
        


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoAme(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
      
    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  

    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	
    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readCartaoNutricardPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
			   
   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   

   return mapaVariavel;
}


 /*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
        public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
           
				 return mapaVariavel;
            }


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}



/*#############################################@ ERP-CITEL @##############################################*/
public HashMap readCitelSoftwareFrmRelCtrTit(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


public HashMap readErpDetalhamentoSispagItau(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoAilosCiviaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readExtrato_ApliBB_PDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
	return mapaVariavel;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
 }


/*#############################################@ EXTRATO-ASAAS-EXCEL @##############################################*/
public boolean readExtratoAsaasExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   


   return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


	
/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBKBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBMGPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

     
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-BRASILIA-EXCEL @##############################################*/
public boolean readExtratoBrasiliaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBTGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}
 


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


//CONVERSOR ANTIGO

public boolean readExtratoCiviaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoCoraExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
	
}


public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoCrehnorPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


public boolean readExtratoEfiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	  return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


		
		/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}








public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
 }


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoHSBCExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	

    return true;
}


public boolean readExtratoHSBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


		
		/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoInfinitePayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
     
    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercantilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNextPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoOteroBankExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPagPixBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


				
		/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoPinkPayPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPlannerPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPoupeCrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  
  return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
 
    return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
   
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


public boolean readExtratoSicoobCapitalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readExtratoSicoobConveniosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public boolean readExtratSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
  
    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoSulcrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}



public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

 

	return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}



//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


		
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BB-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_SicoobPDFF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}




public HashMap readFrancesinhaCresolPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readFrancesinhagrupoAilosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readExtratoItauCsvFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}



public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSafraPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


public HashMap readFrancesinhaSantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSisprimeExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


//2312-024960
public HashMap readFrancesinhaUnicrediPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinhaBanrisulTXT(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoXLSX (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readFrancesinha_CefPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-INTERFOC @##############################################*/
public HashMap readInterfocGenesysMCP002(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readPosto_Ravanello(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ ERP-LINX @##############################################*/

public HashMap readLinx_AutoSystem_ExtratoBancario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_ContasPagas(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_MovimentacaoContas(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_Recebimentos(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ ERP-SOFTPHARMA @##############################################*/
public HashMap readLinxSoftpharmaFCPA200(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


public HashMap readNotasCorretagemXP(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPR00308(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}

/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPR00428(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}

/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPRX004815(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}




/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-SINDISOFT @##############################################*/
public HashMap readSindiSoft(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


/*#############################################@ ERP-SISJURIS @##############################################*/
public HashMap readSisjuriBCSFinanceiro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
	
    return mapaVariavel;
}


/*#############################################@ ERP-SYSTEXTIL @##############################################*/
public HashMap readSystextil(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}

