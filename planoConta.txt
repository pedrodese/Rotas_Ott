	// *** ALTERAR AQUI
	//Alterado no dia 27/06/2023 para teste de volume na requisição do oauth
	//public static final String SERVER_OAUTH			= "https://ottimizza-oauth-server.herokuapp.com";;
	public static final String SERVER_OAUTH			= "https://opcd-oauth-server.herokuapp.com";
  
	public static final String USER_OAUTH			= "rota.bussola@ottimizza.com.br";
	public static final String PWD_OAUTH			= "12345";
	
	
//################################################################################################################
//################################################################################################################
//////////////////////////////////////
//  TODAS AS RPS  // ENDPOINT B     //
//////////////////////////////////////
public void runEndPointBPlanoConta(Object dataIn, InoutLogger logger) throws Exception {
	List list = (List) dataIn;

    // Inicilizacao de Variaveis
    //###################################
    String nomeContabilidade = ""; 
    String contabilidadeAnterior = "";
    
    String codEmpresa = "";       //Chave
    String nomeEmpresa = "";       //Chave
    String descricaoConta = "";   //Chave
    String contaContabil = "";
    String contaAnalitica = "";
    String descricaoContinua = "";
    //###################################
    StringBuilder contasGeradas = new StringBuilder();
    DataBase dbIOCont = null;
	CloudAPI apiWeb = new CloudAPI(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);

    int contador = 0;

	JSONArray planoArray = new JSONArray();
	JSONObject planoObj = new JSONObject();
	
	
    try {
        for (int i = 0; i < list.size(); i++) {
            // Obtem a mensagem da FILA
            FilaInout  filaInout = (FilaInout) list.get(i);
            String message = filaInout.getMessage(); 
            JSONObject msg = new JSONObject(message);
            
            nomeContabilidade = msg.optString("NOMECONTABILIDADE");

            // Carrega as propriedades
            SysProperties props = SysProperties.getInstance();
            props.load("contabil/" + nomeContabilidade + "/contabil.properties");

            if (!contabilidadeAnterior.equals(nomeContabilidade)) {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                }

                // Conecta na Base de Dados IO_CONTABIL.
                dbIOCont = connectIOContabil(props, logger); 
                if (dbIOCont == null || !dbIOCont.connectionIsValid()) {
                    throw new Exception("EndpointB: Nao foi possivel conectar no BANCO IO_CONTABIL");
                }
            }
            contabilidadeAnterior = nomeContabilidade;			
            
            codEmpresa = msg.optString("EMPRESA");  
            nomeEmpresa = msg.optString("NOMEEMPRESA");  
            descricaoConta = msg.optString("DESCRICAOCONTA");
            contaContabil = msg.optString("CONTACONTABIL");
            contaAnalitica = msg.optString("CONTAANALITICA");
            descricaoContinua = msg.optString("DESCRICAOCONTINUA");			
			String cnpjContabilidade = props.get("CONTABILIDADE_CNPJ");
			String cnpjEmpresa       = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
			//#2303-002125
			if(nomeContabilidade.toUpperCase().contains("CONTIBEMASSESSORIA")) {
				codEmpresa = "000";
			}
			//2312-024058
			if(nomeContabilidade.toUpperCase().contains("SETEC")) {
				codEmpresa = "000";
			}
			// logger.logInfo("empss " + nomeEmpresa + " | " + );
			// logger.logInfo("contaContabil ->  " + contaContabil + " | " + "contasGeradas -> " + contasGeradas.toString());
			if(contasGeradas.toString().contains("#" + contaContabil + "#")) continue;
			contasGeradas.append("#" + contaContabil + "#");
			
			
            long tot = dbIOCont.sql("SELECT COUNT(*) FROM io_PlanoConta WHERE CODEMPRESA=? AND CONTACONTABIL=?")
            .param(codEmpresa)
            .param(contaContabil)
            .queryCount();
            
            if (tot == 0) {
                dbIOCont.insert("io_PlanoConta")
                .fields("CODEMPRESA,CONTACONTABIL,DESCRICAOPLANO,CONTAANALITICA,DESCRICAOCONTINUA")
                .param(codEmpresa)
                .param(contaContabil)
                .param(descricaoConta)
                .param(contaAnalitica)
                .param(descricaoContinua)
                .execute();
            } else {
                dbIOCont.update("io_PlanoConta")
                .fields("DESCRICAOPLANO,CONTAANALITICA,DESCRICAOCONTINUA")
                .where("CODEMPRESA =? AND CONTACONTABIL =?")
                .param(descricaoConta)
                .param(contaAnalitica)
                .param(descricaoContinua)
                .param(codEmpresa)
                .param(contaContabil)
                .execute();
            }
			
			// body para enviar plano de contas para nuvem
			try {
			
 
				
				planoObj = new JSONObject();			

				planoObj.put("cnpjContabilidade", cnpjContabilidade);
				planoObj.put("cnpjEmpresa", cnpjEmpresa);
				planoObj.put("classificacao", contaAnalitica);
				planoObj.put("contaReduzida", contaContabil);
				planoObj.put("descricaoConta",descricaoConta);			
 
				planoArray.put(planoObj); 
				
				contador++;
				if (contador == 100) {
				
					JSONObject planoEnvio = new JSONObject();			
					planoEnvio.put("plano", planoArray);

					// descomentar quando tiver sido resolvido problema de patch
					String retornoApi = apiWeb.genericPost(planoArray, "/api/v1/plano_contas/importar?ultimo=false", "https://integrador-contabil.herokuapp.com",logger);
					contador = 0;
					
					planoArray = new JSONArray();
				}
				
			} catch (Exception xx) {
				logger.logInfo("TENTANDO IMPORTAR PLANO " + xx.getMessage());
			}


        } // FIM - For da leitura dos arquivos na fila.
		
		if (contador > 0) {
 
			JSONObject planoEnvio = new JSONObject();			
			planoEnvio.put("plano", planoArray);
			
 			try {
				String retornoApi = apiWeb.genericPost(planoArray, "/api/v1/plano_contas/importar?ultimo=true", "https://integrador-contabil.herokuapp.com",logger);
			} catch (Exception xx) {
				logger.logInfo("TRYING	 IMPORTAR PLANO " + xx.getMessage());
			}
		}


    } catch (Exception e) {
        logger.logError("EndpointB:", e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception e) {}
        }
	}
}
 

 
 
//################################################################################################################
//################################################################################################################


 
//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//         Implementa o metodo ImportaPlanoConta (@ImportaPlanoPadrao).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoConta(InoutLogger logger) throws Exception {
    
    
    JSONArray records = new JSONArray();
    // Inicializacao de Variaveis
	JSONObject jDadosEmpresa = new JSONObject();
   	
    String nomeContabilidade = "";
    String erpContabilidade = "";
    String nomeEmpresa = "";
    String codEmpresa = "";
    
    boolean methodFound = false;
    
    // Diretorios Ottimizza padrões 'ImportaPlanoContas'.
    File dirImportaPlanoContas = new File(RouteEngine.INOUT_HOME + "/contabil/Ottimizza/ImportaPlanoContas");
	File bkpImportaPlanoContas = new File(RouteEngine.INOUT_HOME + "/contabil/Ottimizza/ImportaPlanoContas/Processado");
    
    // Criar diretorio ottimizza/ImportaPlanoContas se não existe.
    if (!bkpImportaPlanoContas.getParentFile().exists()) bkpImportaPlanoContas.getParentFile().mkdirs();
    
    try {
    	FilesLoader filesLoader = new FilesLoader(dirImportaPlanoContas.getAbsolutePath(), ".txt,.TXT", bkpImportaPlanoContas.getAbsolutePath(), true, logger);
    	filesLoader.loadFiles();
        
        // Captura de Dados a serem passados ao metodo PlanoContas do ERP da Contabilidade.
        for (MemoryFile memFile: filesLoader.getMemFiles()) {
            
            methodFound = false;
            
            while(memFile.hasNextLine()) {
                try {
                    String line = StringUtil.removeSpecialChars(memFile.nextLine());
                    if(line.contains("NOME") && line.contains("CONTABILIDADE")) {
                        nomeContabilidade = line.substring(line.indexOf(":") + 1).trim();
                    }
                    if(line.contains("NOME") && line.contains("EMPRESA")) {
                        nomeEmpresa = line.substring(line.indexOf(":") + 1).trim();
                    }
                    if(line.contains("CODIGO") && line.contains("EMPRESA")) {
                        codEmpresa = line.substring(line.indexOf(":") + 1).trim();
                    }
                } catch (Exception e1) {
                    logger.logError("Error trying to read line ", e1);
                }
            }

    	    if(nomeContabilidade.equals("")) continue;

            // Carregar properties da Contabilidade.
    		SysProperties properties = SysProperties.getInstance();
    	    properties.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
            
			erpContabilidade  = properties.get("ERP_CONTABILIDADE");
			String erpEmpresa = properties.get(nomeEmpresa.toUpperCase() + "_ERP_EMPRESA");
			
			if (erpEmpresa != null && !erpEmpresa.equals("")) erpContabilidade = erpEmpresa;
			
            if(nomeEmpresa.toUpperCase().contains("ROITCONTAB")) erpContabilidade = "DOMINIO";
			
            // ---------------------------------------------------------------------------------------------------------
            logger.logInfo("Nome Empresa  ----------  " + nomeEmpresa);
            logger.logInfo("Cod Empresa  -----------  " + codEmpresa);  
            logger.logInfo("Nome Contabilidade  ----  " + nomeContabilidade);
            logger.logInfo("ERP Contabilidade  -----  " + erpContabilidade);
            // ---------------------------------------------------------------------------------------------------------
   
            jDadosEmpresa.put("NOME_CONTABILIDADE", nomeContabilidade);
            jDadosEmpresa.put("ERP_CONTABILIDADE", erpContabilidade);
            jDadosEmpresa.put("NOME_EMPRESA", nomeEmpresa);
            jDadosEmpresa.put("COD_EMPRESA", codEmpresa);
            
            // Como GeraArquivo.script possui apenas um metodo GeraArquivoSci 
            // Ele verifica se nome do metodo contem nome erp,
            // Se erp for "SCI UNICO" ele nao ira encontrar, pois metodo possui nome -> SCIUnico
            if (erpContabilidade.toUpperCase().contains("SCI") && erpContabilidade.toUpperCase().contains("UNICO")) {
                erpContabilidade = "SCIUnico";
            }
            
			//if(erpContabilidade.toUpperCase().contains("CONSISANET")) continue;

		    if(erpContabilidade.toUpperCase().contains("SULPROG")) {
			 erpContabilidade = "SULPROG";
            }
            if(erpContabilidade.toUpperCase().contains("FORTES")) {
			 erpContabilidade = "FORTES";
            }
			if(erpContabilidade.toUpperCase().contains("EXACTUS")) {
			 erpContabilidade = "EXACTUS";
            }
			if(erpContabilidade.toUpperCase().contains("SIEC")) {
			 erpContabilidade = "SIEC";
            }
			if(erpContabilidade.toUpperCase().contains("MAKROSYSTEM")) {
			 erpContabilidade = "MAKROSYSTEM";
            }
			if(erpContabilidade.toUpperCase().contains("PROSIS")) {
			 erpContabilidade = "PROSIS";
            }
           
            // Como GeraArquivo.script possui apenas um metodo GeraArquivoWk
            // Se erp for "WK SOFTWARE" ele nao ira encontrar, pois metodo nao possui o nome SOFTWARE
            if(erpContabilidade.toUpperCase().contains("WK") && erpContabilidade.toUpperCase().contains("SOFTWARE")) {
                erpContabilidade = "WK";
            }
			
			if(erpContabilidade.toUpperCase().contains("PROSYST") && erpContabilidade.toUpperCase().contains("CONTABIL")) {
				erpContabilidade = "PROSYST";
			}
            
			/*
			if (erpContabilidade.toUpperCase().equals("QUESTOR")) {
				runEndPointAPlanoContaQUESTOR(jDadosEmpresa, logger);
				continue;
			}
			if (erpContabilidade.toUpperCase().equals("SCI")) {
				runEndPointAPlanoContaSCI(jDadosEmpresa, logger);
				continue;
			}
			if (erpContabilidade.toUpperCase().equals("SCIUNICO")) {
				runEndPointAPlanoContaSCIUnico(jDadosEmpresa, logger);
				continue;
			}
			if (erpContabilidade.toUpperCase().equals("DOMINIO")) {
				runEndPointAPlanoContaDOMINIO(jDadosEmpresa, logger);
				continue;
			}
			if (erpContabilidade.toUpperCase().equals("PROSOFT")) {
				runEndPointAPlanoContaPROSOFT(jDadosEmpresa, logger);
				continue;
			}
			*/
			if (erpContabilidade.toUpperCase().contains("CUCA") && erpContabilidade.toUpperCase().contains("FRESCA")) erpContabilidade = "CUCAFRESCA";
			
            try {
				
				
				// limpar o plano de contas, jogar arquivo vazio nome: LIMPA_PLANO_DE_CONTA
				File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
				File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
				File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
				
				
				if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		

					
					File[] files = dirEmpresaDePara.listFiles(); 
					
					for (File file: files) { // listDePara
						
						try {
							
							
							if (file.isFile() && file.getName().toUpperCase().contains("LIMPA_PLANO_DE_CONTA")) {
								
								
								// Conecta na Base de Dados IO_CONTABIL.
								SysProperties props = SysProperties.getInstance();
								props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
								DataBase dbIOCont = null;
								try {
									dbIOCont = connectIOContabil(props, logger); 
									if (dbIOCont == null || !dbIOCont.connectionIsValid()) {
										throw new Exception("EndpointB: Nao foi possivel conectar no BANCO IO_CONTABIL");
									}
									try {
										dbIOCont.delete("IO_PLANOCONTA")
										.where("CODEMPRESA like ?")
										.param(codEmpresa)
										.execute();
									} catch (Exception e) {
										logger.logDebug("ERRO AO LIMPAR PLANO DE CONTAS\n" + e.getMessage());
									}
								} finally {
									if (dbIOCont != null) {
										dbIOCont.closeConnection();
									}
								 }
							}    
						} catch (Exception e) {
							//TODO: handle exception
						}
					}
				}
				
				 logger.logInfo("Teste PC ERP -> "+erpContabilidade+" - Nome Contabilidade -> "+nomeContabilidade);
			
                // Classe Principal SC
                Class<?> sc = this.getClass();

                // Instancia da Classe Principal
                Object scInstance = sc.newInstance();

                // Get all Methods from superclass 'SC'.
                java.lang.reflect.Method[] methods = sc.getDeclaredMethods();

                // ForEach Method from superclass.
                for (java.lang.reflect.Method method : methods) {
                    String methodName = method.getName();
                    // logger.logInfo("METHOD NAME === "+methodName);
                    if (methodName.contains("PlanoConta")) {
                        if(methodName.contains(erpContabilidade)) {
                            // 
                            if(methodName.contains("SCI") && methodName.contains("Unico") && !erpContabilidade.contains("Unico")) {
                                continue;
                            }
                            methodFound = true;
                        }
                    }
                    if(methodFound) {
                        // Invoca metodo PlanoContas do ERP da Contabilidade.
                        logger.logInfo(String.format("Invoking method %s...", methodName)); // Debug
                        
                        JSONArray jTempArray = new JSONArray();                        
                        jTempArray = ((JSONArray) method.invoke(scInstance, jDadosEmpresa, logger));
                        
                        for (int i = 0; i < jTempArray.length(); i++) {
                            records.put(jTempArray.get(i));
                        }
                        
                        break;
                    }
                }
            } catch (Exception e2) {
                logger.logError("Error trying to invoke method 'PlanoContas'.", e2);
            }
        }
    } catch(Exception e) {
        logger.logError("Error: ", e);
    }
    
    
    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@NASAJON).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaNASAJON(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    
	File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

    if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();
                        for (MemoryFile memFile: fileLoader.getMemFiles()) {

                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {

                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    
                                    String line = memFile.nextLine();
                                    if (line.trim().equals("")) continue;
                                    
                                    DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(5);
                                    if(DESCRICAOCONTA.equals("")) DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(6);
                                    if(DESCRICAOCONTA.length() < 3) continue;
                                    
                                    CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(1).trim();
                                    CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(1).trim();
                                    
                                    DESCRICAOCONTINUA = geraNomeContinuo(DESCRICAOCONTA);
                                    
                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);                                    
                                    
                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE 
                        } //FIM - For 
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For            
    }

    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Cordilheira).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaCORDILHEIRA(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    
	File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

       
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
			
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {	 

		
			File[] files = dirEmpresaDePara.listFiles(); 
	
         
			for (File file: files) { // listDePara
				try {				
 								
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										
										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(2);
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										if(DESCRICAOCONTA.length() < 3) continue;
										
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(1);
										if(CONTACONTABIL.contains("-")) CONTACONTABIL = CONTACONTABIL.replaceAll("-","");
										CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(0);
										CONTAANALITICA	= CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
										if (CONTAANALITICA.contains("TOTAL")) continue;
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);                                    
										
										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE 
							} //FIM - For 
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For            
			}
    }

    return records;
}

public JSONArray runEndPointAPlanoContaLEDWARE(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {


    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	for (int xx=0;xx<2;xx++) {
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		  
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;

										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(14);
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										// CONTACONTABIL = CONTACONTABIL.replaceAll(".","");
										 CONTAANALITICA = CONTACONTABIL;

										 DESCRICAOCONTINUA = DESCRICAOCONTA;
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
	
	// logger.logDebug("ADD ao records " + records.length());
    return records;
}





//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Questor).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaQUESTOR(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
    JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
	
	int icomplemento01  = -1;
	int idescricaoConta = -1;
	int	icontaAnalitica = -1;
	int	icontaContabil = -1;
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	for (int xx=0;xx<2;xx++) {
		// quando xx == 0 - plano de contas tradicional em .xlsx
		// quando xx == 1 - plano de contas importado automaticamente do questor SYN  ou csv do questor
		// para nao dar conflito com o .csv dos depara, o arquivo .csv de plano eh movido para a pasta /inout/contabil/ottimizza/planocontas
		// se o nome do arquivo contiver PLANO_CONTAS_QUESTOR significa que veio do SYN. Caso contrario, foi importado pela manualmente.
		// xx == 1 ==>>      9994;1;1;"1";"ATIVO";1;1;1;2  empresa;conta reduzida;tipo S/A;Classificacao;descricao  quando vem do SYN
 		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		 
			
			File[] files = dirEmpresaDePara.listFiles();
			
			for (File file: files) { // listDePara
			
				try {
					
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
							
							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");
								while (memFile.hasNextLine()) {
									
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";
										
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialCharsToUC(line);
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										if(line.contains("APELIDO CONTA") && line.contains("CLASSIFICACAO")){
											for(int i =0; i < memFile.getFieldsSize()-1; i++){
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CLASSIFICACAO")) icomplemento01 = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA") && !memFile.getStringFieldRemoveEspCharsUpper(i).contains("APELIDO")) icontaContabil = i;
											}
											continue;
										}
										
										if(icomplemento01 >= 0){
											complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);
										}
										if(complemento01.contains("   ")) {
											CONTAANALITICA	= complemento01.substring(0,complemento01.indexOf("   ")).trim();
											DESCRICAOCONTA	= complemento01.substring(complemento01.indexOf("   ")+1).trim();
										} else if(complemento01.contains("  .  ")){
											CONTAANALITICA	= cutString(complemento01, 0 , "  .  ");
											DESCRICAOCONTA	= cutString(complemento01, "  .  ");
										} else{ //2311-023587
											String auxiliar = complemento01.replaceAll("[0-9]", "9");
											if(complemento01.contains(".")){
												if(quantityOf(complemento01, ".") >= 5 && quantityOf(auxiliar, "9") >= 10){
													if(quantityOf(complemento01, ".") >= 6 && quantityOf(auxiliar, "9") >= 13){
														CONTAANALITICA = cutString(complemento01, 0, 18);
														DESCRICAOCONTA = cutString(complemento01, 19);
													} else{
														CONTAANALITICA = cutString(complemento01, 0, 14);
														DESCRICAOCONTA = cutString(complemento01, 15);
													}	
													
													if (CONTAANALITICA.contains(" ")) {
														CONTAANALITICA = cutString(CONTAANALITICA, 0, " ");
													}
												}else{
													CONTAANALITICA = cutString(complemento01, 0, " ");
													DESCRICAOCONTA = cutString(complemento01, " ");
													
													if(CONTAANALITICA.matches("([0-9]+[.])+([0-9]+)?")){
														//logger.logInfo("Entra no matches");
													} else {
														String resto = cutString(CONTAANALITICA, CONTAANALITICA.lastIndexOf(".")+1);
														CONTAANALITICA = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
														DESCRICAOCONTA = resto + " " + DESCRICAOCONTA;
													}
												}												
											}else{
												CONTAANALITICA = cutString(complemento01, 0, " ");
												DESCRICAOCONTA = cutString(complemento01, " ");
											}
										}
										
										// leitura do plano que vem do Questor SYN
										if (file.getName().toUpperCase().contains("PLANO_CONTAS_QUESTOR")) {
											CONTAANALITICA   = memFile.getStringFieldRemoveEspCharsUpper(3);
											DESCRICAOCONTA   = memFile.getStringFieldRemoveEspCharsUpper(4);
											CONTACONTABIL    = memFile.getStringFieldRemoveEspCharsUpper(1);
											String tipoConta = memFile.getStringFieldRemoveEspCharsUpper(2);
											tipoConta        = tipoConta.replaceAll("\"","");
											DESCRICAOCONTA   = DESCRICAOCONTA.replaceAll("\"","");
											
											if (tipoConta.equals("1")) {
												// logger.logInfo("CTN AQ3");
												continue; // ignora contas sinteticas
											}
										}
										
										if(line.contains("NOME") && line.contains("CLASSIFICACAO") && line.contains("SALDO")){
											for(int a =0; a < memFile.getFieldsSize()-1; a++){
												if(memFile.getStringFieldRemoveEspCharsUpper(a).contains("CLASSIFICACAO")){
													icontaAnalitica = a;
												}
												if(memFile.getStringFieldRemoveEspCharsUpper(a).contains("NOME")){
													idescricaoConta = a;
												}
												if(memFile.getStringFieldRemoveEspCharsUpper(a).equals("CODIGO")){
													icontaContabil = a;
												}
											}
											continue;
										}
										
										if(icomplemento01 < 0 && memFile.getFieldsSize() > 3){
											DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
											CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										}
										
										if(CONTAANALITICA.equals("")){
											continue;
										}
										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
										if(CONTACONTABIL.contains("-")) CONTACONTABIL = CONTACONTABIL.substring(0,CONTACONTABIL.indexOf("-"));
										
										CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("\"","");
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();
										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
										// logger.logInfo("ENTROU165");
										//logger.logInfo(records.toString());
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
	
	// logger.logInfo("ADD ao records " + records.length());
    return records;
}






//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@SCIUnico).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
/*public JSONArray runEndPointAPlanoContaSCIUnico(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
	
	// Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean padrao = false;
	
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

						int idescricao = 6;
						int	ianalitica = 2;
						int	iccontabil = 0;

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                memFile.setFieldSeparator("\\|");

                                while (memFile.hasNextLine()) {
                                    try {
                                        String DESCRICAOCONTA = "";
                                        String CONTACONTABIL  = "";
                                        String CONTAANALITICA = "";
                                        String DESCRICAOCONTINUA = "";
                                        
                                        String line = memFile.nextLine();
										
										if(memFile.getStringFieldRemoveEspCharsUpper(0).startsWith("BALANCETE DE")){
											idescricao = 7;
											ianalitica = 1;
											iccontabil = 0;
										}
										
                                        line = StringUtil.removeSpecialChars(line).toUpperCase();
                                        String[] fields = line.split(";");

                                        if(line.lastIndexOf("LISTAGEM DAS CONTAS CONTABEIS") > line.indexOf("LISTAGEM DAS CONTAS CONTABEIS")) padrao = true;
                                        if(padrao) {
                                            if(line.trim().equals(""))	continue;
                                            if(line.length() < 30)		continue;
                                            if(line.lastIndexOf("LISTAGEM DAS CONTAS CONTABEIS") > line.indexOf("LISTAGEM DAS CONTAS CONTABEIS")) continue;
                                            
                                            CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(2);
                                            CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                            if(CONTAANALITICA.equals("")) continue;
                                            
                                            CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
                                            
                                            DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(3);
                                            if(DESCRICAOCONTA.equals("")) DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(4);
                                            DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                            DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                            
                                            DESCRICAOCONTINUA = DESCRICAOCONTA;
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                        } 
										else {
                                            DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricao).trim();
                                            //if(DESCRICAOCONTA.equals("")) DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricao+1).trim();
                                            if(DESCRICAOCONTA.equals("")) continue;
											
                                            DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                            DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                            
                                            if(line.trim().equals("")) continue;
                                            if(line.contains("SCI AMBIENTE CONTABIL")) continue;
                                            //if(line.contains("IMPRESSAO DE CAMPOS DA CONSULTA")) continue;
                                            if(line.contains("APELIDO") && line.contains("GRUPO")) continue;
                                            if(line.contains("CODIGO") && line.contains("CLASSIFICACAO")) continue;
                                            
                                            CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);
                                            CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                            if(CONTAANALITICA.equals("")) continue;
                                            
                                            CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(iccontabil).trim();
                                            if(!Character.isDigit(CONTACONTABIL.charAt(0))) continue;

											DESCRICAOCONTINUA = DESCRICAOCONTA;
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");                                                													
                                            DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                        }
                                        //---------------------------------------------------//
                                        //Grava registro do Movimento Contabil do Pagamento. //
                                        //---------------------------------------------------//
                                        JSONObject js = new JSONObject();

                                        js.put("NOMECONTABILIDADE", nomeContabilidade);
                                        js.put("EMPRESA", codEmpresa); 
										js.put("NOMEEMPRESA", nomeEmpresa);
                                        js.put("CONTACONTABIL", CONTACONTABIL);
                                        js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                        js.put("CONTAANALITICA", CONTAANALITICA);
                                        js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                        records.put(js);
                                    } catch (Exception e) {
                                        logger.logError("EndpointA: ", e);
                                    }
                                } //FIM - WHILE
                            } //FIM - For
                        } 
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                    
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }
    
	return records;
}

*/

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@SCIUnico).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSCIUnico(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
	int idescricaoConta = 0;
	int	icontaAnalitica = 0;
	int	icontaContabil = 0;
	boolean naoLeMais = false;
	
	// Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean padrao = false;
	
	
	for (int xx=0;xx<2;xx++) {
		// logger.logInfo("ENTROU2");
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			// logger.logInfo("ENTROU3");
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
	
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {	
			logger.logInfo("ENTROU IF");
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();


							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								if(extensaoPlano.contains("csv")) memFile.setFieldSeparator("\\;");
								if(extensaoPlano.contains("xlsx")) memFile.setFieldSeparator("\\|");

									while (memFile.hasNextLine()) {
										try {
											String DESCRICAOCONTA = "";
											String CONTACONTABIL  = "";
											String CONTAANALITICA = "";
											String DESCRICAOCONTINUA = "";

											String line = memFile.nextLine();
											line = StringUtil.removeSpecialCharsToUC(line);
											//logger.logInfo("LOG LINE - " + line);

											if(line.contains("LISTAGEM") && line.contains("CONTAS") && line.contains("CONTABEIS")){
												naoLeMais = true;
											}

											if(line.contains("CPF:") && line.contains("CRC:")){
												continue;
											}

											if(line.contains("CODIGO") && line.contains("NOME")) {
												icontaContabil  = -1;
												icontaAnalitica = -1;
												idescricaoConta = -1;
												naoLeMais = false;
												
												for (int i = 0; i < memFile.getFieldsSize(); i++) {
													if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("NOME"))            idescricaoConta  = i;
													if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CLASSIFICA"))      icontaAnalitica  = i;
													if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CODIGO"))         icontaContabil   = i;
												}
												//logger.logInfo("CONTA CONTABIL " + icontaContabil + " CONTA ANALITICA " + icontaAnalitica + " DESCRICAO CONTA " + idescricaoConta);
												continue;
											}

											if(naoLeMais){
												continue;
											}

											for (int i = 0; i < memFile.getFieldsSize(); i++) {
												if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) {
													if (i == icontaAnalitica) {
														CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(i);
													}
													if (i == icontaContabil) {
														CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(i);
													}
													if (i == idescricaoConta) {
														DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
													}
												}
											}

											line = StringUtil.removeSpecialChars(line).toUpperCase();
											String[] fields = line.split(";");

											if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
											if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue;
											if(DESCRICAOCONTA.equals("")) continue;
											if(CONTAANALITICA.equals("")) continue;
											if(CONTACONTABIL.equals("")) continue;

											CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
											DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
											DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");

											if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

											DESCRICAOCONTINUA = DESCRICAOCONTA;
											DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
											DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
											DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
											DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
											DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
											DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
											
											if (CONTACONTABIL.length() > 99) continue;
											

											
											//---------------------------------------------------//
											//Grava registro do Movimento Contabil do Pagamento. //
											//---------------------------------------------------//
											JSONObject js = new JSONObject();

											js.put("NOMECONTABILIDADE", nomeContabilidade);
											js.put("EMPRESA", codEmpresa);
											js.put("NOMEEMPRESA", nomeEmpresa);
											js.put("CONTACONTABIL", CONTACONTABIL);
											js.put("DESCRICAOCONTA", DESCRICAOCONTA);
											js.put("CONTAANALITICA", CONTAANALITICA);
											js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

											records.put(js);
										} catch (Exception e) {
											logger.logError("EndpointA: ", e);
										}
									} //FIM - WHILE
								 //FIM - For
							} 
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
		
	}
	return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@SCI).            //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSCI(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
	// Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	boolean padrao = false;
	
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {

                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
                                    String[] fields = line.split(";");
                                    if(line.lastIndexOf("LISTAGEM DAS CONTAS CONTABEIS") > line.indexOf("LISTAGEM DAS CONTAS CONTABEIS")) padrao = true;
                                    if(padrao){
                                        if(line.trim().equals(""))	continue;
                                        if(line.length() < 30)		continue;
                                        if(line.lastIndexOf("LISTAGEM DAS CONTAS CONTABEIS") > line.indexOf("LISTAGEM DAS CONTAS CONTABEIS")) continue;
                                        
                                        CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(2);
                                        CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                        if(CONTAANALITICA.equals("")) continue;
                                        
                                        CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
                                        
                                        DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(3);
                                        if(DESCRICAOCONTA.equals("")) DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(4);
                                        DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                        DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                        
                                        DESCRICAOCONTINUA = DESCRICAOCONTA;
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                    }else{
                                    
                                        if (line.trim().equals("")) continue;
                                        if(line.contains("CONSULTA DO PLANO DE CONTAS")) continue;
                                        if(line.contains("CODIGO") && line.contains("CLASSIFICACAO")) continue;
                                        
                                        CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(1);
                                        if(CONTAANALITICA.equals("")) continue;
                                        
                                        CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
                                        DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(3);
                                        
                                        CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                        DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                        DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                        
                                        DESCRICAOCONTINUA = DESCRICAOCONTA;
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                        DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                    }
                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa); 
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        } //FIM - For
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@MMBuilders).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaMMBUILDERS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    int icontaAnalitica = -1;
                    int icontaContabil  = -1;
                    int idescricaoConta = -1;
                    
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTA = "";
                                    String DESCRICAOCONTINUA = "";
									
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
									
                                    if (line.trim().equals("")) continue;

                                    if(line.contains("CONTA") && line.contains("DESCRICAO") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("")) {
										icontaContabil  = 1;
                                        icontaAnalitica = -1;
                                        idescricaoConta = -1;
                                        for (int i = 0; i < memFile.getFieldsSize() ; i++) {
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("DESCRICAO"))     idescricaoConta = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CONTA"))         icontaAnalitica  = i;
                                        }
                                        continue;
                                    }
									
									for (int i = 0; i < memFile.getFieldsSize() ; i++) {
										if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) {
											if (i == icontaAnalitica) {
												CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
											if (i == icontaContabil) {
												CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
											if (i == idescricaoConta) {
												DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
										}
									}

                                    if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
									if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue;
									if (CONTACONTABIL.equals("")) continue;
									if (CONTAANALITICA.equals("")) continue;
									if (DESCRICAOCONTA.equals("")) continue;
									
                                    CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                    
                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa); 
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        }
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }//if - has file

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Dominio).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaDOMINIO(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	for (int xx=0;xx<2;xx++) {
		// logger.logInfo("ENTROU2");
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			// logger.logInfo("ENTROU3");
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						int icontaAnalitica = -1;
						int icontaContabil  = -1;
						int idescricaoConta = -1;
						
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								if(extensaoPlano.contains("csv")) memFile.setFieldSeparator("\\;");
                                if(extensaoPlano.contains("xlsx")) memFile.setFieldSeparator("\\|");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										int deslocamento      = 0;
												
										int auxiliar = 0;
												
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										if (line.trim().equals("")) continue;
										
										// logger.logInfo("GRAUUU " + line);

										if(line.contains("CODIGO") && line.contains("CLASSIFICA") && line.contains("NOME") && line.contains("GRAU")) {
											icontaAnalitica = -1;
											icontaContabil  = -1;
											idescricaoConta = -1;
											int contPosicoes = 0;
											for (int i = memFile.getFieldsSize()-1; i >= 0 ; i--) {
												if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(i).equals("T")) contPosicoes++;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CODIGO"))     icontaContabil  = contPosicoes;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CLASSIFICA")) icontaAnalitica = contPosicoes;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("NOME"))       idescricaoConta = contPosicoes;
											}
											
											continue;
										}
										
										int contPosicoes = 0;
										for (int i = memFile.getFieldsSize()-1; i >= 0 ; i--) {
											if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("")
												&& !memFile.getStringFieldRemoveEspCharsUpper(i).equals("S")
												&& !memFile.getStringFieldRemoveEspCharsUpper(i).equals("A")) {
												contPosicoes++;
												if (contPosicoes == icontaAnalitica) {
													CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(i);
												}
												if (contPosicoes == icontaContabil) {
													CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(i);
												}
												if (contPosicoes == idescricaoConta) {
													DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
												}
											}
										}
										if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
										 
										
										if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
										if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue;
										
										if(DESCRICAOCONTA.equals("")) continue;
										

										
										CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										
										if (DESCRICAOCONTA.length() > 200 )    DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
										if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();


										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa); 
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							}
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
						
						
						
						
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}//if - has file
	}
    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Makroweb).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaMAKROWEB(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    int icontaAnalitica = -1;
                    int icontaContabil  = -1;
                    int idescricaoConta = -1;
                    
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTA = "";
                                    String DESCRICAOCONTINUA = "";
                                    int deslocamento      = 0;
                                            
                                    int auxiliar = 0;
                                            
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
                                    if (line.trim().equals("")) continue;

                                    if(line.contains("CONTA") && line.contains("COD") && line.contains("HISTORICO")) {
                                        icontaAnalitica = -1;
                                        icontaContabil  = -1;
                                        idescricaoConta = -1;
                                        for (int i = 0; i < memFile.getFieldsSize() ; i++) {
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("COD"))           icontaContabil = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO"))     idescricaoConta = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA"))         icontaAnalitica  = i;
                                        }
										
                                        continue;
                                    }
									
									for (int i = 0; i < memFile.getFieldsSize() ; i++) {
										if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) {
											if (i == icontaAnalitica) {
												CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
											if (i == icontaContabil) {
												CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
											if (i == idescricaoConta) {
												DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
										}
									}

									
                                    if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;

                                    
                                    
									if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue;
									
									if(DESCRICAOCONTA.equals("")) continue;
									

                                    
                                    CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                    
                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        }
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }//if - has file

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Astrea).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaASTREA(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    int icontaAnalitica = -1;
                    int icontaContabil  = -1;
                    int idescricaoConta = -1;
                    
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTA = "";
                                    String DESCRICAOCONTINUA = "";
                                    
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
                                    if (line.trim().equals("")) continue;

                                    CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(1);
										
									CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(2);
										
									DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(3);
										
									if(DESCRICAOCONTA.equals("")) continue;
									
									CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                    
                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa); 
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        }
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }//if - has file

    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@WK).             //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaWK(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
    
	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    

                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
                                    String[] fields = line.split(";");
                                    if (line.trim().equals("")) continue;
                                    
                                    DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(3);
                                    if(DESCRICAOCONTA.equals("")) continue;
                                    CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
                                    if(CONTACONTABIL.startsWith("SA")) {
                                        CONTACONTABIL = "";
                                        continue;
                                    }
                                    
                                    CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(2);
                                    
                                    CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                    
                                    if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.replaceAll("\\.","").trim();
                                    
                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa); 
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        } //FIM - For
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Lider).             //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaLIDER(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {
        File[] files = dirEmpresaDePara.listFiles();

        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";


                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
                                    String[] fields = line.split(";");
                                    if (line.trim().equals("")) continue;

                                    DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(1);
									DESCRICAOCONTA	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), " ");
                                    if(DESCRICAOCONTA.equals("")) continue;

                                    CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(1);
									CONTAANALITICA	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), 0, " ");
									CONTACONTABIL	= CONTAANALITICA;
									if(CONTAANALITICA.contains(" ")){
										CONTAANALITICA = CONTAANALITICA.substring(0,CONTAANALITICA.indexOf(" "));
										DESCRICAOCONTA = DESCRICAOCONTA.substring(DESCRICAOCONTA.indexOf(" ")).trim();
									}

                                    CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");

                                    if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.replaceAll("\\.","").trim();
									//CONTACONTABIL = CONTACONTABIL.replaceAll("\\.","").trim();

                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        } //FIM - For
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}



///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (GLANDATA).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaGLANDATA(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	logger.logInfo("ENTROU GLANDATA");
	
	
	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";
	int ultimoCampoFornecedor = -1;
	
	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {
                                
                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --
                                
								String CONTACONTABIL  = "";
                                String CONTAANALITICA = "";
                                String DESCRICAOCONTA = "";
                                String DESCRICAOCONTINUA = "";
                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");
										int deslocamento      = 0;
										int icontaAnalitica   = -1;
										int icontaContabil	  = -1;
										int idescricaoConta   = -1;
										boolean naoLeMais	  = false;
										boolean ignorouSubconta = false;
										
                                        while (memFile.hasNextLine()) {

                                            try {       
                                                String line = memFile.nextLine();
                                                line = StringUtil.removeSpecialChars(line).toUpperCase();
                                                if (line.trim().equals("")) continue;
												
												if(naoLeMais) continue;
												
												
												
												CONTACONTABIL  = "";
												CONTAANALITICA = "";
												DESCRICAOCONTA = "";
												DESCRICAOCONTINUA = "";
												
												int auxiliar = 0;

                                                icontaAnalitica = 0;
                                                icontaContabil = 4;
                                                idescricaoConta = 2;
												
                                                
                                                
                                                if (!memFile.getStringField(0).equals("") && !memFile.getStringField(2).equals("") && !memFile.getStringField(4).equals("")) {
                                                    CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
                                                    CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
                                                    DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
                                                }
                                                else {continue;}
												
												
												logger.logInfo("CONTAANALITICA -> " + CONTAANALITICA);
												logger.logInfo("DESCRICAOCONTA -> " + DESCRICAOCONTA);
                                                
                                                
                                                if(DESCRICAOCONTA.equals("")) continue;
                                                                                    
                                                CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                                DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                                DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                                
                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                                
                                                if (DESCRICAOCONTA.length() > 200 )    DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
                                                if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            } catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
												
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}


///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (JB SOFTWARE).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaJBSOFTWARE(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	
	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
	String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";
	int ultimoCampoFornecedor = -1;
	
	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
				for(int iExtensao = 0; iExtensao < 2; iExtensao++){
					extensaoArquivo = ".xlsx,.XLSX";
					if(iExtensao == 1){
						extensaoArquivo = ".csv,.CSV";//yuri
						
						dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
						bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
						if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
							FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
						}
					} 

					if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {
						File[] files = dirEmpresaDePara.listFiles();

						for (File fl: files) {
							try {
								if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {
									
									//String empresa = nome.substring(0,nome.indexOf("_#"));
									//codEmpresa = nome.substring(nome.indexOf("_#")+2);
									//--- - --- -- --- - --- -- --- - --- --
									String tipoLeitura = "001";
									String CONTACONTABIL  = "";
									String CONTAANALITICA = "";
									String DESCRICAOCONTA = "";
									String DESCRICAOCONTINUA = "";
									try {
										FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
										fileLoader.loadFiles();

										for (MemoryFile memFile: fileLoader.getMemFiles()) {

											memFile.setFieldSeparator("\\|");
											if(iExtensao == 1) memFile.setFieldSeparator("\\;");

											int deslocamento      = 0;
											int icontaAnalitica   = -1;
											int icontaContabil	  = -1;
											int idescricaoConta   = -1;
											boolean naoLeMais	  = false;
											boolean ignorouSubconta = false;
											
											while (memFile.hasNextLine()) {

												try {       
													String line = memFile.nextLine();
													line = StringUtil.removeSpecialChars(line).toUpperCase();
													if (line.trim().equals("")) continue;
													
													if (line.replaceAll(" ", "").contains("PLANODECONTAS") && tipoLeitura.equals("002")) naoLeMais = true;
													if (line.contains("FOLHA:") && tipoLeitura.equals("002")) naoLeMais = false;
													//if (line.contains("FOLHA:") && tipoLeitura.equals("002")) naoLeMais = false;
													if (line.contains("FOLHA") && tipoLeitura.equals("002")) naoLeMais = false; //2311-022562
													// if (line.contains("DESC") && line.contains("SUBCONTA") && tipoLeitura.equals("002")) {
														// ignorouSubconta = true;
														// naoLeMais = true;
													// }
													
													// if (tipoLeitura.equals("002") && ignorouSubconta && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) {
														// naoLeMais = false;
														// ignorouSubconta = false;
													// }
													
													if(naoLeMais) continue;
													
													if(line.contains("CONTA") && line.contains("CLASSIFICA") 
														&& line.contains("NOME") && line.contains("FANTASIA")){
															tipoLeitura = "001";
														}
													if(line.contains("CODIGO") && line.contains("CLAS") 
														&& line.contains("CONTABIL") && line.contains("DESCRI") && line.contains("CONTA")){
															tipoLeitura = "002";
														}
													
													CONTACONTABIL  = "";
													CONTAANALITICA = "";
													DESCRICAOCONTA = "";
													DESCRICAOCONTINUA = "";
													
													int auxiliar = 0;
													
													if(tipoLeitura.equals("001")) {
														if(line.contains("CONTA") && line.contains("CLASSIFICA") 
														&& line.contains("NOME") && line.contains("FANTASIA")){
															icontaAnalitica = -1;
															icontaContabil  = -1;
															idescricaoConta = -1;
															int contPosicoes = 0;
															for (int i = 0; i < memFile.getFieldsSize() ; i++) {
																if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) contPosicoes++;
																if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("NOME") && idescricaoConta == -1)       idescricaoConta = contPosicoes;
																if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA") && !memFile.getStringFieldRemoveEspCharsUpper(i).contains("BIL") && icontaContabil == -1)       icontaContabil  = contPosicoes;
																if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CLASSIFICA") && icontaAnalitica == -1) icontaAnalitica = contPosicoes;
															}
															continue;
														}
													}
													if(tipoLeitura.equals("002")) {
														if(line.contains("CODIGO") && line.contains("CLAS") 
														&& line.contains("CONTABIL") && line.contains("DESCRI") && line.contains("CONTA")){
															icontaAnalitica = -1;
															icontaContabil  = -1;
															idescricaoConta = -1;
															int contPosicoes = 0;
															for (int i = 0; i < memFile.getFieldsSize() ; i++) {
																String campo = memFile.getStringFieldRemoveEspCharsUpper(i);
																if (!campo.equals("")) contPosicoes++;
																if (campo.contains("DESCRI") && campo.contains("CONTA") && idescricaoConta == -1)   idescricaoConta = contPosicoes;
																if (campo.contains("CODIGO") && !campo.contains("BIL") && icontaContabil == -1) icontaContabil  = contPosicoes;
																if (campo.contains("CLAS") && campo.contains("BIL") && icontaAnalitica == -1) icontaAnalitica = contPosicoes;
															}
															continue;
														}
													}
													
													int contPosicoes = 0;
													if (tipoLeitura.equals("002") && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) ultimoCampoFornecedor = -1;
													if (tipoLeitura.equals("002") && ultimoCampoFornecedor != -1) {
														DESCRICAOCONTA += " " + memFile.getStringFieldRemoveEspCharsUpper(ultimoCampoFornecedor);
														ultimoCampoFornecedor = -1;
													} else {
														for (int i = 0; i < memFile.getFieldsSize() ; i++) {
															if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("") &&
																!memFile.getStringFieldRemoveEspCharsUpper(i).equals("-")) {
																	if (ultimoCampoFornecedor == -1) {
																		contPosicoes++;
																		if (icontaAnalitica == contPosicoes) {
																			CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(i);
																		}
																		if (icontaContabil ==  contPosicoes) {
																			CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(i);
																		}
																		if (idescricaoConta ==  contPosicoes) {
																			DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
																			if (tipoLeitura.equals("002")) ultimoCampoFornecedor = i;
																		}
																		
																	} else {
																		if (i == ultimoCampoFornecedor) {
																			DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
																			ultimoCampoFornecedor = -1;
																		}
																	}
																}
														}
													}
													
												
													if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;

													if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
													if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue;
													
													if(DESCRICAOCONTA.equals("")) continue;
																						
													CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
													DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
													DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
													
													DESCRICAOCONTINUA = DESCRICAOCONTA;
													DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
													DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
													DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
													DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
													DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
													DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
													
													if (DESCRICAOCONTA.length() > 200 )    DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
													if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();

													//---------------------------------------------------//
													//Grava registro do Movimento Contabil do Pagamento. //
													//---------------------------------------------------//
													JSONObject js = new JSONObject();

													js.put("NOMECONTABILIDADE", nomeContabilidade);
													js.put("EMPRESA", codEmpresa);
													js.put("NOMEEMPRESA", nomeEmpresa);
													js.put("CONTACONTABIL", CONTACONTABIL);
													js.put("DESCRICAOCONTA", DESCRICAOCONTA);
													js.put("CONTAANALITICA", CONTAANALITICA);
													js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

													records.put(js);
												} catch (Exception e) {
													logger.logError("EndpointA: ", e);
													
												}
											} //FIM - WHILE
										} //FIM - For
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								}
							}
							catch (Exception e) {
								logger.logError("EndpointA: ", e);
							}
						} //FIM - For
					}// fim if has file
				}
            }
		} //FIM - For
	}
    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Contmatic).      //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaCONTMATIC(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load("contabil/" + nomeContabilidade + "/contabil.properties");

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        int[] abas = {0, 1, 2, 3, 4};
                        fileLoader.setSheetsToRead(abas);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {

                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {

                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    
                                    String line = memFile.nextLine();
                                    String[] fields = line.split(";");
                                    if (line.trim().equals("")) continue;
                                    if (memFile.getStringFieldRemoveEspCharsUpper(2).equals(""))continue;
                                    
                                    try{
                                        CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(0);
                                    }catch(Exception x) {
                                        logger.logDebug("erro ao buscar CONTAANALITICA");
                                    }
                                    try{
                                        DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(1);
                                    }catch(Exception x) {
                                        logger.logDebug("erro ao buscar DESCRICAOCONTA");
                                    }
                                    try{
                                        CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(2);
                                    }catch(Exception x) {
                                        logger.logDebug("erro ao buscar CONTACONTABIL");
                                    }
                                    
                                    
                                    if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
                                    if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        } //FIM - For
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }
    
    return records;
}


///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (ASPLAN).   ////////    ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaAsplan(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
					
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {
                                
                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- --- --- --- --- --- ---

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {
                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
                                                String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";
                                                
                                                String line = memFile.nextLine();
                                                if (line.trim().equals("")) continue;

                                                CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(0);
												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(1);
												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(2);
												
												if(CONTACONTABIL.equals("")) continue;
												if(DESCRICAOCONTA.equals("")) continue;
												
												DESCRICAOCONTA.replaceAll("Eamp;","&");
												CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
												if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Prosoft).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaPROSOFT(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
	boolean validaProsoft = false;
    
    // Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load("contabil/" + nomeContabilidade + "/contabil.properties");

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {

					String extensao = file.getName().substring(file.getName().lastIndexOf(".")).toLowerCase()+ "," +file.getName().substring(file.getName().lastIndexOf(".")).toUpperCase();
					
					try {
						FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".txt,.TXT", bkpEmpresaDePara.getAbsolutePath(), true, logger);
						fileLoader.loadFiles();

						for (MemoryFile memFile: fileLoader.getMemFiles()) {
							while (memFile.hasNextLine()) {
								try {
									String DESCRICAOCONTA = "";
									String CONTACONTABIL  = "";
									String CONTAANALITICA = "";
									String DESCRICAOCONTINUA = "";
									
									String line = memFile.nextLine();
									line = StringUtil.removeSpecialCharsToUC(line);

									if(line.contains("CLASSIFICADOR") && line.contains("ACESSO") && line.contains("DESCRICAO") && line.contains("CUSTO")){
										validaProsoft = true;
									}

									if (line.trim().equals("")) continue;
									if (line.length() < 80) continue;
									if (!line.substring(74,75).equals("S")) continue;

									CONTACONTABIL = line.substring(0,7).trim();
									CONTAANALITICA = line.substring(9,24).trim();
									DESCRICAOCONTA = line.substring(39,73).trim();

									if(validaProsoft){
										CONTACONTABIL = line.substring(14,21).trim();
										CONTAANALITICA = line.substring(55,69).trim();
										DESCRICAOCONTA = line.substring(23,54).trim();

										logger.logInfo("DESCRICAO -> " + DESCRICAOCONTA);
										logger.logInfo("CONTA ANALITICA -> " + CONTAANALITICA);
										logger.logInfo("CONTA CONTABIL -> " + CONTACONTABIL);
									}
									
									CONTACONTABIL = CONTACONTABIL.replaceAll("-","");

									CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
									if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

									if(DESCRICAOCONTINUA.equals("")) continue;
									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									js.put("NOMECONTABILIDADE", nomeContabilidade);
									js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
									js.put("CONTACONTABIL", CONTACONTABIL);
									js.put("DESCRICAOCONTA", DESCRICAOCONTA);
									js.put("CONTAANALITICA", CONTAANALITICA);
									js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
									
									
									records.put(js);
								} catch (Exception e) {
									logger.logError("EndpointA: ", e);
								}
							} //FIM - WHILE
						} //FIM - For
					} catch (Exception e) {
						logger.logError("EndpointA: ", e);
					}
					                    
					try {
						FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
						fileLoader.loadFiles();

						
						for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            
                            memFile.setFieldSeparator("\\|");
                            
							while (memFile.hasNextLine()) {
								String line = memFile.nextLine();
								try {
									int idescricao		= 3;  
									int icontaContabil	= 1; 
									int icontaAnalitica	= 2;
									
									
									String DESCRICAOCONTA = "";
									String CONTACONTABIL  = "";
									String CONTAANALITICA = "";
									String DESCRICAOCONTINUA = "";
									
									//leitura
									DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
									CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
									CONTAANALITICA 	= memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
    								CONTACONTABIL = CONTACONTABIL.replaceAll("-","");

									CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
									if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

									
									if(DESCRICAOCONTINUA.equals("")) continue;
						
									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									js.put("NOMECONTABILIDADE", nomeContabilidade);
									js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
									js.put("CONTACONTABIL", CONTACONTABIL);
									js.put("DESCRICAOCONTA", DESCRICAOCONTA);
									js.put("CONTAANALITICA", CONTAANALITICA);
									js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
									
									records.put(js);
								} catch (Exception e) {
									logger.logError("EndpointA: ", e);
								}
							} //FIM - WHILE
						} //FIM - For
					} catch (Exception e) {
						logger.logError("EndpointA: ", e);
					}
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@CVSOFT).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaCVSOFT(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
    
    // logger.logInfo("CVSOFT DALE");

    JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load("contabil/" + nomeContabilidade + "/contabil.properties");

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {

					String extensao = file.getName().substring(file.getName().lastIndexOf(".")).toLowerCase()+ "," +file.getName().substring(file.getName().lastIndexOf(".")).toUpperCase();
					
                    
					try {
						FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".txt,.TXT", bkpEmpresaDePara.getAbsolutePath(), true, logger);
						fileLoader.loadFiles();

						for (MemoryFile memFile: fileLoader.getMemFiles()) {
							while (memFile.hasNextLine()) {
								try {
									String DESCRICAOCONTA = "";
									String CONTACONTABIL  = "";
									String CONTAANALITICA = "";
									String DESCRICAOCONTINUA = "";
									
									String line = memFile.nextLine();
									
									if (line.trim().equals("")) continue;
									if (line.length() < 80) continue;

									CONTACONTABIL = line.substring(40,46).trim();
									CONTAANALITICA = line.substring(5,20).trim();
									DESCRICAOCONTA = line.substring(47,87).trim();
                                    
                                    logger.logInfo("CONTACONTABIL -> "+CONTACONTABIL+" - CONTAANALITICA -> "+CONTAANALITICA+" - DESCRICAOCONTA -> "+DESCRICAOCONTA);
									
									CONTACONTABIL = CONTACONTABIL.replaceAll("-","");

									CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
									if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                    
                                    // logger.logInfo("DESCRICAOCONTINUA -> "+DESCRICAOCONTINUA);

									if(DESCRICAOCONTINUA.equals("")) continue;
									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									js.put("NOMECONTABILIDADE", nomeContabilidade);
									js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
									js.put("CONTACONTABIL", CONTACONTABIL);
									js.put("DESCRICAOCONTA", DESCRICAOCONTA);
									js.put("CONTAANALITICA", CONTAANALITICA);
									js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
									
									records.put(js);
								} catch (Exception e) {
									logger.logError("EndpointA: ", e);
								}
							} //FIM - WHILE
						} //FIM - For
					} catch (Exception e) {
						logger.logError("EndpointA: ", e);
					}
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Folhamatic).     //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaFOLHAMATIC(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load("contabil/" + nomeContabilidade + "/contabil.properties");

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {

                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    String colunaD = "";	
                                    
                                    String line = memFile.nextLine();
                                    String[] fields = line.split(";");
                                    if (line.trim().equals("")) continue;

                                    int contador = 0;
									for (int j=0; j<memFile.getFieldsSize(); j++) {
										if (!memFile.getStringField(j).equals("")) {
											memFile.setField(contador, memFile.getStringField(j));
											if (j > contador) memFile.setField(j,"");
											contador++;
										}
									}

                                    if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) continue;
                                    colunaD = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
                                    colunaD = colunaD.replaceAll("\\(-\\)","").trim();
									
                                    if (colunaD.contains("(") && colunaD.contains(")")) {
                                        CONTAANALITICA = colunaD.substring(0,colunaD.indexOf("(")).trim();
                                        CONTACONTABIL = colunaD.substring(colunaD.indexOf("(")+1, colunaD.indexOf(")")).trim();
                                        DESCRICAOCONTA = colunaD.substring(colunaD.indexOf(")")+1).trim();
                                //  } else if (colunaD.contains("-")) {
                                //		CONTAANALITICA = colunaD.substring(0,colunaD.indexOf("-")).trim();
                                //  	DESCRICAOCONTA = colunaD.substring(colunaD.indexOf("-")+1).trim();
                                    } else { 
                                        continue; 
                                    }
                                    
                                    for(int d = 0; d < 10; d++){
                                        if(CONTAANALITICA.endsWith("-") && CONTAANALITICA.length() > 1) CONTAANALITICA = CONTAANALITICA.substring(0,CONTAANALITICA.length()-1).trim();
                                        if(CONTACONTABIL.startsWith("0")) CONTACONTABIL = CONTACONTABIL.substring(1).trim();
                                        if(DESCRICAOCONTA.startsWith("-")) DESCRICAOCONTA = DESCRICAOCONTA.substring(1).trim();
                                    }

                                    CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
                                    if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                    if(DESCRICAOCONTINUA.equals("")) continue;
                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
                                    
                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        } //FIM - For
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}





//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@PHSOFTWARE).     //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaPHSOFTWARE(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load("contabil/" + nomeContabilidade + "/contabil.properties");

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {

                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    String colunaD = "";	
                                    
                                    String line = memFile.nextLine();
                                    String[] fields = line.split(";");
                                    if (line.trim().equals("")) continue;

                                    int contador = 0;
									for (int j=0; j<memFile.getFieldsSize(); j++) {
										if (!memFile.getStringField(j).equals("")) {
											memFile.setField(contador, memFile.getStringField(j));
											if (j > contador) memFile.setField(j,"");
											contador++;
										}
									}
									if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) {

										if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) continue;
										colunaD = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
										colunaD = colunaD.replaceAll("\\(-\\)","").trim();
										
										if (colunaD.length() < 30) continue;
										if (!colunaD.substring(26,27).equals("A")) continue;
										
										CONTAANALITICA = colunaD.substring(0,18).trim();
										CONTACONTABIL = colunaD.substring(29,36).trim();
										DESCRICAOCONTA = colunaD.substring(44).trim();
									} else { // INCLUIDO EM 20200519
										if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) continue;
										if (!memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("A")) continue;
										
										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
										CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(2).trim();
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\\(-\\)","").trim();
									}
									
									CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
									if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

									if(DESCRICAOCONTINUA.equals("")) continue;
									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									js.put("NOMECONTABILIDADE", nomeContabilidade);
									js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
									js.put("CONTACONTABIL", CONTACONTABIL);
									js.put("DESCRICAOCONTA", DESCRICAOCONTA);
									js.put("CONTAANALITICA", CONTAANALITICA);
									js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
									records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        } //FIM - For
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Megabitcontabil).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaMEGABITCONTABIL(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    
	File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

    if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".txt,.TXT", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {

                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String DESCRICAOCONTA = "";
                                    String CONTACONTABIL  = "";
                                    String CONTAANALITICA = "";
                                    String DESCRICAOCONTINUA = "";
                                    
                                    String line = memFile.nextLine();
                                    String[] fields = line.split(";");
                                    if (line.trim().equals("")) continue;
									line = StringUtil.removeSpecialCharsToUC(line);									
									if (line.length() < 80) continue;
									if (line.substring(70, 80).equals("")) continue;
									
                                    DESCRICAOCONTA	= line.substring(15, 65).trim();
									
                                    if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    if(DESCRICAOCONTA.length() < 3) continue;
                                    
                                    CONTACONTABIL	= line.substring(70, 80).trim();
                                    if(CONTACONTABIL.contains("-")) CONTACONTABIL = CONTACONTABIL.replaceAll("-","");
                                    CONTAANALITICA	= line.substring(0, 13).trim();
                                    CONTAANALITICA	= CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
                                    
                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
                                    
                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);                                    
                                    
                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE 
                        } //FIM - For 
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For            
    }

    return records;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Mastermaq).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaMASTERMAQ(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	int contadorMaster = 0;
	
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
						String extencao = "";
						for(int extArquivo = 0; extArquivo < 3; extArquivo++){
							if(extArquivo == 0) extencao = ".xlsx,.XLSX";
							if(extArquivo == 1) extencao = ".csv,.CSV";
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extencao, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
							
							int ICONTAANALITICA = 0;
							int ICONTACONTABIL = 1;
							int IDESCRICAO = 2;

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

							if(extencao.contains(".XLSX")) memFile.setFieldSeparator("\\|");
							if(extencao.contains(".CSV"))  memFile.setFieldSeparator(";");
							

								while (memFile.hasNextLine()) {

									try {
										String line = memFile.nextLine();
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										
										logger.logInfo("LINN " + line);
										// if (contadorMaster == 250) break;
										// contadorMaster++;

										if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("CODIGO REDUZIDO") &&
											memFile.getStringFieldRemoveEspCharsUpper(1).contains("CONTA") &&
											memFile.getStringFieldRemoveEspCharsUpper(2).contains("DESCRICAO")){
												
												ICONTAANALITICA = 1;
												ICONTACONTABIL = 0;
												IDESCRICAO = 2;
												continue;											
										}

										// String[] fields = line.split(";");
										if (line.trim().equals("")) continue;

										//leitura
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(IDESCRICAO);
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(ICONTACONTABIL);
										CONTAANALITICA 	= memFile.getStringFieldRemoveEspCharsUpper(ICONTAANALITICA);
										
										// logger.logInfo("LEITURA MASTER = "+DESCRICAOCONTA+" | "+CONTACONTABIL+" | "+CONTAANALITICA);
										
										//tratamento
										DESCRICAOCONTA	= DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll("Eamp","&").replaceAll(";","").trim();
										//CONTAANALITICA	= CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,19);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						}//extencao
						
						
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Tron).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaTRON(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    try {
						String extencao = "";
						for(int extArquivo = 0; extArquivo < 3; extArquivo++){
							if(extArquivo == 0) extencao = ".xlsx,.XLSX";
							if(extArquivo == 1) extencao = ".csv,.CSV";
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extencao, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

							if(extencao.contains(".XLSX")) memFile.setFieldSeparator("\\|");
							if(extencao.contains(".CSV"))  memFile.setFieldSeparator(";");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;

										//leitura
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(2);
										CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(1);
										CONTACONTABIL 	= memFile.getStringFieldRemoveEspCharsUpper(0);
										
										if(DESCRICAOCONTA.equals("")) continue;
										
										//tratamento
										DESCRICAOCONTA	= DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll("Eamp","&").replaceAll(";","").trim();
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,19);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						}//extencao
						
						
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@SULPROG).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSULPROG(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load("contabil/" + nomeContabilidade + "/contabil.properties");

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {

					String extensao = file.getName().substring(file.getName().lastIndexOf(".")).toLowerCase()+ "," +file.getName().substring(file.getName().lastIndexOf(".")).toUpperCase();
					
                    
					try {
						FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".txt,.TXT", bkpEmpresaDePara.getAbsolutePath(), true, logger);
						fileLoader.loadFiles();

						for (MemoryFile memFile: fileLoader.getMemFiles()) {
							while (memFile.hasNextLine()) {
								try {
									String DESCRICAOCONTA = "";
									String CONTACONTABIL  = "";
									String CONTAANALITICA = "";
									String DESCRICAOCONTINUA = "";
									
									String line = memFile.nextLine();
									line = StringUtil.removeSpecialCharsToUC(line);
									if (line.trim().equals("")) continue;
									if (line.length() < 80) continue;

									CONTACONTABIL = line.substring(30,38).trim();   //  reduzido
									CONTAANALITICA = line.substring(0,15).trim();  // expandido
									DESCRICAOCONTA = line.substring(47,111).trim(); // momenclarura
									 
									CONTACONTABIL = CONTACONTABIL.replaceAll("-","");

									CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "").trim();
									if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

									if(DESCRICAOCONTINUA.equals("")) continue;
									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									js.put("NOMECONTABILIDADE", nomeContabilidade);
									js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
									js.put("CONTACONTABIL", CONTACONTABIL);
									js.put("DESCRICAOCONTA", DESCRICAOCONTA);
									js.put("CONTAANALITICA", CONTAANALITICA);
									js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
									
									records.put(js);
								} catch (Exception e) {
									logger.logError("EndpointA: ", e);
								}
							} //FIM - WHILE
						} //FIM - For
					} catch (Exception e) {
						logger.logError("EndpointA: ", e);
					} 
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }

    return records;
}

///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (SIESCON).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSIESCON(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {
												int icontaContabil	= 0;
												int ianalitica		= 1;
												int idescricao		= 2;

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialChars(line).toUpperCase();

												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
												if(DESCRICAOCONTA.equals("")) continue;

												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);

												CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();


                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}


///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (SIEC).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSIEC(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {
												int icontaContabil	= 1;
												int ianalitica		= 0;
												int idescricao		= 2;

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialChars(line).toUpperCase();

												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
												if(DESCRICAOCONTA.equals("")) continue;

												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);
												if (CONTACONTABIL.contains("-")) CONTACONTABIL = CONTACONTABIL.substring(0, CONTACONTABIL.indexOf("-"));

												CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();


                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}

///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (EXACTUS).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaEXACTUS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {
												int icontaContabil	= 3;
												int ianalitica		= 1;
												int idescricao		= 4;

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialChars(line).toUpperCase();
												
												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
												if(DESCRICAOCONTA.equals("")){
													if (!memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).equals("")){
														icontaContabil	= 1;
														ianalitica		= 1;
														idescricao		= 3;
														
														DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
													}
												}
												if(DESCRICAOCONTA.equals("")) continue;

												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);

												CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();


                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}



///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (FORTES).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaFORTES(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	
	int icontaContabil	= -1;
	int ianalitica		= -1;
	int idescricao		= -1;
	int iverificaAnalitica = -1;

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {
												String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialChars(line).toUpperCase();
												
												
												
												if(line.contains("CODIGO") && line.contains("DESCRI")){
													for(int i = 0; i < memFile.getFieldsSize(); i++){
														if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CODIGO")) ianalitica = i;
														if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRI")) idescricao = i;
														if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("REDUZ")) icontaContabil = i;
														if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("ANALITICA")) iverificaAnalitica = i;
													}
													continue;
												}

												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
												if(DESCRICAOCONTA.equals("")) continue;
												
												if(memFile.getStringFieldRemoveEspCharsUpper(iverificaAnalitica).contains("X")){
													if(memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).equals("")){
														CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);
													} else{
														CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
													}
												} else{
													continue;
												}
												
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);
												CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
												CONTAANALITICA = cutString(CONTAANALITICA, 0, "-");
												CONTAANALITICA = CONTAANALITICA.replaceAll("\\.", "");
												
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();


                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Supersoft).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSUPERSOFT(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
	
	int icontaContabil	= 0;
	int ianalitica		= 1;
	int idescricao		= 3;
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	for (int xx=0;xx<2;xx++) {
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		  
			
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
			
				try {
					
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
							
							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine().toUpperCase();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;

										//Atribui os indices a partir do cabecalho da coluna
										if(line.contains("DESCRI") && line.contains("RED") && line.contains("CONTA")){
											for(int i = 0; i < memFile.getFieldsSize(); i++){
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRI") && !memFile.getStringFieldRemoveEspCharsUpper(i).contains("ABREV")) idescricao = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("RED") && !memFile.getStringFieldRemoveEspCharsUpper(i).contains("CRED")) icontaContabil = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA") && !memFile.getStringFieldRemoveEspCharsUpper(i).contains("TIPO")) ianalitica = i;
											}
											continue;
										}

										//Leitura
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao).trim();
										// logger.logInfo("DESCRICAO SUPER SOFT == "+DESCRICAOCONTA);
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).trim();
										CONTAANALITICA 	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica).trim();

										//Tratamento
										DESCRICAOCONTA	= DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll("Eamp","&").replaceAll(";","").trim();

										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,19);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										
								
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
										// logger.logInfo("ENTROU165");
										//logger.logInfo(records.toString());
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
    return records;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@PROSYST).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaPROSYST(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();

    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");

	int icontaContabil	= 6;
	int ianalitica		= 0;
	int idescricao		= 2;

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";

	//Para ler xlsx e csv
	for (int xx=0;xx<2;xx++) {
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {

			File[] files = dirEmpresaDePara.listFiles();

			for (File file: files) { // listDePara

				try {

					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {

						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										
										if (line.trim().equals("")) continue;
										if(memFile.getFieldsSize() < 5) continue;

										//Validacao por cabecalho
										if(line.contains("REDUZIDA") && line.contains("DESCRI") && line.contains("NUMERO")){
											for(int i = 0; i < memFile.getFieldsSize(); i++){
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("NUMERO")) ianalitica = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRI")) idescricao = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("REDUZIDA")) icontaContabil = i;
											}
											continue;
										}
										
									
										//Leitura
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao).trim();
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("\"","").trim();
										if(DESCRICAOCONTA.equals("")) continue;
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).trim();
										CONTAANALITICA 	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica).trim();

										//Tratamento
										DESCRICAOCONTA	= DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll("Eamp","&").replaceAll(";","").trim();
										
										//Uma descricao veio com ; e conta contabil deslocou uma coluna
										if(!CONTAANALITICA.equals("") && CONTACONTABIL.equals("")){
											CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil+1).trim();
										}

										//if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,19);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");


										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
										// logger.logInfo("ENTROU165");
										//logger.logInfo(records.toString());
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
    return records;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@SAAM).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSAAM(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();

    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");

	int icontaContabil	= 10;
	int ianalitica		= 8;
	int idescricao		= 9;

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";

	//Para ler xlsx e csv
	for (int xx=0;xx<2;xx++) {
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {

			File[] files = dirEmpresaDePara.listFiles();

			for (File file: files) { // listDePara

				try {

					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {

						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();

										if (line.trim().equals("")) continue;
										if(memFile.getFieldsSize() < 5) continue;

										//Validacao por cabecalho
										if(line.contains("REDUZIDO") && line.contains("COMPLETO") && line.contains("ANALITICA")){
											for(int i = 0; i < memFile.getFieldsSize(); i++){
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("COMPLETO")) ianalitica = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("ANALITICA")) idescricao = i;
												if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("REDUZIDO")) icontaContabil = i;
											}
											continue;
										}
										
										//Leitura
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao).trim();
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("\"","").trim();
										if(DESCRICAOCONTA.equals("")) continue;
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).trim();
										CONTAANALITICA 	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica).trim();

										//Tratamentos
										DESCRICAOCONTA	= DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll("Eamp","&").replaceAll(";","").trim();
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,19);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");


										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
    return records;
}




///////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo ImportaPlanoConta (INFOBANC).   ////////    ENDPOINT A //
///////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaINFOBANC(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {
												int icontaContabil	= 1;
												int ianalitica		= 0;
												int idescricao		= 2;

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialChars(line).toUpperCase();

												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
												if(DESCRICAOCONTA.equals("")) continue;

												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);

												CONTACONTABIL  = CONTACONTABIL.replaceAll("-","");
												CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();


                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Alterdata).      //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaALTERDATA(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	boolean leuCabecalho = false;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";
	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

										int icontaContabil	= 2;
										int ianalitica		= 0;
										int idescricao		= 1;
                                        while (memFile.hasNextLine()) {

                                            try {

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialCharsToUC(line);
												if(line.contains("CDCLASSINTERNA") && line.contains("NMCONTA") && line.contains("CDCHAMADA")){
													
													for (int i = 0; i < memFile.getFieldsSize(); i++) {
														if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CDCHAMADA")){
															icontaContabil  = i;
															leuCabecalho = true;
															break;
														}
														if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CDCLASSINTERNA")){
															ianalitica = i;
														}
														if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("NMCONTA")) {
															idescricao = i;
														}
														
													}
													leuCabecalho = true;
													continue;
												}
												
												if(!leuCabecalho){
													int contador = 0;
													for (int j=0; j<memFile.getFieldsSize(); j++) {
														if (!memFile.getStringField(j).equals("")) {
															memFile.setField(contador, memFile.getStringField(j));
															if (j > contador) memFile.setField(j,"");
															contador++;
														}
													}
												}
												

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";

												
												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao);
												if(DESCRICAOCONTA.equals("")) continue;

												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);

												CONTACONTABIL  = CONTACONTABIL.replaceAll("-","");
												CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();


                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Alterdata).      //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaCUCAFRESCA(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	logger.logInfo("ERP CUCA FRESCA");
	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialCharsToUC(line);
												
												int icontaContabil	= 0;
												int ianalitica		= 0;
												int idescricao		= 1;

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";
												
												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).trim();
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica).trim();
												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao).trim();
												if(DESCRICAOCONTA.equals("")) continue;
												DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();

                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
								try{
									String filenameDel = fl.getAbsolutePath();
									filenameDel = filenameDel.replaceAll("\\\\", "/");
									FileUtil.moveToDir(filenameDel, backupDirName);
								} catch (Exception e) {}
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@ATHENAS).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaATHENAS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
    JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	boolean naoLemais = false;
	String filename = "";
	//String extensaoArquivo   = "";
	
	
	for(int iExtensao = 0; iExtensao < 2; iExtensao++){
		String extensaoArquivo = ".xlsx,.XLSX";
		if(iExtensao == 1){
			extensaoArquivo = ".csv,.CSV";
			
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		}
	
		int icontaContabil  = -1;
		int icontaAnalitica = -1;
		int idescricaoConta = -1;
	
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		       
			File[] files = dirEmpresaDePara.listFiles();
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							//FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
						
							String ext = "";
						
							if(extensaoArquivo.contains("csv")){
								ext = ";";
							} else{
								ext = "\\|";
							}
							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator(ext);
								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";
										String line = memFile.nextLine().toUpperCase();
									
										//if(line.contains(";")){
										//	memFile.setFieldSeparator(";");
										//}
									
										// String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
									
										if(line.toUpperCase().contains("CODR") && line.toUpperCase().contains("CONTA") && line.toUpperCase().contains("TIPO") &&
											line.toUpperCase().contains("NAT") && line.toUpperCase().contains("NOME")) {
											icontaContabil   = -1;
											icontaAnalitica  = -1;
											idescricaoConta  = -1;
											for (int i = 0; i < memFile.getFieldsSize() ; i++) {
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("NOME"))     	  idescricaoConta  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CODR"))          icontaContabil   = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA"))  	  icontaAnalitica  = i;
											}
											continue;
										}
										if(icontaContabil == -1)continue;
										if(!memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).equals(""))
											DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
										if(memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).equals(""))
											DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta+1);
									
										CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
									
										if(DESCRICAOCONTA.equals("")) continue;
									
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();
										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
	}
    return records;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@DEXION).      //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaDEXION(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();

	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo = "";

	if (rotasLO != null) {

		for (String nome : rotasLO) {
            if (nome.contains("_#")) {

                String diretorio = dirName + nome + "/DePara";
                File file2 = new File(diretorio);
                File[] files = file2.listFiles();

                // Carrega as propriedades
                props.load("contabil/" + nomeContabilidade + "/contabil.properties");
                if (FileUtil.dirHasFiles(diretorio)) {

                    for (File fl: files) {
                        try {
                            if (fl.isFile() && fl.getName().toUpperCase().contains("PLANO")) {

                                String empresa = nome.substring(0,nome.indexOf("_#"));
                                String codEmpresa = nome.substring(nome.indexOf("_#")+2);
                                String compDirName = empresa + "_#" + codEmpresa;
                                String dirName2 = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
                                String backupDirName = dirName2 + "/Processado";
                                //--- - --- -- --- - --- -- --- - --- --

                                try {
                                    FilesLoader fileLoader = new FilesLoader(dirName2, ".xlsx,.XLSX", backupDirName, true, logger);
                                    fileLoader.loadFiles();

                                    for (MemoryFile memFile: fileLoader.getMemFiles()) {

                                        memFile.setFieldSeparator("\\|");

                                        while (memFile.hasNextLine()) {

                                            try {

                                                String line = memFile.nextLine();
												line = StringUtil.removeSpecialCharsToUC(line);
												
												int icontaContabil	= 6;
												int ianalitica		= 0;
												int idescricao		= 7;
												int icnpj			= 3;

                                                String DESCRICAOCONTA = "";
                                                String CONTACONTABIL  = "";
												String CONTAANALITICA = "";
                                                String DESCRICAOCONTINUA = "";
                                                String CNPJ				 = "";
												
												if(line.contains("CNPJ")){
													CNPJ			= memFile.getStringFieldRemoveEspCharsUpper(icnpj);													
												}
												
												DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricao).trim();
												if(DESCRICAOCONTA.equals("")) continue;

												CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
												CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(ianalitica);

												CONTACONTABIL  	= CONTACONTABIL.replaceAll("-","");
												CONTAANALITICA 	= CONTAANALITICA.replaceAll(",",".");
												DESCRICAOCONTA 	= DESCRICAOCONTA.replaceAll("Eamp;","&").replaceAll(";","").trim();

												CNPJ 			= CNPJ.replaceAll("[^0-9]*", "").trim();
												if(!CNPJ.equals("")) DESCRICAOCONTA	= CNPJ + " - " + DESCRICAOCONTA;

                                                DESCRICAOCONTINUA = DESCRICAOCONTA;
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                                DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

                                                //---------------------------------------------------//
                                                //Grava registro do Movimento Contabil do Pagamento. //
                                                //---------------------------------------------------//
                                                JSONObject js = new JSONObject();

                                                js.put("NOMECONTABILIDADE", nomeContabilidade);
                                                js.put("EMPRESA", codEmpresa);
												js.put("NOMEEMPRESA", empresa);
                                                js.put("CONTACONTABIL", CONTACONTABIL);
                                                js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                                js.put("CONTAANALITICA", CONTAANALITICA);
                                                js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                                records.put(js);
                                            }
                                            catch (Exception e) {
                                                logger.logError("EndpointA: ", e);
                                            }
                                        } //FIM - WHILE
                                    } //FIM - For
                                }
                                catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            }
                        }
                        catch (Exception e) {
                            logger.logError("EndpointA: ", e);
                        }
                    } //FIM - For
                }
            }
		} //FIM - For
	}
    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Sibrax).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaSIBRAX(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(0);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(2);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(1);
										if(CONTACONTABIL.contains("-")) CONTACONTABIL = CONTACONTABIL.substring(0,CONTACONTABIL.indexOf("-"));
										
										CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}
//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@RECH).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaRECH(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										if(line.contains("*")) continue;
										

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(0);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(0);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, " ");
										CONTACONTABIL	= cutString(CONTACONTABIL, CONTACONTABIL.lastIndexOf("."), CONTACONTABIL.length());
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										CONTAANALITICA	= cutString(CONTAANALITICA, 0, " ");
										CONTAANALITICA = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
										/*if(CONTAANALITICA.startsWith("0")){
											for (int zz=0;zz<10;zz++) {
												if (CONTAANALITICA.length() > 1 && CONTAANALITICA.substring(0,1).equals("0")) CONTAANALITICA = CONTAANALITICA.substring(1);
											}
										}*/
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTA = cutString(DESCRICAOCONTA, CONTACONTABIL, DESCRICAOCONTA.length());
										
										

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}




//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@RUMOPRIORI).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaRUMOPRIORI(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	logger.logInfo("UEPA entrou rumoP");
	
    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										int IDESCRICAOCONTA = 2;
										int ICONTACONTABIL  = 0;
										int ICONTAANALITICA = 15;
										int IDESCRICAOCONTINUA = 2;

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(ICONTAANALITICA);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(IDESCRICAOCONTA);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(ICONTACONTABIL);
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, " ");
										CONTACONTABIL	= cutString(CONTACONTABIL, CONTACONTABIL.lastIndexOf("."), CONTACONTABIL.length());
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										CONTAANALITICA	= cutString(CONTAANALITICA, 0, " ");
										CONTAANALITICA = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTA = cutString(DESCRICAOCONTA, CONTACONTABIL, DESCRICAOCONTA.length());
										

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@INTSYS).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaINTSYS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	logger.logInfo("UEPA entrou INTSYS");
	
    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										int IDESCRICAOCONTA = 2;
										int ICONTACONTABIL  = 1;
										int ICONTAANALITICA = 0;
										int IDESCRICAOCONTINUA = 2;

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(ICONTAANALITICA);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(IDESCRICAOCONTA);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(ICONTACONTABIL);
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, " ");
										CONTACONTABIL	= cutString(CONTACONTABIL, CONTACONTABIL.lastIndexOf("."), CONTACONTABIL.length());
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										CONTAANALITICA	= cutString(CONTAANALITICA, 0, " ");
										// CONTAANALITICA = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTA = cutString(DESCRICAOCONTA, CONTACONTABIL, DESCRICAOCONTA.length());
										

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@NETSPEED).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaNETSPEED(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										if(line.contains("*")) continue;
										

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(1);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(3);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, " ");
										CONTACONTABIL	= cutString(CONTACONTABIL, CONTACONTABIL.lastIndexOf("."), CONTACONTABIL.length());
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										CONTAANALITICA	= cutString(CONTAANALITICA, 0, " ");
										// CONTAANALITICA = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTA = cutString(DESCRICAOCONTA, CONTACONTABIL, DESCRICAOCONTA.length());
										

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@FXSISTEMAS).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaFXSISTEMAS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										if(line.contains("*")) continue;
										

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(0);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(1);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(0);
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, " ");
										// CONTACONTABIL	= cutString(CONTACONTABIL, 0, CONTACONTABIL.lastIndexOf("."));
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										CONTAANALITICA	= cutString(CONTAANALITICA, 0, " ");
										// CONTAANALITICA  = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTA = cutString(DESCRICAOCONTA, CONTACONTABIL, DESCRICAOCONTA.length());
										

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@RMTOTVS).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaRMTOTVS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	logger.logInfo("UEPA TOTV");
	
    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	for (int xx=0;xx<2;xx++) {
		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";

										String line = memFile.nextLine();
										String[] fields = line.split(";");
										if (line.trim().equals("")) continue;
										
										if(line.contains("*")) continue;
										

										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(0);
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(3);

										
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(2);
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, " ");
										CONTACONTABIL	= cutString(CONTACONTABIL, 0, CONTACONTABIL.lastIndexOf("."));
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										CONTAANALITICA	= cutString(CONTAANALITICA, 0, " ");
										CONTAANALITICA  = cutString(CONTAANALITICA, 0, CONTAANALITICA.lastIndexOf("."));
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										DESCRICAOCONTA = cutString(DESCRICAOCONTA, CONTACONTABIL, DESCRICAOCONTA.length());
										

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}

//Plano de Contas Contabyte
public JSONArray runEndPointAPlanoContaCONTABYTE(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
        File[] files = dirEmpresaDePara.listFiles(); 
        
        for (File file: files) { // listDePara
            try {
                if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
                    int icontaAnalitica = -1;
                    int icontaContabil  = -1;
                    int idescricaoConta = -1;
                    
                    try {
                        FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
                        fileLoader.loadFiles();

                        for (MemoryFile memFile: fileLoader.getMemFiles()) {
                            memFile.setFieldSeparator("\\|");

                            while (memFile.hasNextLine()) {
                                try {
                                    String DESCRICAOCONTA = "";//descricao
                                    String CONTACONTABIL  = "";//codigo
                                    String CONTAANALITICA = ""; 
                                    String DESCRICAOCONTINUA = "";
                                    int deslocamento      = 0;
                                            
                                    int auxiliar = 0;
                                            
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialChars(line).toUpperCase();
                                    if (line.trim().equals("")) continue;

                                    icontaAnalitica  = 0;
                                    idescricaoConta  = 1;
                                    icontaContabil   = 2;

                                    /*if(line.contains("CODIGO") && line.contains("CLASSIFICA") && line.contains("NOME") && line.contains("GRAU")) {
                                        icontaAnalitica = -1;
                                        icontaContabil  = -1;
                                        idescricaoConta = -1;
										int contPosicoes = 0;
                                        for (int i = memFile.getFieldsSize()-1; i >= 0 ; i--) {
											if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(i).equals("T")) contPosicoes++;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CODIGO"))     icontaContabil  = contPosicoes;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CLASSIFICA")) icontaAnalitica = contPosicoes;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("NOME"))       idescricaoConta = contPosicoes;
                                        }
										
                                        continue;
                                    }
									
									int contPosicoes = 0;
									for (int i = memFile.getFieldsSize()-1; i >= 0 ; i--) {
										if (!memFile.getStringFieldRemoveEspCharsUpper(i).equals("")
											&& !memFile.getStringFieldRemoveEspCharsUpper(i).equals("S")
											&& !memFile.getStringFieldRemoveEspCharsUpper(i).equals("A")) {
											contPosicoes++;
											if (contPosicoes == icontaAnalitica) {
												CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
											if (contPosicoes == icontaContabil) {
												CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
											if (contPosicoes == idescricaoConta) {
												DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(i);
											}
										}
									}*/

                                    if(!memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica).equals("")) CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);

                                    if(!memFile.getStringFieldRemoveEspCharsUpper(icontaContabil).equals("")) CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);

                                    if(!memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).equals("")) DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
								
                                    if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;

                                    
                                     
									if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
									
									if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue; 
									
									if(DESCRICAOCONTA.equals("")) continue;
									

                                    
                                    CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
                                    DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
                                    
                                    DESCRICAOCONTINUA = DESCRICAOCONTA;
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
                                    DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
									
									if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
									if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
									
                                    //---------------------------------------------------//
                                    //Grava registro do Movimento Contabil do Pagamento. //
                                    //---------------------------------------------------//
                                    JSONObject js = new JSONObject();

                                    js.put("NOMECONTABILIDADE", nomeContabilidade);
                                    js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
                                    js.put("CONTACONTABIL", CONTACONTABIL);
                                    js.put("DESCRICAOCONTA", DESCRICAOCONTA);
                                    js.put("CONTAANALITICA", CONTAANALITICA);
                                    js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

                                    records.put(js);
                                } catch (Exception e) {
                                    logger.logError("EndpointA: ", e);
                                }
                            } //FIM - WHILE
                        }
                    } catch (Exception e) {
                        logger.logError("EndpointA: ", e);
                    }
                }
            } catch (Exception e) {
                logger.logError("EndpointA: ", e);
            }
        } //FIM - For
    }//if - has file

    return records;
}


//Plano de Contas Calima
public JSONArray runEndPointAPlanoContaCALIMA(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	
	// logger.logInfo("ENTRO METODO CALIMA");
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	for(int iExtensao = 0; iExtensao < 2; iExtensao++){
		String extensaoArquivo = ".xlsx,.XLSX";
		if(iExtensao == 1){
			extensaoArquivo = ".csv,.CSV";
			
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		} 
    
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						int icontaAnalitica = -1;
						int icontaContabil  = -1;
						int idescricaoConta = -1;
						// logger.logInfo("PASSOU FILE CALIMA");
						try {
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if(iExtensao == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";//descricao
										String CONTACONTABIL  = "";//codigo
										String CONTAANALITICA = ""; 
										String DESCRICAOCONTINUA = "";
										int deslocamento      = 0;
												
										int auxiliar = 0;
												
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										if (line.trim().equals("")) continue;
										
										if(line.contains("CONTA") && (line.contains("DESCRICAO") || line.contains("DESCRIAAO")) && line.contains("CX")) {
											icontaAnalitica = -1;
											icontaContabil  = -1;
											idescricaoConta = -1;
											for (int i = 0; i < memFile.getFieldsSize(); i++) {
												if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("C.R.")) icontaContabil  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA")) {
													icontaAnalitica = i;
													idescricaoConta = i;
												}  
											}
											continue;
										}
										if(line.contains("CONTA") && (line.contains("DESCRICAO") || line.contains("DESCRIAAO")) && !line.contains("CX") && line.contains("SPED")) {
                                            icontaAnalitica = -1;
                                            icontaContabil  = -1;
                                            idescricaoConta = -1;
                                            for (int i = 0; i < memFile.getFieldsSize(); i++) {
                                                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("C.R.")) icontaContabil  = i;
                                                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA")) {
                                                    icontaAnalitica = i;    
                                                }
                                                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRI")) {
                                                    idescricaoConta = i;    
                                                }                                                 
                                            }
                                            continue;
                                        }
										if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;

										// icontaAnalitica  = 4;
										// idescricaoConta  = 4;
										// icontaContabil   = 0;


										if(!memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica).equals("")) CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);

										if(!memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica).equals("")){
											CONTAANALITICA = cutString(memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica), 0, "     ");
											
											DESCRICAOCONTA = cutString(memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta), "     ", memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).length());
										} 
										
										// logger.logInfo("CC == "+CONTACONTABIL+" | DESC == "+DESCRICAOCONTA);
									
										

										
										 
										if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
										
										if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue; 
										
										if(DESCRICAOCONTA.equals("")) continue;
										

										
										CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										
										if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
										if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
										
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							}//fim for
							
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}//if - has file
	}
    return records;
}

//Plano de Contas DPComp
public JSONArray runEndPointAPlanoContaDPCOMP(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	
	// logger.logInfo("ENTRO METODO DBComp");
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	for(int iExtensao = 0; iExtensao < 2; iExtensao++){
		String extensaoArquivo = ".xlsx,.XLSX";
		if(iExtensao == 1){
			extensaoArquivo = ".csv,.CSV";
			
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		} 
    
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						int icontaAnalitica = -1;
						int icontaContabil  = -1;
						int idescricaoConta = -1;
						try {
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if(iExtensao == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";//descricao
										String CONTACONTABIL  = "";//codigo
										String CONTAANALITICA = ""; 
										String DESCRICAOCONTINUA = "";
										int deslocamento      = 0;
												
										int auxiliar = 0;
												
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										// logger.logInfo("LINHA == "+line);
										if (line.trim().equals("")) continue;

										icontaAnalitica  = 0;
										idescricaoConta  = 3;
										icontaContabil   = 2;
										
										if(line.contains("CONTA") && line.contains("DESCRICAO") && line.contains("REDUCAO")) continue;
										
										if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) continue;

										CONTACONTABIL  = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
										
										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
											
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);										
										
										// logger.logInfo("CC == "+CONTACONTABIL+" | DESC == "+DESCRICAOCONTA);
									
										if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
										
										 
										if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
										
										if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue; 
										
										if(DESCRICAOCONTA.equals("")) continue;

										
										CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										
										if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
										if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
										
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							}//fim for
							
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}//if - has file
	}
    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@DYAD).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////

public JSONArray runEndPointAPlanoContaDYAD(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	
	logger.logInfo("ENTRO METODO Dyad");
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	for(int iExtensao = 0; iExtensao < 2; iExtensao++){
		String extensaoArquivo = ".xlsx,.XLSX";
		if(iExtensao == 1){
			extensaoArquivo = ".csv,.CSV";
			
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		} 
    
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						int icontaAnalitica = -1;
						int icontaContabil  = -1;
						int idescricaoConta = -1;
						// logger.logInfo("PASSOU FILE CALIMA");
						try {
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if(iExtensao == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";//descricao
										String CONTACONTABIL  = "";//codigo
										String CONTAANALITICA = ""; 
										String DESCRICAOCONTINUA = "";
										
												
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										// logger.logInfo("LINHA == "+line);
										if (line.trim().equals("")) continue;

										icontaAnalitica  = 0;
										idescricaoConta  = 1;
										icontaContabil   = 0;
										
										if(line.contains("CONTA") && line.contains("DESCRICAO")) continue;


										CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);

										
										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
										
										
										// logger.logInfo("CC == "+CONTACONTABIL+" | DESC == "+DESCRICAOCONTA);
									
										if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;

										
										 
										if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
										
										if (CONTAANALITICA.contains("HORA") || CONTAANALITICA.equals("")) continue; 
										
										if(DESCRICAOCONTA.equals("")) continue;
										

										
										CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										
										if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
										if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
										
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							}//fim for
							
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}//if - has file
	}
    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@CONSISANET).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaCONSISANET(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	
	logger.logInfo("ENTRO METODO CONSISANET");
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	for(int iExtensao = 0; iExtensao < 2; iExtensao++){
		String extensaoArquivo = ".xlsx,.XLSX";
		if(iExtensao == 1){
			extensaoArquivo = ".csv,.CSV";
			
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		} 
    
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						int icontaAnalitica = -1;
						int icontaContabil  = -1;
						int idescricaoConta = -1;
						// logger.logInfo("PASSOU FILE CALIMA");
						try {
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if(iExtensao == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";//descricao
										String CONTACONTABIL  = "";//codigo
										String CONTAANALITICA = ""; 
										String DESCRICAOCONTINUA = "";
										
												
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										// logger.logInfo("LINHA == "+line);
										if (line.trim().equals("")) continue;

										icontaAnalitica  = 0;
										idescricaoConta  = 5;
										icontaContabil   = 3;

										if(memFile.getStringFieldRemoveEspCharsUpper(3).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(4).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(5).equals("")) icontaContabil = 4;

										if(memFile.getStringFieldRemoveEspCharsUpper(5).equals("")) continue;


										CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
										
										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
										
										
										// logger.logInfo("CC == "+CONTACONTABIL+" | DESC == "+DESCRICAOCONTA);
									
										if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
										 
										if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
										
										
										CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										
										if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
										if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
										
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							}//fim for
							
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}//if - has file
	}
    return records;
}

public class CloudAPI {

	// *********************************************************************************************
	// *** NAO ALTERAR *****************************************************************************
	// *********************************************************************************************
	public static final String SERVER_OAUTH_STAG	= "https://staging-oauth-server.herokuapp.com";
	public static final String SERVER_OAUTH_PROD	= "https://ottimizza-oauth-server.herokuapp.com";
	
	public static final String SERVER_S3_PROD		= "https://api-s3-storage.herokuapp.com";
	
	// *** ALTERAR AQUI
	public static final String SERVER_OAUTH			= SERVER_OAUTH_PROD;
	public static final String SERVER_S3			= SERVER_S3_PROD;
	
	private static final String HTTP_POST			= "POST";
	private static final String MEDIA_TYPE_JSON		= "application/json";
	private static final String MEDIA_TYPE_FILE		= "application/octet-stream";

	public static final String USER_OAUTH			= "rota.bussola@ottimizza.com.br";
	public static final String PWD_OAUTH			= "12345";
	
	// *** queue-events KAFKA ***
	public static final String SERVER_QUEUE_EVENTS	= "https://ottimizza-queue-events.herokuapp.com";
	public static final String ENVIA_LIVRO_CAIXA	= "/oic/v1/meucaixa/list";
	
	// *** integrador ***
	public static final String SERVER_INTEGRADOR	= "https://integrador-contabil.herokuapp.com";
	// public static final String SERVER_INTEGRADOR	= "https://integrador-contabil.herokuapp.com";
	public static final String IMPORTA_LIVRO_CAIXA	= "/api/v1/livro_caixa/importar";
	public static final String ATUALIZA_SALDO_OMC	= "/api/v1/saldo_bancos";
	
	private JSONObject oauthToken = new JSONObject();
	private String token;
	public CloudAPI() { }
	
	public CloudAPI(String username, String password, String server, InoutLogger logger) {
 		doLogin(username, password, server, logger);
	}
	
	public String doLogin(String username, String password, String server, InoutLogger logger) {
		try {
			String url = String.format(
				"%s/oauth/token", SERVER_OAUTH
			);
			
			StringBuilder responseRaw = new StringBuilder();
			
			String form = String.format(
					"username=%s&password=%s&grant_type=%s",
					username, password, "password"
			);
			
			
			// Credenciais para login.
			JSONObject data = new JSONObject();
			data.put("grant_type", "password")
			    .put("username", username)
				.put("password", password);
			
			java.net.URL serviceURL = new java.net.URL(url);
			
			// Opens java.net.URL as a POST Request
			java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
			connection.setDoOutput(true); // indicates a post
			connection.setRequestMethod(HTTP_POST);
			
			// Default Headers.
			String authorization = Base64.getEncoder().encodeToString("bussola-contabil-client:bussola-contabil-secret".getBytes());

			connection.setRequestProperty("Authorization", "Basic " + authorization);
			// connection.setRequestProperty("Content-Type", MEDIA_TYPE_JSON);
			
			// Writes the Request Body...
			try {
				java.io.OutputStream os = connection.getOutputStream();
				os.write(form.getBytes());
				os.flush();
				os.close();
			} catch (Exception ex1) {
				logger.logDebug("Algo deu errado escrevendo Request Body.");
				logger.logDebug(ex1.getMessage());
			} 
			
			// Writes the Response Body...
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
				String line;
				while ((line = reader.readLine()) != null) {
					responseRaw.append(line);
				}
				reader.close();
			} catch (Exception ex2) {
				logger.logDebug("Algo deu errado escrevendo Response Body.");
				logger.logDebug(ex2.getMessage());
			} 
			
			// checks if it is a valid json
			if (responseRaw.toString().startsWith("{") && responseRaw.toString().endsWith("}")) {
				JSONObject response = new JSONObject(responseRaw.toString());
				
				this.oauthToken = response;
				
				if (response.has("access_token")) {
					this.token = response.optString("access_token", "");
				}
			} else {
				throw new Exception(responseRaw.toString());
			}
			
			return token;
		} catch (Exception ex0) { }

		return "";
	}
	
	public String genericPost(JSONArray dataObject, String mapping, String server, InoutLogger logger) throws Exception {

		try {
			StringBuilder responseRaw = new StringBuilder();
			
			java.net.URL serviceURL = new java.net.URL(
				String.format(
					"%s%s",server,mapping
				)
			);
			// Opensjava.net.URL as a POST Request
			java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
			connection.setDoOutput(true); // indicates a post
			connection.setRequestMethod(HTTP_POST);
			
			// Default Headers.
			connection.setRequestProperty("Accept", MEDIA_TYPE_JSON);
			connection.setRequestProperty("Content-Type", MEDIA_TYPE_JSON);
			connection.setRequestProperty("Authorization", "Bearer " + this.token); // header for authorization
			
			
			// Writes the Request Body...
			try {
				java.io.OutputStream os = connection.getOutputStream();
				os.write(dataObject.toString().getBytes());
				os.flush();
				os.close();
			} catch (Exception ex1) {
				logger.logError("Primeiro Catch " + ex1);
			} 
			
			// Writes the Response Body...
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
				String line;
				responseRaw.append("{");
				while ((line = reader.readLine()) != null) {
					responseRaw.append(line);
				}
				reader.close();
			} catch (Exception ex2) {
					logger.logError("222 Segundo Catch " + ex2);
			}
			JSONObject dataObjectConv = new JSONObject();
			dataObjectConv.put("objeto", dataObject);
			
			responseRaw.append(dataObjectConv.toString());
			// checks if it is a valid json
			if (responseRaw.toString().startsWith("{") && responseRaw.toString().endsWith("}")) {
				JSONObject response = new JSONObject(dataObjectConv.toString());
			
				// Todo
				return response.toString();
			} 
			else {
				throw new Exception (responseRaw.toString());
			}
			
		} catch (Exception ex0) { 

			throw ex0;
		}
	} 
 	
}




public String encodeUrl(String url, String mapping, JSONObject params) throws Exception {
	if(url.length() > 1 && url.endsWith("/")) url = url.substring(0,url.length()-1);
	
	if(mapping.length() > 1) {
		if(mapping.endsWith("/"))   mapping = mapping.substring(0,mapping.length()-1);
		if(mapping.startsWith("/")) mapping = mapping.substring(1);
	}
	
	StringBuilder uri = new StringBuilder();
	uri.append(url).append("/").append(mapping);
	
	if(params != null && params.length() > 0) {
		uri.append("?");
		Iterator<String> chaves = params.keys();
		while(chaves.hasNext()) {
			String chave = chaves.next().toString();
			uri.append(chave).append("=").append(params.optString(chave));
			uri.append("&");
		}
		uri.deleteCharAt(uri.length()-1);	//apaga o ultimo '&'
	}
	return uri.toString();
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@MAKROSYSTEM).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaMAKROSYSTEM(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	

    JSONArray records = new JSONArray();
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
        
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
    
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	int icontaContabil  = 4;
	int icontaAnalitica = 0;
	int idescricaoConta = 5;
	
	for (int xx=0;xx<2;xx++) {
		
		// quando xx == 0 - plano de contas tradicional em .xlsx
		// quando xx == 1 - plano de contas importado automaticamente do questor SYN  ou csv do questor
		// para nao dar conflito com o .csv dos depara, o arquivo .csv de plano eh movido para a pasta /inout/contabil/ottimizza/planocontas
		// se o nome do arquivo contiver PLANO_CONTAS_QUESTOR significa que veio do SYN. Caso contrario, foi importado pela manualmente.
		// xx == 1 ==>>      9994;1;1;"1";"ATIVO";1;1;1;2  empresa;conta reduzida;tipo S/A;Classificacao;descricao  quando vem do SYN

 		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {

								memFile.setFieldSeparator("\\|");
								if (xx  == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {

									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";

										String line = memFile.nextLine();
										if (line.trim().equals("")) {
											// logger.logInfo("CTN AQ1");
											continue;
										}
										
										 if (line.trim().equals("")) continue;

										if(line.contains("CONTA") && line.contains("S/A") && line.contains("CODIGO") && line.contains("HISTORICO") && 
											line.contains("D/C") && line.contains("TIPO DE SALDO")) {
											icontaContabil   = -1;
											icontaAnalitica  = -1;
											idescricaoConta  = -1;
											for (int i = 0; i < memFile.getFieldsSize() ; i++) {
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("HISTORICO"))     idescricaoConta  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CODIGO"))        icontaContabil   = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CONTA"))         icontaAnalitica  = i;
											}
											continue;
										}
    									
										CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).trim();
										CONTACONTABIL	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										// if(CONTACONTABIL.contains("-")) CONTACONTABIL = CONTACONTABIL.substring(0,CONTACONTABIL.indexOf("-"));
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);

										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("\"","");

										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();
										
										// logger.logInfo("TA SALVANO");
										
									 
										if(DESCRICAOCONTA.equals("")) continue;
										
										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }

    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@DATACEMPRO).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////

public JSONArray runEndPointAPlanoContaDATACEMPRO(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	
	logger.logInfo("ENTRO METODO DATACEMPRO");
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	for(int iExtensao = 0; iExtensao < 2; iExtensao++){
		String extensaoArquivo = ".xlsx,.XLSX";
		if(iExtensao == 1){
			extensaoArquivo = ".csv,.CSV";
			
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				 FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			}
		} 
    
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		        
			File[] files = dirEmpresaDePara.listFiles(); 
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						int icontaAnalitica = -1;
						int icontaContabil  = -1;
						int idescricaoConta = -1;
						// logger.logInfo("PASSOU FILE CALIMA");
						try {
							
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoArquivo, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();

							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if(iExtensao == 1) memFile.setFieldSeparator("\\;");

								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";//descricao
										String CONTACONTABIL  = "";//codigo
										String CONTAANALITICA = ""; 
										String DESCRICAOCONTINUA = "";
										
												
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										// logger.logInfo("LINHA == "+line);
										if (line.trim().equals("")) continue;

										icontaAnalitica  = 0;
										idescricaoConta  = 2;
										icontaContabil   = 1;

										CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
										
										CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										
										DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
										
										
										// logger.logInfo("CC == "+CONTACONTABIL+" | DESC == "+DESCRICAOCONTA);
									
										if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
										 
										if (CONTAANALITICA.length() > 20 ) CONTAANALITICA = CONTAANALITICA.substring(0, 19).trim();
										
										CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
										DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
										
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										
										if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
										if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
										
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();

										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

										records.put(js);
									} catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							}//fim for
							
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}//if - has file
	}
    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@MEGAPROG).    //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////

public JSONArray runEndPointAPlanoContaMEGAPROG(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
	JSONArray records = new JSONArray();
	
	// logger.logInfo("ENTRO METODO MEGAPROG");
    
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
	
	int contAux = 0;
    
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	
	dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
	bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
	if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
		FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
	}
	// logger.logInfo("MEG " + FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath()) + " | " + dirEmpresaDePara.getAbsolutePath() + " | " + bkpEmpresaDePara.getAbsolutePath());
	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {
		//logger.logInfo("LOG PRIMEIRO IF");
		File[] files = dirEmpresaDePara.listFiles(); 
		
		for (File file: files) { // listDePara
		
			//logger.logInfo("LOG LISTDEPARA");
			try {
				if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
					int icontaAnalitica = -1;
					int icontaContabil  = -1;
					int idescricaoConta = -1;
					// logger.logInfo("PASSOU FILE CALIMA");
					try {
						FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".pdf, .PDF", bkpEmpresaDePara.getAbsolutePath(), true, logger);
						try{
							fileLoader.loadFiles();
						}
						
						catch(Exception e ){
							//logger.logInfo("LOG CATCH FILELOADER");
						}
						

						for (MemoryFile memFile: fileLoader.getMemFiles()) {
							memFile.setFieldSeparator("\\s{2,}");

							while (memFile.hasNextLine()) {
								//contAux++;
								//if(contAux == 100) break;

								try {
									//if(!memFile.getStringFieldRemoveEspCharsUpper(0).trim().matches("[0-9]+")) continue;
									String DESCRICAOCONTA = "";//descricao
									String CONTACONTABIL  = "";//codigo
									String CONTAANALITICA = ""; 
									String DESCRICAOCONTINUA = "";
									
											
									String line = memFile.nextLine();
									line = StringUtil.removeSpecialChars(line).toUpperCase();
									//logger.logInfo("LINHA == "+ memFile.getStringFieldRemoveEspCharsUpper(0) + " - " +
									//memFile.getStringFieldRemoveEspCharsUpper(1) + " - " + memFile.getStringFieldRemoveEspCharsUpper(2));
									
									//logger.logInfo("LOG LINHA - " + line);
									if (line.trim().equals("")) continue;

									icontaAnalitica  = 2;
									idescricaoConta  = 1;
									icontaContabil   = 0;

									CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
									
									CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
									
									DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
									
									
									// logger.logInfo("CC == "+CONTACONTABIL+" | DESC == "+DESCRICAOCONTA);
								
									if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;
									
									CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
									DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
									DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");
									
									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									
									if (DESCRICAOCONTA.length() > 200 ) DESCRICAOCONTA = DESCRICAOCONTA.substring(0, 199).trim();
									if (DESCRICAOCONTINUA.length() > 200 ) DESCRICAOCONTINUA = DESCRICAOCONTINUA.substring(0, 199).trim();
									
									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									if(memFile.getStringFieldRemoveEspCharsUpper(0).trim().matches("[0-9]+")){
										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
										
										//logger.logInfo("LOG INFORMACOES - " + CONTACONTABIL + " - " + DESCRICAOCONTA + " - " + CONTAANALITICA);
									}
									

									
								} catch (Exception e) {
									logger.logError("EndpointA: ", e);
								}
							} //FIM - WHILE
						}//fim for
						
					} catch (Exception e) {
						logger.logError("EndpointA: ", e);
					}
				}
			} catch (Exception e) {
				logger.logError("EndpointA: ", e);
			}
		} //FIM - For
	}//if - has file
return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@PROSIS).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaPROSIS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
    JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	// int icontaContabil  = 0;
	int icontaAnalitica = 0;
	int idescricaoConta = 10;
	
	for (int xx=0;xx<2;xx++) {
		
		// quando xx == 0 - plano de contas tradicional em .xlsx
		// quando xx == 1 - plano de contas importado automaticamente do questor SYN  ou csv do questor
		// para nao dar conflito com o .csv dos depara, o arquivo .csv de plano eh movido para a pasta /inout/contabil/ottimizza/planocontas
		// se o nome do arquivo contiver PLANO_CONTAS_QUESTOR significa que veio do SYN. Caso contrario, foi importado pela manualmente.
		// xx == 1 ==>>      9994;1;1;"1";"ATIVO";1;1;1;2  empresa;conta reduzida;tipo S/A;Classificacao;descricao  quando vem do SYN
 		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		       
			File[] files = dirEmpresaDePara.listFiles();
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if (xx  == 1) memFile.setFieldSeparator("\\;");
								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";
										String line = memFile.nextLine();
										if (line.trim().equals("")) {
											// logger.logInfo("CTN AQ1");
											continue;
										}
										
										 if (line.trim().equals("")) continue;
										if(line.contains("CONTA") && line.contains("DIGITO") && line.contains("REDUZIDO") && line.contains("APELIDO") &&
											line.contains("DESCRICAO")) {
											icontaAnalitica  = -1;
											idescricaoConta  = -1;
											for (int i = 0; i < memFile.getFieldsSize() ; i++) {
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("HISTORICO"))     idescricaoConta  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CONTA"))         icontaAnalitica  = i;
											}
											continue;
										}
    									
										CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).trim();
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										if(CONTAANALITICA.contains("-")) CONTAANALITICA = CONTAANALITICA.substring(0,CONTAANALITICA.indexOf("-"));
										
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										CONTACONTABIL = CONTAANALITICA;
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("\"","");
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();
										
										// logger.logInfo("TA SALVANO");
										
									
										if(DESCRICAOCONTA.equals("")) continue;
										
										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
    return records;
}


//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@CONTABIT).        //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaCONTABIT(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {
	
    JSONArray records = new JSONArray();
    String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
    String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
    String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");
    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));
    //Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
    File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
    File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
    File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
    File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));
	String dirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/";
	File file = new File(dirName);
	String[] rotasLO = file.list();
	
	boolean rotasOk = false;
	String filename = "";
	String extensaoArquivo   = "";
	
	// int icontaContabil  = 0;
	// int icontaContabil  = 2;
	// int icontaAnalitica = 0;
	// int idescricaoConta = 1;
	int icontaContabil  = 6;
	int icontaAnalitica = 6;
	int idescricaoConta = 6;
	
	for (int xx=0;xx<2;xx++) {
		
		// quando xx == 0 - plano de contas tradicional em .xlsx
		// quando xx == 1 - plano de contas importado automaticamente do questor SYN  ou csv do questor
		// para nao dar conflito com o .csv dos depara, o arquivo .csv de plano eh movido para a pasta /inout/contabil/ottimizza/planocontas
		// se o nome do arquivo contiver PLANO_CONTAS_QUESTOR significa que veio do SYN. Caso contrario, foi importado pela manualmente.
		// xx == 1 ==>>      9994;1;1;"1";"ATIVO";1;1;1;2  empresa;conta reduzida;tipo S/A;Classificacao;descricao  quando vem do SYN
 		
		String extensaoPlano = ".xlsx,.XLSX";
		if (xx == 1)  {
			extensaoPlano = ".csv,.CSV";
			dirEmpresaDePara = new File(String.format("%s/contabil/ottimizza/ImportaPlanoContas/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
			bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));		
			if (!FileUtil.fileExists(bkpEmpresaDePara.getAbsolutePath())) {
				FileUtil.mkDir(bkpEmpresaDePara.getAbsolutePath());
			} 							
		}
		if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {		       
			File[] files = dirEmpresaDePara.listFiles();
			
			for (File file: files) { // listDePara
				try {
					if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
						try {
							FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), extensaoPlano, bkpEmpresaDePara.getAbsolutePath(), true, logger);
							fileLoader.loadFiles();
							for (MemoryFile memFile: fileLoader.getMemFiles()) {
								memFile.setFieldSeparator("\\|");
								if (xx  == 1) memFile.setFieldSeparator("\\;");
								while (memFile.hasNextLine()) {
									try {
										String DESCRICAOCONTA = "";
										String CONTACONTABIL  = "";
										String CONTAANALITICA = "";
										String DESCRICAOCONTINUA = "";
										String complemento01  = "";
										String line = memFile.nextLine();
										line = StringUtil.removeSpecialChars(line).toUpperCase();
										if (line.trim().equals("")) {
											// logger.logInfo("CTN AQ1");
											continue;
										}
										
										if (line.trim().equals("")) continue;
										// logger.logInfo("LIN CONTABIT -> " + line);
										if(line.contains("CLASSIFICACAO") && line.contains("DESCRICAO") && line.contains("CODIGO") && line.contains("TIPO") && !line.contains("DESCRICAO DA CONTA") && !line.contains("ID.CODIGO")) {
											// logger.logInfo("ENTROU NO PADRAO 01");
											icontaContabil   = -1;
											icontaAnalitica  = -1;
											idescricaoConta  = -1;
											for (int i = 0; i < memFile.getFieldsSize() ; i++) {
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("DESCRICAO"))     idescricaoConta  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CLASSIFICACAO"))     icontaAnalitica  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CODIGO"))icontaContabil  = i;
											}
											continue;
										}
										
										
										if(line.contains("CLASSIFICACAO") && line.contains("DESCRICAO DA CONTA") && line.contains("ID.CODIGO")) {
											icontaContabil   = -1;
											icontaAnalitica  = -1;
											idescricaoConta  = -1;
											for (int i = 0; i < memFile.getFieldsSize() ; i++) {
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CLASSIFICACAO"))     idescricaoConta  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("CLASSIFICACAO"))     icontaAnalitica  = i;
												if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("DESCRICAO DA CONTA"))icontaContabil  = i;
											}
											continue;
										}
										// CLASSIFICAÇÃO|DESCRIÇÃO|CÓDIGO|TIPO
										
    									// logger.logInfo("idescricaoConta -> " + idescricaoConta + " icontaAnalitica -> " + icontaAnalitica + " icontaContabil -> " + icontaContabil );
										
										CONTACONTABIL 	= memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
										CONTAANALITICA	= memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
										DESCRICAOCONTA	= memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta).trim();
										
										
										CONTAANALITICA 	  = cutString(memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica), 0, " ");
										DESCRICAOCONTA = cutString(memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta), " ");
										if(DESCRICAOCONTA.contains("Eamp;")) DESCRICAOCONTA.replaceAll("Eamp;","&");
										// logger.logInfo("CONTACONTABIL -> " + CONTACONTABIL + " CONTAANALITICA -> " + CONTAANALITICA + " DESCRICAOCONTA -> " + DESCRICAOCONTA);
										// CONTAANALITICA = CONTAANALITICA.replaceAll("[^0-9]*", "");
										if(CONTAANALITICA.length() > 20) CONTAANALITICA = CONTAANALITICA.substring(0,20);
										if(CONTACONTABIL.length() > 20) CONTACONTABIL = CONTACONTABIL.substring(0,20);
										DESCRICAOCONTINUA = DESCRICAOCONTA;
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");
										DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("\"","");
										//---------------------------------------------------//
										//Grava registro do Movimento Contabil do Pagamento. //
										//---------------------------------------------------//
										JSONObject js = new JSONObject();
										
										// logger.logInfo("TA SALVANO");
										
									
										if(DESCRICAOCONTA.equals("")) continue;
										
										js.put("NOMECONTABILIDADE", nomeContabilidade);
										js.put("EMPRESA", codEmpresa);
										js.put("NOMEEMPRESA", nomeEmpresa);
										js.put("CONTACONTABIL", CONTACONTABIL);
										js.put("DESCRICAOCONTA", DESCRICAOCONTA);
										js.put("CONTAANALITICA", CONTAANALITICA);
										js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);
										
										records.put(js);
									}
									catch (Exception e) {
										logger.logError("EndpointA: ", e);
									}
								} //FIM - WHILE
							} //FIM - For
						} catch (Exception e) {
							logger.logError("EndpointA: ", e);
						}
						try{
							String filenameDel = file.getAbsolutePath();
							filenameDel = filenameDel.replaceAll("\\\\", "/");
							FileUtil.moveToDir(filenameDel, bkpEmpresaDePara.getAbsolutePath());
						} catch (Exception e) {}
					}
				} catch (Exception e) {
					logger.logError("EndpointA: ", e);
				}
			} //FIM - For
		}
    }
    return records;
}

//######################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo ImportaPlanoConta (@Modulos).       //     ENDPOINT A     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndPointAPlanoContaMODULOS(JSONObject jDadosEmpresa, InoutLogger logger) throws Exception {

	JSONArray records = new JSONArray();

	String nomeContabilidade = jDadosEmpresa.optString("NOME_CONTABILIDADE");
	String erpContabilidade  = jDadosEmpresa.optString("ERP_CONTABILIDADE");
	String nomeEmpresa       = jDadosEmpresa.optString("NOME_EMPRESA");
	String codEmpresa        = jDadosEmpresa.optString("COD_EMPRESA");

	// Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	props.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

	// Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;

	File dirContabilidade = new File(String.format("%s/contabil/%s", RouteEngine.INOUT_HOME, nomeContabilidade));
	File dirEmpresa       = new File(String.format("%s/%s_#%s", dirContabilidade, nomeEmpresa, codEmpresa));
	File dirEmpresaDePara = new File(String.format("%s/%s", dirEmpresa, "/DePara"));
	File bkpEmpresaDePara = new File(String.format("%s/%s", dirEmpresaDePara, "/Processado"));

	if (FileUtil.dirHasFiles(dirEmpresaDePara.getAbsolutePath())) {
		File[] files = dirEmpresaDePara.listFiles();

		for (File file: files) { // listDePara
			try {
				if (file.isFile() && file.getName().toUpperCase().contains("PLANO")) {
					int icontaAnalitica = -1;
					int icontaContabil  = -1;
					int idescricaoConta = -1;

					try {
						FilesLoader fileLoader = new FilesLoader(dirEmpresaDePara.getAbsolutePath(), ".xlsx,.XLSX", bkpEmpresaDePara.getAbsolutePath(), true, logger);
						fileLoader.loadFiles();

						for (MemoryFile memFile: fileLoader.getMemFiles()) {
							memFile.setFieldSeparator("\\|");

							while (memFile.hasNextLine()) {
								try {
									String CONTACONTABIL  = "";
									String CONTAANALITICA = "";
									String DESCRICAOCONTA = "";
									String DESCRICAOCONTINUA = "";

									String line = memFile.nextLine();
									line = StringUtil.removeSpecialChars(line).toUpperCase();
									if (line.trim().equals("")) continue;

									if(line.contains("CONTA") && line.contains("REDUZIDA") && line.contains("DESCRI") && line.contains("ANALITICA")) {
										icontaAnalitica = -1;
										icontaContabil  = -1;
										idescricaoConta = -1;
										for (int i = 0; i < memFile.getFieldsSize() ; i++) {
											if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("REDUZIDA"))      icontaContabil = i;
											if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRI"))        idescricaoConta = i;
											if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CONTA")
												&& memFile.getStringFieldRemoveEspCharsUpper(i).contains("ANALITICA"))  icontaAnalitica  = i;
										}

										continue;
									}

									if (icontaContabil == -1 || icontaAnalitica == -1 || idescricaoConta == -1) continue;


									CONTAANALITICA = memFile.getStringFieldRemoveEspCharsUpper(icontaAnalitica);
									CONTACONTABIL = memFile.getStringFieldRemoveEspCharsUpper(icontaContabil);
									DESCRICAOCONTA = memFile.getStringFieldRemoveEspCharsUpper(idescricaoConta);
									
									if(DESCRICAOCONTA.equals("") || CONTACONTABIL.equals("")) continue;


									CONTAANALITICA = CONTAANALITICA.replaceAll(",",".");
									DESCRICAOCONTA = DESCRICAOCONTA.replaceAll("Eamp;","&");
									DESCRICAOCONTA = DESCRICAOCONTA.replaceAll(";","");

									DESCRICAOCONTINUA = DESCRICAOCONTA;
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("[^A-Z]*", "").trim();
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("ME","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EPP","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("LTDA","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("EIRELI","");
									DESCRICAOCONTINUA = DESCRICAOCONTINUA.replaceAll("SA","");

									//---------------------------------------------------//
									//Grava registro do Movimento Contabil do Pagamento. //
									//---------------------------------------------------//
									JSONObject js = new JSONObject();

									js.put("NOMECONTABILIDADE", nomeContabilidade);
									js.put("EMPRESA", codEmpresa);
									js.put("NOMEEMPRESA", nomeEmpresa);
									js.put("CONTACONTABIL", CONTACONTABIL);
									js.put("DESCRICAOCONTA", DESCRICAOCONTA);
									js.put("CONTAANALITICA", CONTAANALITICA);
									js.put("DESCRICAOCONTINUA", DESCRICAOCONTINUA);

									records.put(js);
								} catch (Exception e) {
									logger.logError("EndpointA: ", e);
								}
							} //FIM - WHILE
						}
					} catch (Exception e) {
						logger.logError("EndpointA: ", e);
					}
				}
			} catch (Exception e) {
					logger.logError("EndpointA: ", e);
			}
		} //FIM - For
	}//if - has file

	return records;
}