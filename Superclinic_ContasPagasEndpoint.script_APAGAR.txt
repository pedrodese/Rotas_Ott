{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
{import: io_contabil.Ottimizza_MeuCaixa};
{import: io_contabil.Lancamentos};
{import: io_contabil.TemplateUtils};
{import: io_contabil.OICUtils};


// TEMPLATE 15.03.2023
// Colocado tipoPlanilha no Lote Encerrado
// colocado para trocar XLSX por CSV se marcado no roteiro 
 
public JSONArray run(InoutLogger logger) throws Exception {

	JSONArray  records  = new JSONArray();
	JSONObject ultimoJS = new JSONObject();

	// gera seguranca nas conexoes com Heroku
	// Create a trust manager that does not validate certificate chains
	javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
		new javax.net.ssl.X509TrustManager(){
			public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

			public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

			public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
		}
	};

	// Install the all-trusting trust manager
	try {
		javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
		sc.init(null, trustAllCerts, new java.security.SecureRandom());
		javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	} catch (Exception e) {
		// 
	}
	
	
	// Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	SysProperties propsEmp = SysProperties.getInstance();
	JSONObject roteiroCRMPrincipal = getRoteiro();
	JSONObject roteiroCRM = getRoteiro();
	JSONObject jStatus = new JSONObject();
	
 
	props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	//Contectar na Base de Dados depara do heroku(nuvem)
	DBPostgreSQL dbIODepara = null;

 	String empresa = getNomeEmpresa();
	
	
	String codEmpresa = props.get(empresa + "_COD_EMPRESA");
	 
	if (codEmpresa == null) {
		empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
		codEmpresa = props.get(empresa + "_COD_EMPRESA");		
	}
	
	//#2303-002125
	//codEmpresa que sera utilizado para consultar o plano de contas
	String codEmpresaPlanoContas = codEmpresa;
	if (roteiroCRM.optString("contabilidade").toUpperCase().contains("CONTIBEMASSESSORIA")) {
		codEmpresaPlanoContas = "000";
	}
	//2312-024058
	if (roteiroCRM.optString("contabilidade").toUpperCase().contains("SETEC")) {
		codEmpresaPlanoContas = "000";
	}
 
	String tipoProduto = "";
	try {
		tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
	} catch (Exception xx) {tipoProduto = "OIC_PACOTE";}
	
	
	if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";
	
 	
	String processaOud = "";
	try {
		processaOud = props.get("PROCESSA_OUD");
	} catch (Exception e) {processaOud = "FALSE";}
	if (processaOud.equals("")) processaOud = "FALSE";

	String ERPContabil = props.get("ERP_CONTABILIDADE");
	String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
	String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
	String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
	String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM");
	String fornecedorUnico = props.get("FORNECEDOR_UNICO");
	
	String fazLcdpr = "";
	
	try {
		fazLcdpr = props.get(empresa+"_EQUIPE_FECHAMENTO");
	} catch (Exception e) {fazLcdpr = "FALSE";}

	if (fazLcdpr.toUpperCase().contains("LCDPR")) fazLcdpr = "TRUE";
	if (fazLcdpr.equals("")) fazLcdpr = "FALSE";
 	
	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";
	
	String tipoLancamento = getNomeRota();
	if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
	if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


	String compDirName = nomeEmpresa + "_#" + codEmpresa;
	String dirName = "";
	if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
	if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

	String backupDirName = dirName + "/Processado";

	boolean erroShrink = false;
	boolean geraCabecalhoCordilheira = true;
	boolean cabecalhoNaoEncontrada        = true;
	boolean apagaExtrato        = false;
	boolean apagaContaT         = false;
	boolean geraRegraPortador   = false;
	boolean comparaRazao        = false;
	boolean encontrouComplemento = true;
	String tipoEmail            = "";
	String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
	int    contadorArquivo      = 0;

	HashMap mapaLote			= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaDePara			= new HashMap();
	HashMap mapaArquivo 		= new HashMap();
	HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaVariavel		= new HashMap();
	HashMap mapaDocumento 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaParticipante	= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();

	JSONObject recordF = new JSONObject();


	String cruzaExtrato			= "";
	String Cruza_Extrato_com_Extrato = "";
	String mesAnoAnterior		= "";
	String mesAno2Anterior		= "";
	String mesAnoAtual			= "";
	int mesRef					= 0;
	int anoRef					= 0;
	String contaJuros			= "";
	String contaDesconto		= "";
	String contaMulta			= "";
	String contaTransitoria		= "";
	String contaEmpresaBranco	= "";
	String movimentoPortador	= "";
	String contaFixaDebito		= "";
	String contaFixaCredito		= "";
	String contaPortador		= "";		//pg - cred | rec - deb
	String contaMovimento		= "";		//pg - deb | rec - cred
	String tabelaContabil       = "";
	String dataMovimento        = "";
	String classificaPlano      = "";
	String classificaFornec     = "";

	boolean geraFiscal			= false;
	String [] loteFiscal		= new String[20];
	boolean apagaStatus         = false;

	String Conta_Fixa_Cruzamento_Extrato = "";
	String contaInvertida	= "";
	String contaBuscaPlano	= "";
	String nomeArquivo      = "";
	String chave			= "";
	String classificacao	= "";
	String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
	String lote						= "";
 	String regraContaMovimento 		= "";
	String regraHistorico 			= "";
	String separadorCsv				= ";";
	String separadorTxt				= "";
	String tipoPlanilha				= "";
	String contaTemp				= "";
	String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
	boolean primeiroArquivo 		= true;
	boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	boolean forcarPartidaDobrada	= false;
	boolean temOFX					= false;
	boolean temFiltro				= false;
	boolean temFiscal  				= false;
	boolean temLinhas               = false;
	boolean temIgnorar              = false;
	boolean logs = false;
	StringBuilder logsTxt = new StringBuilder();
	
	int abaConvertida = 0;
	
	String retornaPadroes = "";
	
	String zerarColAlternativo		= "";
	JSONObject deParaObj 			= new JSONObject();
	logger.logDebug("Templatetemp Empresa -> " + nomeEmpresa);
	//logger.logDebug("Padrao empresa " + mantemArquivo);
	try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
		// liberado em 25/11/2020 @DiMaz
		// se precisar alterar somente as quantidades qX e qY 
		// cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
		// aumentar muito o XLSX pode causar TRAVAMENTOS
		int qX	= 9;	//ofx,csv,txt
		int qY	= 3;	//xlsx,pdf
		int qTotal = (qX*3)+(qY*2);
		String extensao = "";
		for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
			if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC,.html,.HTML,.ret,.RET";
			if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".pdf,.PDF";
			if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
			if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT,.ret,.RET";
			if (extArquivo >= (3*qX+qY))							extensao = ".csv,.CSV"; 
			
			if (roteiroCRMPrincipal.has("ignoraExel") && roteiroCRMPrincipal.optString("ignoraExel").toUpperCase().equals("TRUE")) {
				extensao = extensao.replace(".XLSX",".CSV").replace(".xlsx",".csv");
			}			
			boolean ignoraAbas = false;
			
			// ------------------------------------------------------------------------------------------
			// colocado para nao ler pelo template mais de 3 planilhas xlsx por rodada
			// Motivo: quando tem planilha grande em excel para ler na personalizada
			// o sistema roda varias vezes a leitura da planilha no template e depois tudo de novo na personalizada.
			if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;
			// ------------------------------------------------------------------------------------------
 
			for (int porAba = 0; porAba < 60; porAba++) {

				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
				
				String apagaArquivo		= backupDirName;
				String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
				abasEspecificas 		= abasEspecificas.replace(",",";"); 

				if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
				// if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
				if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

				// liberado em 25/11/2020 @DiMaz
				// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				String abasFor = "";
				if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
					try {
						int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
						int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
						for (int k = a; k <= b; k++){
							if (k < b) abasFor += k+";";
							else abasFor += k;
						}
					} catch (Exception fr) {}
					if(!abasFor.equals("")) abasEspecificas = abasFor;
				}

				
				if (abasEspecificas.equals("")) {
					if (porAba > 0) break;
				}
				if (!abasEspecificas.equals("")) {
					if (!abasEspecificas.contains(String.valueOf(porAba))) {
						continue;
					}

					String ultimaAba = abasEspecificas;
					if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
					if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
				}

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV e TXt
				
 
 				if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, props, logger);
  				if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, props, logger);
				
 
 				
				// #DOCUMENTACAO
				// carregamento do arquivo
				
				if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
				// salva arquivo no hasmap para posterior eliminacao 

				
				FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
				int[] abas = {porAba};
				fileLoader.setSheetsToRead(abas);
				try {
					fileLoader.loadFiles();
				} catch (Exception e) {
					// logger.logDebug("NAO CONVERTEU PDF " + e.getMessage());
					File file2 = new File(dirName);
					
					File []  arquivoParaConverter = file2.listFiles();
					if (FileUtil.dirHasFiles(dirName)) {
						for (File fl: arquivoParaConverter) {
							if (fl.getName().toUpperCase().contains(".PDF")) {
								LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
								// String idConversor  = TemplateUtils.getIdLote(fl.getName());
								// logger.logDebug("FOI PRO CONVERSORANTES " + fl.getName());
								boolean deubom = false;
								deubom = buscaProtocoloConversor("", apiWeb, tipoLancamento.toLowerCase(), fl.getName(), logger);
								try { 
									FileUtil.deleteFile(fl);
								} catch (Exception XX) {}

								if (deubom) break;
							}
						}
					}
				}
				try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); } 
				catch (Exception bl) {forcarPartidaDobrada = false;}
				
				//2304-003551. Quando utiliza esse ERP ? obrigado a sem em partida dobrada.
				if (roteiroCRMPrincipal.optString("erpContabilidade").equals("DOMINIO2") || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("CORDILHEIRA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")) {
                    forcarPartidaDobrada = true;
                }
				
				for (MemoryFile memFile: fileLoader.getMemFiles()) {
				
					// caso arquivo tenha mais de 250.000 linhas sera ignorado  . Xavier e Mello em 07.06.2023
					if (memFile.getTotalLines() > 250000 ){
						temLinhas = true;
						break;
					}			

					nomeArquivo = memFile.getFilename().replace("%","");
					
					if (nomeArquivo.toUpperCase().startsWith("ABA_")) {
						
						abaConvertida = TemplateUtils.verificaAba(nomeArquivo);
						abasEspecificas = roteiroCRMPrincipal.optString("Abas_Especificas");
						
						// logger.logDebug("ACE " + nomeArquivo + " | " + abaConvertida + " | " + abasEspecificas);
						
						if (!abasEspecificas.equals("")) {
							if (!abasEspecificas.contains(String.valueOf(abaConvertida))) continue;
						}
					} else abaConvertida = porAba;
				
					contadorArquivo++;

					
					// =======================  =================   =======================
					// =======================  VARIAVEIS PADROES   =======================
					// =======================  =================   =======================
					String historico      = "";

					String codCcOrigem    = "";
					String cpfCnpj        = "";
					String nomeOrigem     = "";
					String nomePortador   = "";
					String nomePortador2  = "";
					String documento      = "";
					int    parcelaDoc     = 1;
					double valorDocumento = 0.00;
					double valorPagamento = 0.00;
					double valorDesconto  = 0.00;
					double valorJuros     = 0.00;
					double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
					int icodCcOrigem    = -1;
					int icpfCnpj        = -1;
					int inomeOrigem     = -1;
					int inomePortador   = -1;
					int idocumento      = -1;
					int idataMovimento  = -1;
					int ivalorDocumento = -1;
					int ivalorAlternativo = -1;
					int ivalorPagamento = -1;
					int ivalorDesconto  = -1;
					int ivalorJuros     = -1;
					int ivalorMulta     = -1;
					int icomplemento01  = -1;
					int icomplemento02  = -1;
					int icomplemento03	= -1;
					int icomplemento04  = -1;
					int icomplemento05	= -1;
					int icomplemento06	= -1;
					int icomplemento07	= -1;
					int icomplemento08	= -1;
					int icomplemento09	= -1;
					int icomplemento10	= -1;
					int idataFake		= -1;

					String contaGetConta	= "";
					contaPortador	= "";		//pg - cred | rec - deb
					contaMovimento	= "";		//pg - deb | rec - cred 

					String complemento01	= "";
					String complemento02	= "";
					String complemento03	= "";
					String complemento04	= "";
					String complemento05	= "";
					String complemento06	= "";
					String complemento07	= "";
					String complemento08	= "";
					String complemento09	= "";
					String complemento10	= "";
					String codCentroCusto	= "";
					String codFilial        = "";

					double valorTotalDoc	= 0.0;
					double valorTotalJuros	= 0.0;
					double valorTotalDesc	= 0.0;
					
					double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};  

					String classJur			= "";
					String classDes			= "";
					String classMul			= "";

					String codErroString	= "";
					int cont				= 0;
					String linhasProblema	= "";
					String idEmpresa        = "";
					String idRoteiro  	    = "";

					String histAux			= "";
					String anoData			= "";
					boolean zerar			= true;
					boolean filtro			= true;
					

					String lerAposPrincipal   = "";
					boolean isLinhaPrincipal  = false;
					boolean ignorarAntes	  = false;
					boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";

					double partidaDobradaJuros		= 0;
					double partidaDobradaDesconto	= 0;
					double partidaDobradaMulta		= 0;
					double valorSomaArray			= 0;

					String numSeparadorDuplicata = ""; //convertido em int depois
					
					StringBuilder cabecalhoPlanilha = new StringBuilder();
					StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
					
					int  	      contadorCabecalho = 0; 
					
					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
					
					if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
					if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
					if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);
					
					// if (codEmpresa.equals("9999")) memFile.setFieldSeparator(";");
					
					if (nomeArquivo.toUpperCase().contains(".PDF")) {
						
						// logger.logDebug("ARREPENDE " + nomeArquivo /*memFile.getLines().toString().contains("##$%#&") +*/  + " | " +  memFile.getLines().toString().toUpperCase());
						boolean rodaConversorNovo = TemplateUtils.verificaConversorNovo(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()).toUpperCase());
						
						if (rodaConversorNovo) {
							LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
							String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
							// logger.logDebug("FOI PRO CONVERSOR1 " + nomeArquivo);
							boolean deubom = false;
							deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);
							
							if (deubom) {
								File file2 = new File(dirName);
						
								File []  arquivoParaConverter = file2.listFiles();
								if (FileUtil.dirHasFiles(dirName)) {
									for (File fl: arquivoParaConverter) {
										if (fl.getName().toUpperCase().contains(".PDF")) {
											try { 
												FileUtil.deleteFile(fl);
											} catch (Exception XX) {}

											break;
										}
									}
								}
							}
							continue;
						}
					}
					
 					
					if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
						if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
					}
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
 					
					String abaArquivo = String.valueOf(abaConvertida);
					if (abaConvertida == 0) abaArquivo = "0";

					// colocado para nao importar 2x o mesmo arquivo e mesma aba
					ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
					if (ttArq          == null) {
						ttArq          = new ttArquivo();
						ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;
					
					} else continue;
					mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);
					
					// putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);
					// logger.logDebug("NAAQ " + nomeArquivo.toUpperCase() + " | " + extensao + " | " + separadorCsv);
	
					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
					if (dbIOCont == null) {
						dbIOCont = connectIOContabil(props, logger);
					}

					if (dbIODepara == null) {
						dbIODepara = connectDeParaDb(logger);
					}
					
					if(primeiroArquivo) {
						limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
						primeiroArquivo = false;
					}

					//########################################################################

					contaJuros		    = roteiroCRM.optString("contaFixaJuros");
					contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
					contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
					contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
					contaMulta		    = roteiroCRM.optString("contaFixaMulta");
					idEmpresa      	    = roteiroCRM.optString("idEmpresa");
					idRoteiro   	    = roteiroCRM.optString("idRoteiro");
					movimentoPortador   = roteiroCRM.optString("movimentoPortador");
					classificaPlano     = roteiroCRM.optString("classificaPlano");
					classificaFornec    = roteiroCRM.optString("classificaFornec");
					cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
					Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
					numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

					tipoPlanilha = "MOVIMENTO";
					boolean enviaEmailExtrato = false;
					boolean naoLeMais = false;

					tipoEmail = "CLIENTE";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

					String debitoCredito   		 = "";
					String chaveExtrato    		 = ""; 

					//if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano"); 

					// =======================  ========================   =======================
					// =======================  VARIAVEIS PERSONALIZADAS   =======================
					// =======================  ========================   =======================


					JSONObject objetoParametro = new JSONObject();

					// #DOCUMENTACAO
					// busca de indices da planilha principal
					if (tipoPlanilha.equals("MOVIMENTO")) {
						roteiroCRM = getRoteiro();

						inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
					}
					jStatus = new JSONObject();
					// logger.logDebug("PUTSTATUS 524 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
					if (memFile.getTotalValidLines() > 0) {
						// logger.logDebug("PUTSTATUS 527 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
						putStatus(dirName, "", jStatus, logger);
					}
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {
							// logger.logDebug("PUTSTATUS WHILE " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba);
							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);
								
								// logger.logDebug("Line -> "+tipoPlanilha + "<<>>" + porAba + "<<>>" + cutString(line,0,30));
								// logger.logDebug("TP = "+tipoPlanilha+" | LN = "+line);
								
								contadorCabecalho++;
								if (contadorCabecalho<15) {
									cabecalhoPlanilha.append(line).append(" "); 
									cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								}
								else {
									cabecalhoPlanilha = new StringBuilder();
									
									// ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario 
									if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && abaConvertida > 2) ignoraAbas = true;
								}
								// logger.logDebug("PUTSTATUS 550");
								if (cont < 10)   putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + "-" + cont + ".status", jStatus, logger);  
								   

								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								JSONObject jDadosPadrao = new JSONObject();
								jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento).put("NOMEEMPRESA",nomeEmpresa)
											.put("CODEMPRESA", codEmpresa).put("CONTABILIDADE", roteiroCRM.optString("contabilidade"))
											.put("NOMEARQUIVO", nomeArquivo);
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OMC
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--								
								if (nomeArquivo.toUpperCase().contains(".OMC")) {
 
									tipoPlanilha = "OTT-MEUCAIXA";
									jDadosPadrao.put("TIPOPLANILHA",   tipoPlanilha);
 
									mapaVariavel = readOttimizzaMeuCaixa(memFile, dbIOCont, jDadosPadrao, mapaVariavel, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "",  new JSONObject(), logger);
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									// double tempoInicio1 = System.currentTimeMillis();
									// logger.logDebug("Tempo Rota2; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
									break;
								}

								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
								// logger.logDebug("NAOFX NO TEMPLATES " + nomeArquivo.toUpperCase() + " | " + mantemArquivo + " | " +tipoProduto);
								if (nomeArquivo.toUpperCase().contains(".OFX")) {
									
									if (!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE")) {
										tipoPlanilha = "EXTRATO-OFX";
										

										// quando o OFX vem em apenas 1 linha todas as informacoes
										// quebramos linha e geramos um novo arquivo para gerar como um ofx normal
										if (line.contains("ACCTID")) {
											String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
											FileWriter writer = new FileWriter(fileOfx);
											writer.writeNewFile(line.replaceAll("><",">\r\n<"));	
										}
										putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
										jDadosPadrao.put("CODEMPRESA", codEmpresa).put("TIPOLANCAMENTO", tipoLancamento)
													.put("NOMEEMPRESA", nomeEmpresa).put("NOMEARQUIVO", nomeArquivo);
										if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
										readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 615");
										putStatus(dirName, "",  new JSONObject(), logger);
										temOFX = true;
										break;
									}
									
									// quando FOR OFX e estiver rodando pelo template
									// e a empresa for OIC pacote rodar pela especifica, entao foi dado um break para agili
									if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
										break;
									}
									
								}
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do roteiro movimento (principal), OFX e demais devem ficar para a rota normal
								// if(codEmpresa.equals("3673")){
									// logger.logDebug("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha + " | " + tipoProduto);									
								// }
 								/*if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE"))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

 
									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());																		
																		
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									//logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									// logger.logDebug("NP2 == "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										logger.logDebug("PUTSTATUS 657");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}*/
								
								if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", line).put("anoData", anoData).put("dirName", dirName).put("jStatus", jStatus)
											 .put("extensao", extensao).put("codEmpresa", codEmpresa).put("nomeArquivo", nomeArquivo)
											 .put("nomeEmpresa", nomeEmpresa).put("nomePortador", nomePortador).put("tipoPlanilha", tipoPlanilha)
											 .put("complemento01", complemento01).put("complemento02", complemento02)
											 .put("nomePortador2", nomePortador2).put("tipoLancamento", tipoLancamento)
											 .put("cabecalhoPlanilha", cabecalhoPlanilha.toString());									
									
									// if (codEmpresa.contains("104")) {
										// roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
									// }
									
									// logger.logDebug("nome do arquivo " + nomeArquivo);
									
									retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									
									// logger.logDebug("retorna padroes -> " + retornaPadroes);
									
									
									// logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									
									// logger.logDebug("NP23 " + nomePortador + " | " + nomePortador2);
									
									// logger.logDebug("NP2 ==== "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !mantemArquivo.equals("SIM")){

 
									jDadosPadrao.put("erpContabilidade", roteiroCRMPrincipal.optString("erpContabilidade"))
												.put("LINE", line).put("PRIMEIRAVEZ", primeiraVezDuplicata).put("DIRNAME", dirName)
												.put("TIPOPLANILHA", tipoPlanilha).put("TIPOLANCAMENTO", tipoLancamento);
									
									if (!numSeparadorDuplicata.equals("")) jDadosPadrao.put("NUMSEPARADOR", numSeparadorDuplicata);
									
									if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
										jDadosPadrao.put("CONTROLAPARCELA",  true);  

									} 
 
									primeiraVezDuplicata = leituraDuplicataPadrao(jDadosPadrao, memFile, mapaVariavel, dbIOCont, logger);

									if(!primeiraVezDuplicata){
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 687");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								} 

								//implementa leitura do arquivo de participantes lcdpr
								if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO") && !mantemArquivo.equals("SIM")) {
									if (fazLcdpr.equals("TRUE") && cont < 2) {
										if (memFile.getLines().toString().toUpperCase().contains("RELACAO DE PARTICIPANTES DA ATIVIDADE RURAL")){
											mapaParticipante = leituraLivroCaixaDigitalProdutorRural(mapaParticipante, memFile, logger);
											break;
										}
									}
									/// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
									if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE")) {
										
										if (line.contains("DOCUMENTO") && 
											line.contains("EMISSAO") && 
											line.contains("V. PARCELA") && 
											line.contains("DEVOLUCAO") && 
											line.contains("SALDO") && 
											line.contains("SITUACAO")) {
											

											tipoPlanilha = "DUPLICATA-DOMINIO"; 

											if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

											JSONObject jIndices = new JSONObject();
												
											jIndices.put("IVENCIMENTO", 9).put("INOMEORIGEM", 4).put("IDUPLICATA", 4).put("IVALORPARCELA", 12)
													.put("CODEMPRESA", codEmpresa).put("TIPOPLANILHA", tipoPlanilha);

											primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
											primeiraVezDuplicata = false;
											jStatus = new JSONObject();
											// logger.logDebug("PUTSTATUS 730");
											putStatus(dirName, "", jStatus, logger);

											break;
										}
									}
								}
																
								
									
								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								// logger.logDebug("CPTS " + cabecalhoPlanilha.toString());
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								
								tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								// if(codEmpresa.equals("214")){
									// logger.logDebug("214 = TP -> "+tipoPlanilha+" | LN = "+line);
								// }
								
								if (nomeArquivo.toUpperCase().contains(".PDF") && !nomeArquivo.toUpperCase().contains(".CSV")) {
									if (TemplateUtils.verificaConversorNovoTipoPlanilha(tipoPlanilha)) {
										LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
										String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
										// logger.logDebug("FOI PRO CONVERSOR1 " + nomeArquivo);
										boolean deubom = false;
										deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);
										
										if (deubom) {
											File file2 = new File(dirName);
									
											File []  arquivoParaConverter = file2.listFiles();
											if (FileUtil.dirHasFiles(dirName)) {
												for (File fl: arquivoParaConverter) {
													if (fl.getName().toUpperCase().contains(".PDF")) {
														try {
															FileUtil.deleteFile(fl);
														} catch (Exception XX) {}
														break;
													}
												}
											}
										}
										continue;
									}
								}
								
								//#2306-007459
								if(tipoPlanilha.contains("CARTAO_SIPAG7") && extensao.contains("CSV")){
									memFile.setFieldSeparator(";");
								}
 
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									
									// Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
									if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(abaConvertida))) continue;

								}
								
								if(nomeArquivo.toUpperCase().contains("OTTIMIZZA")){
									if(!logsTxt.toString().contains("MANTEMARQUIVO"))logsTxt.append("STATUS;").append("DATA;").append("VALOR;").append("DOCUMENTO;").append("CLIENTE/FORNECEDOR;").append("PORTADOR;").append("COMPLEMENTO01;").append("COMPLEMENTO02;").append("COMPLEMENTO03;").append("COMPLEMENTO04;").append("COMPLEMENTO05;").append("COMPLEMENTO06;").append("TIPOPLANILHA;").append("MANTEMARQUIVO;").append("PROCESSAOUD;").append("LINHA;");
									logs = true;
								}

								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								try {
									fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
								} catch (IllegalArgumentException e) {
									//TODO: handle exception
									erroShrink = true;
									logger.logError("Deu ruim no shrink \n"+e);
									break;
								}
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
 

 								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "").put("mesAnoAnterior", "").put("mesAno2Anterior", "")
										   .put("mesAnoAtual", "").put("contaMovimento", "").put("contaPortador", "").put("contaDebito", "")
										   .put("contaCredito", "").put("contaJuros", contaJuros).put("contaDesconto", contaDesconto)
										   .put("contaMulta", contaMulta).put("valorDocumento", "").put("valorJuros", "")
										   .put("valorDesconto", "").put("valorMulta","").put("codFilial", "")
										   .put("numeroAba", String.valueOf(abaConvertida)).put("tipoPlanilha", tipoPlanilha)
										   .put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;
								

								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
 									
									// #Fabrica(2019-05-20)
									if (tipoPlanilha.contains("OTTCARTAO")) {
										try{
											String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
											if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
												dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
											}else if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).length() > 11 
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/") 
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(",")
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(":")){
												dataMovimento     = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf("/")+5);
											}else{
												dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											} 											
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
									if (!tipoPlanilha.contains("OTTCARTAO")) {
										// #Fabrica(2019-05-20)
										try{
											dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									if (tipoLancamento.contains("PAGAR")&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA RECEBIMENTO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(2).contains("CLIENTE /  DESCRICAO RECEITA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("DETALHES DO RECEBIMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR ORIGINAL") && memFile.getStringFieldRemoveEspCharsUpper(5).contains("VALOR RECEBIDO")
										&& memFile.getStringFieldRemoveEspCharsUpper(6).contains("BANCO (PORTADOR)") && memFile.getStringFieldRemoveEspCharsUpper(7).contains("CATEGORIA (RECEITA)")){
										break;
									}
									
									// logger.logDebug("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+line);
									
									
 								   
									// leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
								
									
									if (!zerarColAlternativo.equals("")) {
										if (zerarColAlternativo.contains("documento"))		documento		= "";
										if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
										if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
										if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
										if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
										if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
										if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
										if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
										if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
										if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
										if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
										if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
										if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
									}
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									
									if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
											try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
											try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
											try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
											try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
											try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
											try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
									}
									
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorDocumentoArray[0] = 0;
									valorDocumentoArray[1] = 0;
									valorDocumentoArray[2] = 0;
									valorDocumentoArray[3] = 0;
									valorDocumentoArray[4] = 0;
									valorDocumentoArray[5] = 0;
									valorDocumentoArray[6] = 0;
									valorDocumentoArray[7] = 0;
									valorDocumentoArray[8] = 0;
									valorDocumentoArray[9] = 0;
									
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									
									// quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto 
									// no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
									// no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
									if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
										try{
											if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
											else valorDesconto = 0;
										} catch(Exception vlrd) {}
									}
									
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									// logger.logDebug("TP -> "+ ivalorDocumento + " | " + idataMovimento + " TREM " + 
													// tipoPlanilha+" - Empresa -> "+valorDocumento+" - DM -> "+dataMovimento + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));
									
									if(logs && cont <= 200){
										
										logsTxt.append("\r\n");
										logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
										logsTxt.append(dataMovimento); 												logsTxt.append(";");
										logsTxt.append(valorDocumento);												logsTxt.append(";");
										logsTxt.append(documento);													logsTxt.append(";");
										logsTxt.append(nomeOrigem);													logsTxt.append(";");
										logsTxt.append(nomePortador);												logsTxt.append(";");
										logsTxt.append(complemento01);												logsTxt.append(";");
										logsTxt.append(complemento02);												logsTxt.append(";");
										logsTxt.append(complemento03);												logsTxt.append(";");
										logsTxt.append(complemento04);												logsTxt.append(";");
										logsTxt.append(complemento05);												logsTxt.append(";");
										logsTxt.append(complemento06);												logsTxt.append(";");
										logsTxt.append(tipoPlanilha);												logsTxt.append(";");
										if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE (SIM)");	logsTxt.append(";");
										if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO (NAO)");	logsTxt.append(";");
										logsTxt.append(line);														logsTxt.append(";");
																	
									}

									// logger.logDebug("ROTEIRO coluna Extra => " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " |TP => " + tipoPlanilha);
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
										String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
										valorSomaArray = 0;
										for(int iv = 0; iv < indiceValores.length; iv++) {
											// try{
												// logger.logDebug("IDValores -> " + indiceValores[iv].toString());
												// if(!indiceValores[iv].contains("*") && !indiceValores[iv].contains("/") && !indiceValores[iv].contains("+") && !indiceValores[iv].contains("-") && !indiceValores[iv].contains("#")){
													// logger.logDebug("ENTROU IF");
													// String rotuloColuna = "";
													// String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");
													// logger.logDebug("ROTULO ARRAY => " +rotuloArray[iv].toString());
													// indiceValores[iv]	= getIndiceCabecalhoExtra(rotuloArray[iv], memFile);
													// logger.logDebug("INDICE dps => " +indiceValores[iv].toString());
												// }
											// }catch(Exception xx){
												// logger.logDebug("CAIU CATCH");
											// }
												
											//ssss
											double denomidador = 0; 
											int indiceDenominador = -1;
											String sinal = "";
											boolean multiplica100 = false;
											boolean divide100 = false;
											
											if (indiceValores[iv].contains("*100")) multiplica100 = true;
											if (indiceValores[iv].contains("/100")) divide100 = true;
											indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");
											
											if (indiceValores[iv].contains("*")) sinal = "*";
											if (indiceValores[iv].contains("/")) sinal = "/";
											if (indiceValores[iv].contains("+")) sinal = "+";
											if (indiceValores[iv].contains("-")) sinal = "-";										

																					
											if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
 												try {
													if (!indiceValores[iv].contains("#")) {
														denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
													}
													else {
														denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
													}
												} catch (Exception xx) {denomidador = 0;}
												indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
											} 
											 	
											
											try{
											
												valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
												if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
												if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
												if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
												if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
												if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
												if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;
												
 
												
 											}
											catch (Exception vlrd) { 

 
 
												valorDocumentoArray[iv] = 0; 
											}
											
											if(valorDocumentoArray[iv] < 0){
												valorDocumentoArray[iv] = 0;
											} 
											
											valorSomaArray += valorDocumentoArray[iv];
										}
									}
									
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
									
									if (tipoLancamento.equals("PAGAR"))
										debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER"))
										debitoCredito = "EXTRATO-CREDITO";
								
									
									////////////////////////////////////////////////
									////	busca Coluna Alternativa 
									JSONObject obj1 = new JSONObject();
									String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
									obj1.put("validar",			validar);
									obj1.put("documento",		documento);
									obj1.put("nomeOrigem",		nomeOrigem);
									obj1.put("nomePortador",	nomePortador);
									obj1.put("dataMovimento",	dataMovimento);
									obj1.put("complemento01",	complemento01);
									obj1.put("complemento02",	complemento02);
									obj1.put("complemento03",	complemento03);
									obj1.put("complemento04",	complemento04);
									obj1.put("complemento05",	complemento05);
									obj1.put("complemento06",	complemento06);
									obj1.put("complemento07",	complemento07);
									obj1.put("complemento08",	complemento08);
									obj1.put("complemento09",	complemento09);
									obj1.put("complemento10",	complemento10);
									obj1.put("codCentroCusto",	codCcOrigem);
									obj1.put("tipoPlanilha",	tipoPlanilha);
									obj1.put("numeroAba",		String.valueOf(abaConvertida));
									obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());
									JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
									String changed = alternativeObj.optString("changeIt");
									
									if(!changed.equals("")) {
										zerarColAlternativo = changed;
										if (changed.contains("dataMovimento")) {
											dataMovimento	= alternativeObj.optString("dataMovimento");
											dataLote		= alternativeObj.optString("dataLote");
										}
										if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
										if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
										if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");
										
										if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
										if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
										if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
										if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
										if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
										if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
										if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
										if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
										if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
										if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");
										
										if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");
										
										if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
										if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
										if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
										if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
									}
									

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if((ivalorDocumento < 0 || tipoPlanilha.contains("PADRAOOTTIMIZZA")) && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									

									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {
											
										continue;
									}
								}
								
 

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
  
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
  
   
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
 										}
									}
  									
  
									// ajusta data quando vem no formato 01012021  
									if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
										try {
											Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
											dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
											dataLote = DateUtil.dateToString(dts, "yyyy-MM");
											if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
												dataMovimento = "";
												continue;
											}
										} catch (Exception dt1) {
											continue;
										}
									}
  
 
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									
									if (tipoPlanilha.contains("OTTCARTAO")) {
									    String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
										if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
									}

									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

									if (tipoLancamento.equals("PAGAR")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-CREDITO";

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}
									
									//#2305-0004328. Coluna de valor extra para o formato txt
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        valorSomaArray = TemplateUtils.lerValoresExtrasArquivoTxt(valorDocumentoArray, line, roteiroCRM, null);
                                    }
									valorDocumento = Math.abs(valorDocumento);
									
									// if(logs && cont <= 200){
										// logsTxt.append("\r\n");
										
										// logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
										// logsTxt.append(dataMovimento); 												logsTxt.append(";");
										// logsTxt.append(valorDocumento);												logsTxt.append(";");
										// logsTxt.append(documento);													logsTxt.append(";");
										// logsTxt.append(nomeOrigem);													logsTxt.append(";");
										// logsTxt.append(nomePortador);												logsTxt.append(";");
										// logsTxt.append(complemento01);												logsTxt.append(";");
										// logsTxt.append(complemento02);												logsTxt.append(";");
										// logsTxt.append(complemento03);												logsTxt.append(";");
										// logsTxt.append(complemento04);												logsTxt.append(";");
										// logsTxt.append(complemento05);												logsTxt.append(";");
										// logsTxt.append(complemento06);												logsTxt.append(";");
										// logsTxt.append(tipoPlanilha);												
										// if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE");		logsTxt.append(";");
										// if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO");			logsTxt.append(";");
										// logsTxt.append(line);														logsTxt.append(";");
																		
									// }
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0))		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								
								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								//if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) {
									temFiltro = true;
									filtro = validaFiltro(nomeArquivo, dataMovimento);
								}
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								
								//Removemos o replace de AMP por conta de um efeito colateral #202212-0022861
								//nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								// nomeOrigem = stringNormalizer(nomeOrigem, true);
								nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);
								
								// 202301-0023496 JWR Coloquei esse balde com o X para remontar o nomeOrigem
								// Descomentar caso d? problema com caracteres especiais
								/*String letrasPermitidas = "ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789.-/&";
								String nomeOrigemNovo = "";
								for (int xx = 0; xx < nomeOrigem.length(); xx++) {
									if (nomeOrigem.length() > xx) {
										if (letrasPermitidas.contains(nomeOrigem.substring(xx, xx+1))) {
											nomeOrigemNovo = nomeOrigemNovo + nomeOrigem.substring(xx, xx+1);
										}
									}
								}
								nomeOrigem = nomeOrigemNovo;*/

								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("\\?", "").trim();
								nomePortador = stringNormalizer(nomePortador, true);

								complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

								// logger.logDebug("DAMA " + dataMovimento + " | " + valorDocumento + " | " + isLinhaPrincipal);
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								
								if(cont == 0) continue;
								
								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 

								//feita limpeza de campo para poder pegar melhor os juros e descontos.
								documento     = getLimpaCamposAvancado("documento", documento, histobj);


								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
									if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									// logger.logDebug("nomePortador -> " + nomePortador);
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								
								// logger.logDebug("PUTSTATUS 1591");
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								
								// quando usa o getColunaAlternativa tem que refatorar o datalote
								dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");								
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								chave = lote + "-" + String.valueOf(abaConvertida) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

								// if(codEmpresa.equals("987789")) logger.logDebug("DATA == "+dataMovimento+" | LOTEEE == "+lote.replace("_rodaconversor", "")+" | TP === "+tipoPlanilha+" | COD ROT == "+roteiroCRMPrincipal.optString("codigo"));
								
								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								histobj.put("line", line.toUpperCase());
								histobj.put("cabecalhoRegra", cabecalhoRegra.toString());
  								
								String modificaData = getModificaData(histobj);
								
								if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
								if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
								if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
								if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
								if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
								if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);
								
								
								// METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
								// EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
								// UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
								nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
								nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
								documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
								complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
								complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
								complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
								complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
								complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
								complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
								complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
								complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
								complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
								complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);
								 

								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								partidaDobradaJuros		= 0;
								partidaDobradaDesconto	= 0;
								partidaDobradaMulta		= 0;

								if (forcarPartidaDobrada) {
									partidaDobradaJuros		= valorJuros;
									partidaDobradaDesconto	= valorDesconto;
									partidaDobradaMulta		= valorMulta;
									valorJuros				= 0;
									valorDesconto			= 0;
									valorMulta				= 0;
								}
								
								if (tipoPlanilha.contains("OTTCARTAO")) {
									
									if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
									if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
									complemento01 = tipoPlanilha;
									complemento02 = "VENDA";
									
									nomePortador = tipoPlanilha;
									
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
 									
								} else {
								
									// quando se mantem o arquivo, somente devem ser processados arquivos padroes
									// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
									// Trocado para validar se a planilha comeca como movimento - importante por causa da iguacu, Onnegestao, confialtiva que tinham movimento no roteiro secundario e estavam sendo bloqueados
									if (mantemArquivo.equals("SIM") && !tipoPlanilha.contains("PADRAOOTTIMIZZA") && 
									   !roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES") && 
									   (tipoPlanilha.contains("SECUNDARIO") || tipoPlanilha.startsWith("MOVIMENTO"))) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   // Colocado este IF para dar mais performance, ou seja, se ja tiver lido mais de 15 linhas
									   // e planilha for para ser rodada na personalizada
									   // break agiliza a saida da leitura da planilha. Xavier em 19.08
									   if (contadorCabecalho < 15) continue;
									   logs = false;
									   // logger.logDebug("FB");
									   break;
									}
									
									// definido que as planilhas simples que rodam pelo template leem apenas a aba 0
									if (tipoPlanilha.equals("MOVIMENTO") && mantemArquivo.equals("SIM") && 
										porAba > 0 && roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES")) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   
									   logs = false;
									   // logger.logDebug("SB");
									   break;
									}
									
								}
								//#FABRICA 31/08/2022 - @sergio - 202208-0017778
								//Estavamos processando as planilhas padroes sem apaga-las no processo
								//O if abaixo faz com que paguemos a planilha, ap?s processar pelo padrao
								
								// logger.logDebug("TPAQ " + tipoPlanilha);
								
								if(tipoPlanilha.contains("PADRAOOTTIMIZZA")){
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									
								}
					
								// logger.logDebug("ANTES ttMov2");
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(abaConvertida);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;
									
									// logger.logDebug("TTMOVTP -> "+tipoPlanilha);


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
								// logger.logDebug("TEPE " + tipoPlanilha + " | " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " | " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
								
								if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

									for (int iv =0; iv < 10; iv++) { 
										
										if (valorDocumentoArray[iv] == 0) continue;
										
										String rotuloColuna = "";
										String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";"); 
										
										try {
											rotuloColuna = rotuloArray[iv];
										} 
										catch (Exception xx) {
											continue;
										}
										
										if (rotuloColuna.equals("")) continue;
										
									
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + rotuloColuna + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										histobj.put("dataMovimento", dataMovimento);
										
										ttTemp.complemento05 = rotuloColuna;
										histobj.put("complemento05", rotuloColuna);
										
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										
										ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

										if (tipoPlanilha.contains("OTTCARTAO")) {
											ttTemp.complemento01 = tipoPlanilha;
											ttTemp.complemento02 = rotuloColuna;
										}
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
									}
								}
								
								// Para cartoes, criamos o modelo de gerar tafifa por regra
								if (tipoPlanilha.contains("OTTCARTAO")) {

									histobj.put("complemento02", "TARIFA");
									histobj.put("complemento03", complemento03);
									histobj.put("dataMovimento", dataMovimento);
									histobj.put("complemento05", "TARIFA");									
 									
									double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);
  									 
									
									if (taxaTarifa > 0) {
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + "TARIFA" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										
										
										ttTemp.complemento05 = "TARIFA";
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

 										ttTemp.complemento01 = tipoPlanilha;
										ttTemp.complemento02 = "TARIFA";
										
 										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
									}
								}
								
								

									
								if (forcarPartidaDobrada) {
									if (partidaDobradaJuros		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_JUR-" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento = partidaDobradaJuros;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
									}
									
									if (partidaDobradaDesconto	> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_DES-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaDesconto;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
									}
									
									if (partidaDobradaMulta		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_MUL-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaMulta;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
									}
								}								
							} catch (Exception e) {
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

			}
			try {
				Iterator itArquivo = mapaArquivo.keySet().iterator();
				while (itArquivo.hasNext()) { 
					String key = (String)itArquivo.next();
					ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
					
					try {
		 
						FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
					} catch (Exception xx) {}
				}
			} catch (Exception xx) {} 
					
			

		}
	} catch (Exception ee) {
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		logger.logError("EndpointA: ", ee);
	}
	
	
	
	try {
		Iterator itArquivo = mapaArquivo.keySet().iterator();
		while (itArquivo.hasNext()) { 
			String key = (String)itArquivo.next();
			ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
			
			try {
 
				FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
			} catch (Exception xx) {}
 		}
	} catch (Exception xx) {} 
			

	if(erroShrink){
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		throw new Exception();
	}
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
			
		   
		try {
			JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

			if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
				for (int t=0; t<extratoEmpresa.length(); t++) {

					JSONObject recMov = extratoEmpresa.optJSONObject(t);

					recMov.put("CODEMPRESA", codEmpresa);
					recMov.put("NOMEEMPRESA", nomeEmpresa);

					//QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
					if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
						recMov.put("NOMEARQUIVO", nomeArquivo);
					}
					else {
						recMov.put("NOMEARQUIVO", "");
					}

					recMov.put("TIPOLANCAMENTO", tipoLancamento).put("CONTAMOVIMENTO", "").put("CONTAPORTADOR", "").put("CONTLINHATEXTO", String.valueOf(t));

					ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);					
					if (nomeArquivo.toUpperCase().contains("FILTRO_")){
						boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
						temFiltro = true;
						if(!filtro) continue;
					}
					 
					
					String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
					ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;
					
					String leuCnpj = "";
					if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);
						
						if (!leuCnpj.equals("")) {
							ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
						}	
					}	
					if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
						if (!leuCnpj.equals("")) {
							ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
						}
					}
					mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
					apagaExtrato    = true;

				}
			}
		}
		catch (Exception xx) {
			// logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
		}

	} // if tipo planilha nao igual extrato
	
	// logger.logDebug("ETAPA 03 TEMPLATE ");
	
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
	StringBuilder[] txtFiscal = new StringBuilder[20];
  	for (int i= 0; i < 20; i++) {
		txtFiscal[i] = new StringBuilder("");
		loteFiscal[i] = "";		
	}

	StringBuilder txtFornecedor = new StringBuilder();
	StringBuilder txtPortador   = new StringBuilder();
	String nomePortadorAnterior = "";
	
	// if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("PAGAR")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // JWR 01022021
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("RECEBER")) txtFiscal[0].append("PGTOCLI").append(cnpjEmpresa).append("\r\n"); // JWR 01022021

	StringBuilder ResumoTxt = new StringBuilder();
	String rn = "\r\n";
	ResumoTxt = new StringBuilder();
	ResumoTxt.append("").append(rn).append(rn);

	ResumoTxt.append("STATUS;").append("DATA;TIPO DATA;").append("VALOR;").append("DOCUMENTO;").append("CLIENTE/FORNECEDOR;").append("PORTADOR;").append("COMPLEMENTO01;").append("COMPLEMENTO02;").append("COMPLEMENTO03;").append("COMPLEMENTO04;").append("COMPLEMENTO05;").append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;").append("DATA;").append("DEBITO;").append("CLASS DEB;").append("NOME CONTA;").append("CREDITO;").append("CLASS CRED;").append("NOME CONTA;").append("VALOR;").append("HISTORICO;");
	ResumoTxt.append("ORIGEM");

	StringBuilder txtDePara = new StringBuilder();

	txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
	txtDePara.append("\r\n");
	
	
	// logger.logDebug("DIRNAME " + dirName);
	if (mantemArquivo.equals("SIM")) {
		File fileDepoisLista = new File(dirName);
		File [] filesDepois = fileDepoisLista.listFiles(); 
		
		if (filesDepois.length > 1) putStatus(dirName, "", jStatus, logger);
	}
	// logger.logDebug("TEMPLATE ETAPA 03 ");


	int contRegra = -1;
	
	String loteEtapaTres = "";
	
	
	try {
		Iterator itExtrato = mapaVariavel.keySet().iterator();
		while (itExtrato.hasNext()) {
			String chaveExtrato     = "";

			String key = (String)itExtrato.next();
			ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			
 			loteEtapaTres = ttMov.lote;
 
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+ 
				             cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			

			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			// ajusta o ott_oud__ para poder reprocessar o arquivo automaticamnete pelo portal
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");
			if (!ttMov.lote.toLowerCase().contains("ott_oud__") && ttMov.lote.toLowerCase().contains("ott_oud_")) {
				ttMov.lote = ttMov.lote.replace("ott_oud_","ott_oud__");
			}
			
			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
			ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
			if (ttJ != null && ttJ.valorLido == 0) {
				ttMov.valorJuros  = ttJ.valorJur;
				ttJ.valorLido     = 1;
				mapaJuros.put(chaveJuros,ttJ);

			}

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
			ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
			if (ttD != null && ttD.valorLido == 0) {
				ttMov.valorDesconto  = ttD.valorDesc;
				ttD.valorLido     = 1;
				mapaDesconto.put(chaveDesconto,ttD);

			}
			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			//logger.logDebug("ANTES 3 DE 4");
			
			// if (codEmpresa.contains("277")) logger.logDebug("TRESDEQUATRO " + " | " + ttMov.tipoP + ttMov.debitoCredito + " | " +  ttMov.dataMovimento + " | " + ttMov.valorDocumento);
			
 			if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			
			
			// if (codEmpresa.contains("1722")) logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito + " | " + ttMov.dataMovimento + " | " + ttMov.valorDocumento);
			// if (codEmpresa.contains("244")) logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.nomeOrigem);
			
			
			// if(codEmpresa.equals("987789")) logger.logDebug("DATA == "+ttMov.dataMovimento+" | LOTEEE == "+ttMov.lote.replace("rodaconversor", "")+" | TP === "+ttMov.tipoPlanilha);
			if (ttMov.tipoPlanilha.contains("CARTAO")) ttMov.tipoPlanilha = ttMov.tipoPlanilha.replaceAll("[0-9]", "").trim(); //JWR
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("\'","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\'","");
			ttMov.complemento02 = ttMov.complemento02.replaceAll("\'","");
			ttMov.complemento03 = ttMov.complemento03.replaceAll("\'","");
			ttMov.complemento04 = ttMov.complemento04.replaceAll("\'","");
			ttMov.complemento05 = ttMov.complemento05.replaceAll("\'","");
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
   			ttMov.nomePortador = ttMov.nomePortador.replaceAll("\\|","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\\|","");
			
			classificaPlano     = roteiroCRM.optString("classificaPlano");
			classificaFornec    = roteiroCRM.optString("classificaFornec");
			cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
			Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
			String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
			String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();

			if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
			// logger.logDebug("PORTAS1 " + cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"));
			// logger.logDebug("PORTAS2 " + ttMov.nomePortador);
			if (ttMov.nomePortador.toUpperCase().contains("OTT_OUD") && ttMov.nomePortador.toUpperCase().contains("CEF")) ttMov.nomePortador = cutString(ttMov.nomePortador.toUpperCase(), 0, "OTT_") + " " + cutString(ttMov.nomePortador.toUpperCase(), ttMov.nomePortador.toUpperCase().indexOf(cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"))+cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_").length()+1);
			
			// logger.logDebug("TIPOS " + tipoPlanilha);
			
			if (ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("FRANCESINHA")) {
				JSONObject histobj = new JSONObject();
				histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
					   .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
					   .put("complemento06", ttMov.complemento06).put("nomePortador", ttMov.nomePortador).put("dataMovimento", ttMov.dataMovimento)
					   .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto)
					   .put("valorMulta",ttMov.valorMulta).put("tipoPlanilha", ttMov.tipoPlanilha);
  								
				String modificaData = getModificaData(histobj);
				
				if (modificaData.startsWith("01"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, true);
				if (modificaData.startsWith("02"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, true);
				if (modificaData.startsWith("03"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, false);
				if (modificaData.startsWith("04"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, false);
				if (modificaData.startsWith("05"))  ttMov.dataMovimento = "01/" + cutString(ttMov.dataMovimento, "/");
				if (modificaData.startsWith("06"))  ttMov.dataMovimento = getLastDayOfMonth(ttMov.dataMovimento, true);
			}
 
  
			// ------------------------------------------------------------------------------------------------------------------
			// 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------
			String DATAMOVIMENTO   = "";
			String PORTADOR        = "";
			String CHAVE           = "";
			boolean jaCruzou       = false;
			
			ttMov.valorJuros = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
			ttMov.valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
			ttMov.valorMulta = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorMulta));
			ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
			// ajuste 11/2020 @DiMaz
			if (ttMov.valorDocumento == 0) continue;
 

			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
			if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();
				String transferencia = "NAO";

				if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
				if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

				if (transferencia.equals("SIM")) {
					for (int xx = 0;xx<1;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;

							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");

					ttMov.complemento04 = ttMov.nomeOrigem;
					ttMov.nomeOrigem    = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;
					ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();
					jaCruzou = true;

				}
			}

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
			if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

				Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm   = new Date();
				Date dataMovimentoDateMenosDois = new Date();
				Date dataMovimentoDateMenosTres = new Date();
				Date dataMovimentoDateMaisUm    = new Date();
				Date dataMovimentoDateMaisDois  = new Date();
				Date dataMovimentoDateMaisTres  = new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();

				String transferencia = "NAO";

				if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
					for (int xx = 0;xx<7;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;
							if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
							if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
							if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
							if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
							if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
							if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");
					if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

					ttMov.nomePortador  = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();

				}

			}
			
			if (ttMov.lote.contains("_ancora_")) {
				ttMov.lote = ttMov.lote.replace("_ancora_", "");
			}
			
			if (ttMov.lote.contains("_ANCORA_")) {
				ttMov.lote = ttMov.lote.replace("_ANCORA_", "");
			}


			// ------------------------------------------------------------------------------------------------------------------
			// 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------




			classificacao = "";

			String key2 = ttMov.chave;

			if(ttMov.dataMovimento.length() > 9){
				mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
				anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
				mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
			}

			String trimestreMesAnoAnterior	    = "";
			String trimestreMesAnoAtual   	    = "";
			String descricaoPlanoContaPortador  = "";
			String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
			if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


			if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
			ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
			if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.equals("_")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.equals("-")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.replaceAll("\\$", "").equals("")) ttMov.nomePortador = "EM BRANCO";
			

			contaJuros        = roteiroCRM.optString("contaFixaJuros");
			contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
			contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
			contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
			contaMulta        = roteiroCRM.optString("contaFixaMulta");

			// if(codEmpresa.equals("13")) logger.logDebug("ValorJuros -> " + ttMov.valorJuros + " |contaJuros -> " + contaJuros + " |VAlorMulta -> " + ttMov.valorMulta + " | contaMulta -> " + contaMulta + " |TTMovNO -> " + ttMov.nomeOrigem +  " | ValorDoc -> " + ttMov.valorDocumento);
			

			contaMovimento = "";
			contaPortador  = "";


			if(ttMov.tipoLancamento.contains("PAGAR")) {
				contaMovimento = contaFixaDebito;
				contaPortador  = contaFixaCredito;
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				contaPortador  = contaFixaDebito;
				contaMovimento = contaFixaCredito;
			}
			
			
			
			// exemplo de como vem um registro do complemento_lancaments 
			// 54999667000179-PAG-ANTONIO FLAVIO DE ARAUJO JUNIOR-2021-05-21-180.0
 			
			if (contaMovimento.equals("") && encontrouComplemento){
				try {
				
					String chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 3) + "-" + ttMov.nomeOrigem + "-" + 
					                          cutString(ttMov.dataMovimento, 6) + "-" + cutString(ttMov.dataMovimento, "/", "/") + "-" + cutString(ttMov.dataMovimento, 0, "/") + "-" + 
											  ttMov.valorDocumento;
											  
 																				
											  
 					ttPlano ttP  = (ttPlano)mapaDePara.get(chaveComplemento); 
					if (ttP == null) {							
						ttP  = new ttPlano(); 
						ttP.descricaoPlano = chaveComplemento;
						ttP.contaAnalitica = "";
						ttP.contaContabil     = "";
						mapaDePara.put(chaveComplemento,ttP);
							
						try{
							deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
							}
						catch (Exception e) { 
						}
						if (deParaObj != null && !deParaObj.toString().equals("{}")) {
							if (ttMov.tipoPlanilha.contains("EXTRATO")) {
									ttMov.complemento02 = deParaObj.optString("complemento");
							} else {
								ttMov.complemento01 = deParaObj.optString("complemento");
							}
 							

						} else {
						
							//	 verifica se banco de dados possui ao menos algum lancamento de complemento
							//   se nao encontrar, joga false na encontrouComplemento para ter mais performance e nao buscar no 
							//   banco  de dados a toa
							chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 2);
							try{
								deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
								}
							catch (Exception e) { 
							}
							if (deParaObj == null || deParaObj.toString().equals("{}"))  encontrouComplemento = false;
 						
						}
						

					}  
				} catch  (Exception Ee) {}
			}
			
 
			// Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
			// joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
			if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
				if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
				if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
			}


			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
			contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
			//ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
			//2310-017917 - As regras de centro custo tem validacao com o nome do arquivo e n?o funcionava porque nomeArquivo nao estava sendo passado no getCentroCusto
			ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, nomeArquivo, ttMov.centroCusto); 
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
			if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			JSONObject histobj = new JSONObject();

			histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
				   .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
				   .put("complemento06", ttMov.complemento06).put("complemento07", ttMov.complemento07).put("complemento08", ttMov.complemento08)
				   .put("complemento09", ttMov.complemento09).put("complemento10", ttMov.complemento10).put("dataMovimento", ttMov.dataMovimento)
				   .put("mesAnoAnterior", mesAnoAnterior).put("mesAno2Anterior", mesAno2Anterior).put("mesAnoAtual", mesAnoAtual).put("nomePortador", ttMov.nomePortador)
				   .put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", "").put("contaCredito", "").put("contaJuros", ttMov.contaJuros)
				   .put("contaDesconto", ttMov.contaDesconto).put("contaMulta", ttMov.contaMulta).put("centroCusto", ttMov.centroCusto)
				   .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto).put("valorMulta", ttMov.valorMulta)
				   .put("codFilial", ttMov.codFilial).put("tipoPlanilha", ttMov.tipoPlanilha).put("numeroAba", ttMov.abaPlanilha).put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

			ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			
			// Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
			String parcelaString = "1";
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

			try {
				ttMov.parcelaDoc = Integer.parseInt(parcelaString);
			}
			catch (Exception xx) { ttMov.parcelaDoc = 1;}
			
			//Feito para retirar os indices apos o tipoPlanilha, estavam impactando nas regras do oud
			if(!ttMov.tipoPlanilha.equals("")){
				String sequencia = "";
				try{
					sequencia = cutString(ttMov.tipoPlanilha, ttMov.tipoPlanilha.length()-4).replaceAll("[^0-9]", "");
				}catch(Exception s1){}
				if(ttMov.tipoPlanilha.contains(sequencia)){
					try{
						ttMov.tipoPlanilha = cutString(ttMov.tipoPlanilha, 0, sequencia);
						
					}catch(Exception s2){}
				}
			}
			
			// logger.logDebug("TTMS " + ttMov.tipoPlanilha + " | " + ttMov.complemento01 + " | " + ttMov.nomeOrigem + " | " + ttMov.complemento02);
			
			//#2305-004914. Carrega a chamadas das rotinas getContaMovimento e getContaPortador caso n?o tenha ainda.
			// Classe Principal SC
			Class<?> sc = this.getClass();
			// Instancia da Classe Principal
			Object scInstance = sc.newInstance();
			// Get all Methods from superclass 'SC'.
			java.lang.reflect.Method[] methods = sc.getDeclaredMethods();
			boolean methodFoundPortador = false;
			boolean methodFoundMovimento = false;			
			for(java.lang.reflect.Method method : methods) {
				String methodName = method.getName();				
				methodFoundPortador = false;
				methodFoundMovimento = false;
				if(methodName.toUpperCase().contains("GETCONTAMOVIMENTO")){
					methodFoundMovimento = true;
				}
				if(methodName.toUpperCase().contains("GETCONTAPORTADOR")){
					methodFoundPortador = true;
				}
				try{
					if(methodFoundMovimento) {					
					// Invoca metodo de getContaMovimento.
					contaMovimento = (String) method.invoke(scInstance, contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
					}
					if(methodFoundPortador) {
						// Invoca metodo de getContaPortador.					
						contaPortador = (String) method.invoke(scInstance, contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
					}
				}catch(Exception e){}
				
			}
			
			// Soares - Mudanca no template referente a uma parte do chamado =>> 202208-0017982
			
			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
					if(!ttMov.cpfCnpj.equals("")){
						contaMovimento = ttMov.cpfCnpj;
						if((roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().startsWith("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("PROSOFT")) && !ttMov.cpfCnpj.equals(""))
							contaMovimento = ttMov.cpfCnpj + "P";
					}
				}
				else {ttMov.cpfCnpj = "";}
			}
 			
			regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			// logger.logDebug("CONTINHA "  + contaMovimento + " | " + regraContaMovimento);
			// logger.logDebug("CONTA MOV == "+contaMovimento+" | NO == "+ttMov.nomeOrigem+" | TP = "+ttMov.tipoPlanilha);

			double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
				ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
				ttMov.valorDocumento = valorPrincipal;
			}
			
			ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
			ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
			ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
			// if(roteiroCRM.optString("empresa").toUpperCase().contains("FARMAGIL")){
				// logger.logDebug("TIPO PLANILHINHA == "+ttMov.tipoPlanilha+" | ttMov.contaDesconto - "+ttMov.contaDesconto+" - contaDesconto - "+contaDesconto+" | "+roteiroCRM.optString("contaFixaDesconto"));
			// }
			// logger.logDebug("Contabilidade - "+roteiroCRM.optString("contabilidade")+" - empresa => "+roteiroCRM.optString("empresa"));
			// logger.logDebug("TP - "+tipoPlanilha+" - conta fixa => "+roteiroCRM.optString("contaFixaJuros")+""+roteiroCRM.optString("contaFixaMulta")+""+roteiroCRM.optString("contaFixaDesconto")+"");
			// logger.logDebug("ttMov.contaJuros - "+ttMov.contaJuros+" - ttMov.contaDesconto - "+ttMov.contaDesconto+" - ttMov.contaMulta - "+ttMov.contaMulta);

			// quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
			if (!contaMovimento.contains("IGNORA")) { // colocado para ignorar os lancamentos de partida dobrada quando o lancamento principal eh ignorado 20122022 JWR
				if (ttMov.chave.contains("DOBRADA_JUR") && !ttMov.contaJuros.equals("")) contaMovimento = ttMov.contaJuros;//#2304-002846
				if (ttMov.chave.contains("DOBRADA_DES")) {
					// invers?o de contas em desconto.
					contaMovimento = contaPortador;
					if (!ttMov.contaDesconto.equals("")) contaPortador = ttMov.contaDesconto;
				}
				if (ttMov.chave.contains("DOBRADA_MUL") && !ttMov.contaMulta.equals("")) contaMovimento = ttMov.contaMulta;
			}
			

			boolean regraCRM = false;
			// logger.logDebug("contaMovimento F -> " + contaMovimento);
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

		   	//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);
				}
			}
			
			

			regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
 			
			if (contaMovimento.equals("")){
				// logger.logDebug("Chegou 2");
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					//JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					futureObject.put("codEmpresaPlano", codEmpresaPlanoContas);
					futureObject.put("fazLcdpr", fazLcdpr);
					JSONObject ret = new JSONObject();
					try {
						ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					} catch (Exception e) {
						// logger.logDebug("XABU RET " + e.getMessage());
					}
					if (ret != null) {
						if(ttMov.tipoLancamento.contains("PAGAR") && ret.has("contaDebito")) contaMovimento = ret.optString("contaDebito");
						if(ttMov.tipoLancamento.contains("RECEBER") && ret.has("contaCredito")) contaMovimento = ret.optString("contaCredito");
					}
					//JWR 30012024 
					// logger.logDebug("PEGOU PELO PARTICIPAS " + contaMovimento);
					if (roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE") && contaMovimento.contains("P")) contaMovimento = contaMovimento.replaceAll("P", "");
					
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							// logger.logDebug("SUJANDO "  + cnpjEmpresaRequest + " | " + cnpjContabilidadeRequest + " | " + ttMov.nomeOrigem);
							// logger.logDebug("SUJANDO 2 = "  + ttMov.valorDocumento + " | " + ttMov.nomeOrigem);
							try{
								// logger.logDebug("ttMov.nomeOrigem -> " + ttMov.nomeOrigem);
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
 								
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								// logger.logDebug("contaMovimento -> " + contaMovimento);
								if (contaMovimento == null) contaMovimento = "";
								// logger.logDebug("CONTS " + contaMovimento);
								// Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota 
								if (contaMovimento.contains("T")) {
									apagaContaT    = true;
								}
								
								// logger.logDebug("CMM " + contaMovimento + " | " + apagaContaT);
								
								
							}else contaMovimento = "";
							
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/
							
							// RETIRA  T DA CONTA MOVIMENTO
							contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
							ttP.contaContabil     = contaMovimento;
							mapaDePara.put(ttMov.nomeOrigem,ttP);
						
						} 
						else {
							contaMovimento = ttP.contaContabil;
						}
						
						
					}  
				} catch  (Exception Ee) {}
			}

			if (fazLcdpr.equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO") && !contaMovimento.contains("R")) {
					ObjParticipante objParticipante = (ObjParticipante)mapaParticipante.get(ttMov.nomeOrigem);
					if (objParticipante != null) {
						contaMovimento = contaMovimento + "R" + objParticipante.codigoParticipante;
					}
				}
				
		   	}
			

			
 			
			if(roteiroCRMPrincipal.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
				try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
				}
				catch  (Exception Ee) {}
			}

			String contaTipoFornecedor = "999333";

			boolean eFornecedor = false;
			String  razaoSocial = ttMov.nomeOrigem;
			String  razaoSocialDuplicata = ttMov.nomeOrigem;
			if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

			if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresaPlanoContas)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

				if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					eFornecedor = true;
				}  
			}

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaPortador,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaPortador,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = cutString(contaPortador,0, 20);
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
			}
			
			if(ttMov.tipoLancamento.contains("PAGAR")) {
				ttMov.contaDebito  = cutString(contaMovimento,0, 20);
				ttMov.contaCredito = cutString(contaPortador,0, 20);
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				ttMov.contaCredito  = cutString(contaMovimento,0, 20);
				ttMov.contaDebito   = cutString(contaPortador,0, 20);
			}
			
			// logger.logDebug("CONTASTEMP " + ttMov.contaDebito + " | " + ttMov.contaCredito);
			
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
  				temIgnorar = true;
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
						 .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";")
						 .append(ttMov.nomeOrigem).append(";").append(ttMov.nomePortador).append(";")
						 .append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";")
						 .append(ttMov.complemento05).append(";").append(ttMov.complemento06).append(";;")
						 .append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");
				
				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
 				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;").append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
						 .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
						 .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
						 .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");
 				
 				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			String parcelaAtualeFinal = "";
			String parcelaAtual       = "";

			int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
			if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

			ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
										   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
										   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
			histobj.put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", ttMov.contaDebito)
				   .put("contaCredito", ttMov.contaCredito).put("contaJuros", ttMov.contaJuros).put("contaMulta", ttMov.contaMulta)
				   .put("contaDesconto", ttMov.contaDesconto).put("parcelaAtual", parcelaAtual).put("parcelaAtualeFinal", parcelaAtualeFinal)
				   .put("trimestreMesAnoAnterior", trimestreMesAnoAnterior).put("trimestreMesAnoAtual", trimestreMesAnoAtual).put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase())
				   .put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

			if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresaPlanoContas)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			//yuri - 2309-016305
			boolean methodFoundHistorico = false;
			for(java.lang.reflect.Method method : methods) {
				String methodName = method.getName();				
				methodFoundHistorico = false;
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA2")) {
					methodFoundHistorico = true;
				}
				
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA3")) {
					methodFoundHistorico = true;
				}
				
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA4")) {
					methodFoundHistorico = true;
				}
				
				if(methodFoundHistorico) {					
					// Invoca metodo de getHistoricoRegra
					ttMov.historico = (String) method.invoke(scInstance, contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				}
			}
			// if(codEmpresa.equals("244")) logger.logDebug("HST == "+ttMov.historico+" | VLR == "+ttMov.valorDocumento);
			
			regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
			if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
												   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			// quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
			if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
			if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
			if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta; 
			
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
										  
			if(!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").contains("SCI")){
				ttMov.lote = ttMov.codFilial+"_"+ttMov.lote;
			}

			String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			if (!ttMov.codFilial.equals("")) {
				ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
			}
						
			if (!codParticipante.equals("")) {
				ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
			}

			ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
			if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
				ttMov.historico += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
			}

			// ------------------------------------------------
			//           GERA ARQUIVO PARA O FISCAL
			// ------------------------------------------------
			ttMov.documento = ttMov.documento.trim();
			if (ttMov.documento.startsWith("0")) {
				for (int xx=0;xx<10;xx++) {
					if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
				}
			}

			JSONObject jDescricaoDupl = new JSONObject();
			if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

			if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){
				//Atendimento: 2308-013102 -> Problema ao gerar os relatorios de PELO_FISCAL e Duplicatas nao encontradas
				// eFornecedor = true;
				temFiscal = true;
				apagaStatus = true;
				
				//JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
				//Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
				if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
					ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
				}
				
				String dataVencimentoTTMov = "";
				
				if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
				}	
					

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("VALORMULTA",  ttMov.valorMulta);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
						
						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorAcrecimoAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros+ttMov.valorMulta));
						
						//#2309-015394
						//double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta;
						//String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						//valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
						
						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {													

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorAcrecimoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							//#2309-015394
							//txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					  
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					
					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalCordilheira(jDescricaoDupl, ttMov, geraCabecalhoCordilheira).toString());
							
							geraCabecalhoCordilheira = false;

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				// if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

					// JSONObject jDados = new JSONObject();
					// jDados.put("CODEMPRESA",     codEmpresa);
					
					// //usando a filial do questor em duplicatas em aberto
				   
					// jDados.put("RAZAOSOCIAL",    razaoSocial);
					// jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					// jDados.put("DOCUMENTO",      ttMov.documento);
					// jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					// jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					// jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					// jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					// jDados.put("VALORJUROS",     ttMov.valorJuros);
					// jDados.put("VALORMULTA",     ttMov.valorMulta);
					// jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					// jDados.put("TABELACONTABIL", tabelaContabil);
					// jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					// Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					// dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					// double valorSaldoDuplicata2 = 0;
					// if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					// valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					// ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					// if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						// if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							// String separadorFiscal = "";
							// String dataVencimento  = "";
							// //String parcela		   = "1";
							// String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							// txtFiscal[0].append(cnpjEmpresa);
							// txtFiscal[0].append("    ");

							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							// txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie
							
							// txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
							// txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
							// txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));
							
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							// txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							// if(contaPortador.length() > 1){
								// contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								// if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							// }
							
							// txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// //txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							// txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							// txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita
							
							// txtFiscal[0].append("\r\n");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// } else {
							// if(cabecalhoNaoEncontrada){
								// txtFornecedor.append("Codigo");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Fornecedor/Cliente");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Duplicata");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Data");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor bruto");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor liquido");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Banco");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Obs:");
								// txtFornecedor.append("\r\n");
								// cabecalhoNaoEncontrada = false;
							// }
							// String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							// jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							// txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							// txtFornecedor.append(";");
							// txtFornecedor.append(razaoSocialDuplicata);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.documento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.dataMovimento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							// txtFornecedor.append(";");
							// txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.nomePortador);
							// txtFornecedor.append(";");
							// txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							// txtFornecedor.append("\r\n");

							// jDescricaoDupl.put("TIPO","FORNECEDOR");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// }
					// }
				// }
	
				if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
							jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
							jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
							jDescricaoDupl.put("VALORFINAL",  valorFinal);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
								txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
							}
							else {
								txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
																
							}							
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
				}
			}
			
			/*	
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";
					
 				
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
					}	
					
						
					JSONObject jDados = new JSONObject();
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
 					
 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");	 
				
						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logDebug("ERROR: " + e2.getMessage());
						continue;
					}
					
 					
					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) { 

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
	 
						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;
						
						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
						 
 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) { 
 
							String codContabil = "5700";								 							
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}
								
								
							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");								 
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}
							
 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio
							 
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);
							
						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}
			
			*/
			
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);


				}
			}
			 //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			} 

			chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
			chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
			ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
			String keyAc = chave;
			
			// logger.logDebug("EMPR " + nomeEmpresa + " | " + tipoProduto + " | " + mantemArquivo + " | " + processaOud);
			
			if (((!tipoProduto.equals("OIC_PACOTE") && mantemArquivo.equals("SIM"))  || processaOud.equals("TRUE")) && !ttMov.lote.toUpperCase().contains("_OUD_")) {
				ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
			}
			else {
				if (ttMov.nomeArquivo.contains(".omc")) {
					ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
				}
			}
			
			// logger.logDebug("LOTEE " + ttMov.lote);
 
 			
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);		
			

			ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
			if (ttMov3  == null) {
				ttMov3                = new ttMovimentoPadrao(ttMov);
				ttMov3.valorDesconto   = 0;
				ttMov3.valorJuros      = 0;
				ttMov3.valorDocumento  = 0;
				ttMov3.valorMulta      = 0;
				ttMov3.documento       = "";
			}
			if (ttMov3.documento.equals("")) {
				ttMov3.documento         = ttMov.documento;
			} else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


			ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
			ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
			ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
			ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
			ttMov3.chave = chave;


			// logger.logDebug("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador);
			String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
 			if (!testeChavePortador.equals("")) ttMov3.contador = 3;
			
			if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("DYAD") ||//removido o erp FORTES dessa valida??o - 202301-0023113
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")) ttMov3.contador = 3;
				
			//logger.logDebug("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador+" - AGORA E AGORA -> "+roteiroCRMPrincipal.optString("erpContabilidade"));

			mapaVariavel.put(key,ttMov);
			mapaOficial.put(keyAc,ttMov3);			 			
 
			if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
				if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			}else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			
			//#2305-005880
			//if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
			if (ttMov.tipoPlanilha.contains("OTTCARTAO") && !roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET")) ttMov3.contador = 0;
			
			// if(ttMov.codEmpresa.contains("68345")) logger.logDebug("VALOR = "+ttMov.valorDocumento+" | DT == "+ttMov.dataMovimento+" | CONT = "+ttMov3.contador+" | CHAVE == "+chave);
 
			
			if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
				chave = chave.replaceAll("CTB","CTBPORT");
				if (!testeChavePortador.equals("")) chave = testeChavePortador;

				key = chave;
				ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
				if (ttMov2  == null) {
					ttMov2                = new ttMovimentoPadrao(ttMov);
					ttMov2.contador        = 0;
					ttMov2.valorDesconto   = 0;
					ttMov2.valorJuros      = 0;
					ttMov2.valorDocumento  = 0;
					ttMov2.valorMulta      = 0;
					ttMov2.classificacao     = ttMov.classificacao;

				}
				ttMov2.tipoMovimento     = "CTBPORT";
				ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
				ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
				ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
				ttMov2.chave             = chave;
				ttMov2.chaveExtrato      = "";
				ttMov2.documento         = ttMov3.documento;
				ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
				ttMov2.contador          = ttMov2.contador + ttMov3.contador;
				if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
					ttMov2.naturezaContabil  = "C";
					ttMov2.contaDebito       = "";
					ttMov2.contaCredito      = ttMov.contaCredito;
				}
				if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
					ttMov2.naturezaContabil  = "D";
					ttMov2.contaDebito       = ttMov.contaDebito;
					ttMov2.contaCredito      = "";
				}
				if (ttMov2.valorDocumento == 0) continue; //JWR
				ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
				
				//Descomentar caso haja problema com a perna de portador do lancamento
				if (!ttMov2.codFilial.equals("") && !ttMov2.historico.contains("Filial:")) ttMov2.historico = ttMov2.historico + " Filial:" + ttMov2.codFilial;
				
				String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
					if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
  					ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
				}

				mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
			}
		}
		if(contRegra == -1){
			String codEmp = props.get(empresa + "_COD_EMPRESA");
			String nomeEmp = props.get(empresa + "_NOME_EMPRESA");
			
			String info = tipoPlanilha + ";" + roteiroCRM.optString("codigo");
			compDirName = nomeEmp + "_#" + codEmp;
			String tipoPlanilhaDirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/" + compDirName + "/DePara/Processado/";
			String tipoPlanilhaPath = tipoPlanilhaDirName + "TIPOPLANILHA" + ".txt";
			// inout/contabil/Depaula/vektor_#123/Depara/TIPOPLANILHA.txt
			FileWriter 	arquivoTp = new FileWriter(tipoPlanilhaPath);
			arquivoTp.writeNewFile(info);
			//sssssss
		}


		//-------------------------------------------------------------------------
		// GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
		//-------------------------------------------------------------------------
		if (geraFiscal) {

			String auxExtencao = ".txt";
			if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtFiscal[0].toString());
			
			if (nomeArquivo.toUpperCase().contains("_ID") && !loteFiscal[0].contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + tipoLancamento;

			loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
			
			filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
			writer = new FileWriter(filename);
			writer.writeNewFile(txtFornecedor.toString());
			
			//JWR 2303-000613 Descomentar para quando utilizar arquivos fiscais separados por filial
			/*if (!loteFiscal[i].equals("") && geraNaoEncontradas) {
				loteFiscal[i] = loteFiscal[i].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
				filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[i] + ".csv";
				writer = new FileWriter(filename);
				writer.writeNewFile(txtFornecedor.toString());
				geraNaoEncontradas = false;
			}*/
			
			
		}


		//-------------------------------------------------------------------------
		//--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
		//-------------------------------------------------------------------------


		
		mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			// logger.logDebug("PUTSTATUS 4745");
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
		// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
		// =======================================================================================
  	   
		
		Iterator itLote = mapaLote.keySet().iterator();
		while (itLote.hasNext()) {

			String key = (String)itLote.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			lote = ttLot.lote;

			try {
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_MOVIMENTO")
				.where("LOTE=?")
				.param(lote)
				.execute();
				
 				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_MOVIMENTO")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param("%" + tipoLancamento + "%")
					.param(nomeEmpresa + "_" + "%")
					
					.execute();
					
				}
				
				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_ARQUIVOS")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param(cutString(lote, 0, "_") + "%")
					.param("%" + tipoLancamento + "%")
					.execute();
					
				}
				
				
			} catch (Exception eDel) {
				logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
			}
		}
		// logger.logDebug("ETAPA 04 TEMPLATE ");
	
	
		contRegra = -1;
		Iterator it = mapaOficial.keySet().iterator();
		while (it.hasNext()) {
			
			String chaveExtrato     = "";

			String key = (String)it.next();
			ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
			try {
				ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
			}
			catch (Exception xx) { continue;}

  
			if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
				if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

			}
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
				continue;
			}
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			// quando cliente escolhe para agrupar tudo em um unico lote, mudamos o nome do arquivo.
			
			if (ttMov.valorDocumento == 0) continue;
			
			// logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito);
			// logger.logDebug("PORTAS2 " + ttMov.nomePortador);
			String idLote = cutString(ttMov.lote, "ott_oud", ttMov.lote.indexOf("ott_oud") + 16);//202302-0025707
			
			if (ttMov.lote.contains("ott_oud__id")) idLote = cutString(ttMov.lote, "ott_oud__id", "_");//2308-011361
			if (ttMov.lote.contains("ott_oud_id")) idLote = cutString(ttMov.lote, "ott_oud_id", "_");//2308-011361

			if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) {
				if (ttMov.lote.contains("_CORA_")) {
					ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_CORA_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
				} 
				
				else {
					if (ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) {

						ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_OTTIMIZZA_PROJETO_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
					}
					else {
						if (ttMov.lote.toUpperCase().contains("_OUD_")) {
	
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_ott_oud__id" + idLote + "_" + arquivoAgora  + "_OUD_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						}
					
						else {
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						
						}
					}
				}
				
				
			}
			
			if (ttMov.lote.toLowerCase().contains("ott_oud_")) ttMov.lote = ttMov.lote.replaceAll("__", "_");
  			
			// logger.logDebug("LOTIZIN " + nomeEmpresa + " | " + ttMov.lote);
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);
			

			if(tipoLancamento.contains("PAGAR")){
				ttMov.naturezaContabil = "D";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
			}
			if(tipoLancamento.contains("RECEBER")){
				ttMov.naturezaContabil = "C";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
			}

			JSONObject extratoEmpresa = new JSONObject();

			// CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				chaveExtrato = ttMov.chaveExtrato;

				extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
				.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
				.param(chaveExtrato + "%")
				.queryUnique();

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					if (extratoEmpresa.has("EXTRATOLIDO")) {

						double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

						if (extratoLido == 1) continue;

						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(1)
						.param(chaveExtrato)
						.execute();

					}
				}

			}


			// -----------------------------------------------------------------------------------------------------------
			// COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
			// QUANDO O CLIENTE FINAL ESTIVER RODANDO.
			// -----------------------------------------------------------------------------------------------------------

			if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

				String tipoData = "MOVIMENTO";

				comparaRazao = true;


				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm= new Date();
				Date dataMovimentoDateMenosDois= new Date();
				Date dataMovimentoDateMenosTres= new Date();
				Date dataMovimentoDateMaisUm= new Date();
				Date dataMovimentoDateMaisDois= new Date();
				Date dataMovimentoDateMaisTres= new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;

				String valorFinal = String.format("%.2f", ttMov.valorDocumento);
				valorFinal = valorFinal.replaceAll("\\.",",");

				JSONArray registro = new JSONArray();

				

				JSONObject histobj = new JSONObject();
				ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
				ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
				ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
				ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
				ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
				ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
				ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
				ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
				ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
				ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
				ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
				ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
				ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

				histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
				histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
				histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
				histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
				histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
				histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
				histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
				histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
				histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
				histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
				histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

				String contaPrincipal = "";
				String contraSecundaria = "";

				if (tipoLancamento.contains("PAGAR")) {
					contaPrincipal = ttMov.contaDebito;
					contraSecundaria = ttMov.contaCredito;

				}
				if (tipoLancamento.contains("RECEBER")) {
					contaPrincipal = ttMov.contaCredito;
					contraSecundaria = ttMov.contaDebito;
				}

				regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

				 
				ResumoTxt.append("\r\n");
				ResumoTxt.append("NAO ENCONTRADO;");
				ResumoTxt.append(ttMov.dataMovimento);
				ResumoTxt.append(";");
				ResumoTxt.append(tipoData);
				ResumoTxt.append(";");
				ResumoTxt.append(valorFinal);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.documento);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomeOrigem);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomePortador);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento01);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento02);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento03);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento04);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento05);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento06);
				ResumoTxt.append(";;");

				ResumoTxt.append(ttMov.contaDebito);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.contaCredito);
				ResumoTxt.append(";");
				ResumoTxt.append(regraContaMovimento);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.historico);
				ResumoTxt.append(";");
				ResumoTxt.append(regraHistorico);
				ResumoTxt.append(";;");
				ResumoTxt.append(ttMov.nomeArquivo);
				ResumoTxt.append(";");
				 
			}			
 
			if(tipoLancamento.contains("PAGAR")){

				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
				if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
			}
			if(tipoLancamento.contains("RECEBER")){
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
				if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
			}

			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

			String classificacaoFinal = classificacao + ttMov.classificacao + "01";
			 

			if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}
			
			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			// if(ttMov.codEmpresa.contains("68345")) logger.logDebug("QUATRO " + ttMov.valorDocumento + " | " + ttMov.dataMovimento + " | " + ttMov.tipoPlanilha + " | " + ttMov.tipoMovimento + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase());
			// logger.logDebug("AQQQQ " + roteiroCRM.optString("erpContabilidade") + " | " + roteiroCRMPrincipal.optString("erpContabilidade") + " | " + ttMov.complemento05 + " | " + roteiroCRM.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + ttMov.contaJuros + " | " + ttMov.contaDebito + " | " + ttMov.contaCredito + " | " + classificacao);
			
 
			if (classificacao.startsWith("X")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("CONTADEBITO", ttMov.contaDebito);
				js.put("CONTACREDITO", ttMov.contaCredito);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave  + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

 
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}
					
  				 

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				if(tipoLancamento.contains("PAGAR")){
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
						if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE") 
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
							if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
								js.put("CONTADEBITO", ttMov.contaJuros);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaCredito);
							}
							if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
								js.put("CONTADEBITO", ttMov.contaMulta);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaCredito);
							}
							if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaDesconto);
							}
						}
					
					}
				}
				if(tipoLancamento.contains("RECEBER")){
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
						if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE") 
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
							if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaJuros);
							}
							if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaMulta);
							}
							if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDesconto);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaCredito);
								js.put("CONTACREDITO", ttMov.contaDebito);
							}
						}
					}
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
 				

				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

					//records.put(rec3);
				}
				continue;
			}

			String classJur = "";
			String classDes = "";
			String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}
			}
			
			
			if(tipoLancamento.contains("RECEBER")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}

				}
			}
			  


			if (ttMov.tipoMovimento.equals("CTBPORT")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTBPORT");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTBPORT");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
			 
				//records.put(js);
			}
			if (ttMov.tipoMovimento.equals("CTB")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTB");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
					//records.put(rec3);
				}

				 
				if (ttMov.valorJuros > 0)  {
					classificacaoFinal = classJur;
					JSONObject jsJUR = new JSONObject(js.toString());
					jsJUR.put("LOTE", ttMov.lote);
					jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
					jsJUR.put("DOCUMENTO", ttMov.documento);
					jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
					jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
					jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsJUR.put("HISTORICO", ttMov.historicoJuros);
					jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
					jsJUR.put("VALORJUROS", ttMov.valorJuros);
					jsJUR.put("VALORMULTA", ttMov.valorMulta);
					jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
					jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
					jsJUR.put("NATUREZACONTABIL", "D");
					jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
					jsJUR.put("SERIE", ttMov.serie);
					jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
					jsJUR.put("CLASSIFICACAO", classificacaoFinal);

					jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
					jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
					jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
					jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
					jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
					jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
					jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
					jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
					jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
					jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
					jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
						jsJUR.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsJUR.put("CONTADEBITO",  "");
						jsJUR.put("CONTACREDITO", ttMov.contaJuros);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
				
					//records.put(jsJUR);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsJUR.toString());
						 rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorDesconto > 0)  {
					classificacaoFinal = classDes;
					JSONObject jsDES = new JSONObject(js.toString());
					jsDES.put("LOTE", ttMov.lote);
					jsDES.put("CNPJEMPRESA", cnpjEmpresa);
					jsDES.put("DOCUMENTO", ttMov.documento);
					jsDES.put("CODEMPRESA", ttMov.codEmpresa);
					jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsDES.put("TIPOMOVIMENTO", "CTBDES");
					jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsDES.put("HISTORICO", ttMov.historicoDesconto);
					jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
					jsDES.put("VALORJUROS", ttMov.valorJuros);
					jsDES.put("VALORMULTA", ttMov.valorMulta);
					jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
					jsDES.put("CENTROCUSTO", ttMov.centroCusto);
					jsDES.put("NATUREZACONTABIL", "C");
					jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
					jsDES.put("SERIE", ttMov.serie);
					jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
					jsDES.put("CLASSIFICACAO", classificacaoFinal);

					jsDES.put("COMPLEMENTO01", ttMov.complemento01);
					jsDES.put("COMPLEMENTO02", ttMov.complemento02);
					jsDES.put("COMPLEMENTO03", ttMov.complemento03);
					jsDES.put("COMPLEMENTO04", ttMov.complemento04);
					jsDES.put("COMPLEMENTO05", ttMov.complemento05);
					jsDES.put("COMPLEMENTO06", ttMov.complemento06);
					jsDES.put("COMPLEMENTO07", ttMov.complemento07);
					jsDES.put("COMPLEMENTO08", ttMov.complemento08);
					jsDES.put("COMPLEMENTO09", ttMov.complemento09);
					jsDES.put("COMPLEMENTO10", ttMov.complemento10);
					jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsDES.put("CONTADEBITO", "");
						jsDES.put("CONTACREDITO", ttMov.contaDesconto);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
						jsDES.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
					//records.put(jsDES);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsDES.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorMulta > 0)  {
					classificacaoFinal = classMul;
					JSONObject jsMUL = new JSONObject(js.toString());
					jsMUL.put("LOTE", ttMov.lote);
					jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
					jsMUL.put("DOCUMENTO", ttMov.documento);
					jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
					jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
					jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsMUL.put("HISTORICO", ttMov.historicoMulta);
					jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
					jsMUL.put("VALORJUROS", ttMov.valorJuros);
					jsMUL.put("VALORMULTA", ttMov.valorMulta);
					jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
					jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
					jsMUL.put("NATUREZACONTABIL", "D");
					jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
					jsMUL.put("SERIE", ttMov.serie);
					jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
					jsMUL.put("CLASSIFICACAO", classificacaoFinal);

					jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
					jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
					jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
					jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
					jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
					jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
					jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
					jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
					jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
					jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
					jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
						jsMUL.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsMUL.put("CONTADEBITO",  "");
						jsMUL.put("CONTACREDITO", ttMov.contaMulta);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
					
					//records.put(jsMUL);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsMUL.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
					   //records.put(rec3);
					}
				}
			}
		}
		// JWR adicionamos essa parte para mandar uma mensagem personalizada para o cliente, no caso de apenas nao conseguir ler os movimentos e nao um erro de layout
		// vamos descomentar depois de adicionar todas as validacoes sobre fiscal e afins
		// logger.logDebug("contRegra -> " + contRegra + " | temFiltro -> " + temFiltro);
		
		/*if (roteiroCRMPrincipal.optString("contabilidade").toUpperCase().contains("MICALI")) */
 		
		/*if (contRegra > 0 && nomeArquivo.toUpperCase().contains("_ID") && nomeArquivo.toUpperCase().contains(".PDF")) {
			// logger.logDebug("ENTROU 34");
			putStatus(dirName, "03--Etapa 3 de 4 LEUCONVERSORANTIGO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
		}*/
		
		//#2304-002843. Melhorias no feedback
		if (contRegra < 0 && nomeArquivo.toUpperCase().contains("_ID") && !nomeArquivo.toUpperCase().startsWith("OK_DEPARACONTA") && ((roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !temFiscal && !mantemArquivo.equals("SIM")) || !roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE"))) {
			if (temFiltro) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temIgnorar) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			 	}
			} else if (temLinhas) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temOFX || retornaPadroes.equals("break")) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			}
			
		}
		
		if (apagaExtrato) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_EXTRATO")
				.where("CODEMPRESA=?")
				.param(codEmpresa)
				.execute();
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR EXTRATO " + e.getMessage());
			}
		}
		
		// Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras 
		if (apagaContaT) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				
				if (tipoLancamento.contains("PAGAR")) {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
				else {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
			}
		}
		// resumo comparativo com razao
		String idLoteResumo = "";
		if (comparaRazao) {
			if(loteEtapaTres.toUpperCase().contains("_ID") && fornecedorUnico.contains("EXIBE_RESUMO")){
				idLoteResumo = "_ID"+cutString(loteEtapaTres.toUpperCase(), "_ID", "_")+"_";
			}
			String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerRazao.writeNewFile(ResumoTxt.toString());
		}
		
		if(logs){
			String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerLogs = new FileWriter(filenameLogs);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerLogs.writeNewFile(logsTxt.toString());
		}

		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
		//-------------------------------------------------------------------------------------
		String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
		// Cria o arquivo de DE-PARA FORNECEDOR
		FileWriter writer = new FileWriter(filename);
		writer.writeNewFile(txtDePara.toString());

		Iterator ite = mapaLote.keySet().iterator();
		while (ite.hasNext()) {
			String key = (String)ite.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			// =======================================================================================
			// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
			// =======================================================================================
			lote = ttLot.lote;     

  			
			ultimoJS = new JSONObject();
			ultimoJS.put("LOTE", lote);
			ultimoJS.put("DOCUMENTO", "");
			ultimoJS.put("CODEMPRESA", codEmpresa);
			ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
			ultimoJS.put("DATAMOVIMENTO", "");
			ultimoJS.put("TIPOMOVIMENTO", "");
			ultimoJS.put("TIPOLANCAMENTO", "");
			ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
			ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
			ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
			ultimoJS.put("VALORLIQUIDACAO", 0);
			ultimoJS.put("VALORDOCUMENTO", 0);
			ultimoJS.put("VALORDESCONTO", 0);
			ultimoJS.put("VALORJUROS", 0);
			ultimoJS.put("VALORMULTA", 0);
			ultimoJS.put("NOMEPORTADOR", "");
			ultimoJS.put("CENTROCUSTO", "");
			ultimoJS.put("NATUREZACONTABIL", "");
			ultimoJS.put("NOMEORIGEM", "");
			ultimoJS.put("CPFCNPJ", "");
			ultimoJS.put("SERIE", "");
			ultimoJS.put("STATUSMOVIMENTO", 0);
			ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
			ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
			ultimoJS.put("STATUSMOVIMENTO", 1);
			records.put(ultimoJS);
			// Resumo Planilha
			try {
				String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
				File file = new File(dirName1);
				try {
					String diretorio = dirName1;
					File file2 = new File(diretorio);
					File[] files = file2.listFiles();
					if (FileUtil.dirHasFiles(diretorio)) {
						for (File fl: files) {
							if (fl.isFile()){
								if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
									// ELIMINA ARQUIVO IMPORTADO
									file = new File(dirName1);
									if (file.exists()){
										FileUtil.deleteFile(dirName1+fl.getName());
									}
								}
							}
						}
					}
				} catch (Exception ee) {
					logger.logError(ee);
				}
			}catch (Exception e) {
				logger.logError(e);
			}
		}
	} catch (Exception ee) {
		logger.logError("EndpointA: ", ee);
	} finally {
	
		try {
			if (dbIOCont != null) {
				dbIOCont.closeConnection();
			}
			if (dbIODepara != null) {
				dbIODepara.closeConnection();
			}
		} catch (Exception ee) {}
	}
	return records;
}

class ttLote {
	public String lote;
	public String tipoPlanilha;
	public ttLote(){}
	public ttLote(ttLote tt){
		lote=tt.lote;
		tipoPlanilha=tt.tipoPlanilha;		
	}
}

class ttArquivo {
	public String arquivo;
	public String abas;
	public ttArquivo(){}
	public ttArquivo(ttArquivo tt){
		arquivo=tt.arquivo;
		abas=tt.abas;
	}
}

class ttDocumento {
    public String documento;
	public double valorDocumento;
     public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
 		valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
	public String documento;
	public double valorJur;
	public int valorLido;
	public ttJuros(){}
	public ttJuros(ttJuros ttJ){
		documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
	}
}

class ttDesconto {
	public String documento;
	public double valorDesc;
	public int valorLido;
	public ttDesconto(){}
	public ttDesconto(ttDesconto ttD){
		documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
	}
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttFornecedor {
	public String nomeOrigem;
	public String contaMovimento;
	public ttFornecedor(){}
	public ttFornecedor(ttFornecedor ttF){
		nomeOrigem 	 = ttF.nomeOrigem;
		contaMovimento = ttF.contaMovimento;
	}
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

	try {
		if(extensao.contains("CSV")) {

			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
				if (memFile.getFilename().toUpperCase().contains("CSV")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length < fields2.length) { separadorCsv = ","; break; }
								if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
		
		
		
		if(extensao.contains("TXT")) {
			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							String [] fields3 = line.split("\t");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
								if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
								if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
	
	}
	 catch(Exception xx) {}
	
	return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
	int validaCampo = -1;
	try {
		if (!roteiroIndice.optString(nomeCampo).equals("")) {
			try {
				validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
			}
			catch (Exception xx) { validaCampo = -1;}
		}
	}
	catch (Exception xx) {validaCampo = -1;}
	return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
	ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
	if (ttMov4 == null) {
		ttMov4 = new ttMovimentoPadrao(ttMov2);
		ttMov4.chave                    = chave;
		if(gerarApenasValorDocumento){
			ttMov4.valorDesconto            = 0;
			ttMov4.valorMulta               = 0;
			ttMov4.valorJuros               = 0;
		}
		ttMov4.classificacao            = classificacao;
		switch(complemento){
			case 1: ttMov4.complemento01 = textoComplemento; break;
			case 2: ttMov4.complemento02 = textoComplemento; break;
			case 3: ttMov4.complemento03 = textoComplemento; break;
			case 4: ttMov4.complemento04 = textoComplemento; break;
			case 5: ttMov4.complemento05 = textoComplemento; break;
			case 6: ttMov4.complemento06 = textoComplemento; break;
		}
		mapaVariavel.put(chave, ttMov4);
	}
	return mapaVariavel;
}


public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
	JSONObject response	= new JSONObject();
	String validar		= objIn.optString("validar");
	String [] validaArr	= validar.split(";");
	String changeIt		= "";
	String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
	String changeDate	= "dataMovimento";
	String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

	for (String parameter : validaArr) {
		response.put(parameter,	"");

		// String indiceAux = "";
		String indiceAux = getColunaAlternativa(parameter,	objIn);
		if (!indiceAux.equals("")) {
			if (changeDate.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						if (!dataStrAux.equals("")) {
							String dataMovAux = getCampoDate(dataStrAux);
							if (dataMovAux.contains("/")) {
								String dataAlternativa = getCampoDate(dataStrAux);
								response.put(parameter,	dataAlternativa);
								response.put("dataLote", dataAlternativa);
								changeIt = changeIt+";"+parameter;
								
								//feito pra que as proximas iteracoes ja tenham o dado atualizado
								objIn.put(parameter, dataAlternativa);
							}
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
				}
				
			} else if (changeValue.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try {
						int iAux  = Integer.parseInt(indiceAux);
						if(iAux >=0){
							double valorAlternativo = memFile.getDoubleField(iAux);
							response.put(parameter, valorAlternativo);
							changeIt = changeIt+";"+parameter;
							
							//feito pra que as proximas iteracoes ja tenham o dado atualizado
							objIn.put(parameter, valorAlternativo);
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

				}
				if (indiceAux.contains(";")) {
					double valorAlternativo = 0;
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux = Integer.parseInt(k);
							valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
						}
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }
					
					if (valorAlternativo != 0) {
						response.put(parameter, valorAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, valorAlternativo);
					}
				}
			} else if (changeText.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
				}
				if (indiceAux.contains(";")) {
					String textoAlternativo = "";
					
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux	 = Integer.parseInt(k);
							textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
							textoAlternativo = textoAlternativo.trim();
						}
						if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();
						
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }
					
					if (!textoAlternativo.equals("")) {
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					}
				}
			} else {
				response.put(parameter, "");
				objIn.put(parameter, "");
			}
		}
	}
	
	response.put("changeIt",	changeIt);
	return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
	
	nomeArquivo = StringUtil.removeSpecialCharsToUC(nomeArquivo);


	if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
	if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
	if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
	if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
	if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb, String tipoLancamento, String nomeArquivo, InoutLogger logger) throws Exception {
	logger.logDebug("ENTROU PROTOCOLOCONV");
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	nomeArquivo = cutString(nomeArquivo, 0, ".pdf");
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;
			for (File fl: files) {
				// logger.logDebug("FL " + fl.getAbsolutePath()+ " | " + nomeArquivo + " | " + tipoLancamento);
				if (fl.getAbsolutePath().contains(tipoLancamento) && fl.getAbsolutePath().contains(nomeArquivo)) {
					// logger.logDebug("AQ FOI " + fl.getAbsolutePath());
					if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
						String diretorioArquivoCsv = "C:/inout/contabil/";
						String testeCsv = "";									
						String contabilidadeCsv = "";
						String empresaCsv = "";
						
						// logger.logDebug("ENTROU NOS PDFFFFFF");
						
						if (fl.getAbsolutePath().contains("pagar_")) {
							try {											
								testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
								contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
								empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
								empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
								diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
							} catch (Exception e) {
								logger.logDebug("ERRO AO CORTAR ARQUIVO " + e.getMessage());
							}
						}
						else if (fl.getAbsolutePath().contains("receber_")) {
							try {											
								testeCsv = cutString(fl.getAbsolutePath(), "receber_");
								contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
								empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
								empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
								diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
							} catch (Exception e) {
								logger.logDebug("ERRO AO CORTAR ARQUIVO " + e.getMessage());
							}
						}
						String arquivoDeployStr = "";
						try {
							// mantivemos o ancora no nome do arquivo para saber que foi convertido e usado nos extratos
							arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
						} catch (Exception e) {
							logger.logDebug("NAOCRIOURODACONVERSOR " + e.getMessage());
						}
						logger.logDebug("DIRETORIOS " + diretorioArquivoCsv + " | " + arquivoDeployStr);
						if (!arquivoDeployStr.equals("")) {
							File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
							//logger.logDebug("COPIOUARQUIVO " + arquivoDeploy.getName());
							FileUtil.copyFolder(fl, arquivoDeploy);
							
							try { 
								FileUtil.deleteFile(fl);
							} catch (Exception XX) {}
						}
						if (!notificouProtocolo) {
							notificouProtocolo = true;
							String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
						}
						continue;
					}
				}
			}
		if (notificouProtocolo) return true;
	}
	return false;
}

public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
		 String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
		 if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
		 if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
		// roda requisicao para atualizar o satus do protocolo
		JSONObject bodyProtocolo = new JSONObject();
		bodyProtocolo.put("status", statusProtocolo).put("mensagem", mensagem);
		String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
		return atualizaStatus;
	} catch (Exception xx) {
		logger.logDebug(" Erro ao Atualizar Status " + xx);
		return "";
	}
 
}

















































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-02118323");
    js.put("idRoteiro", "a0ASG0000035zh4");
    js.put("idEmpresa", "a0qSG000002kX9XYAU");
    js.put("idContabilidade", "a096R00002lUUdT");
    js.put("CnpjContabilidade", "18.764.038/0001-04");
    js.put("CnpjEmpresa", "05.596.740/0001-56");
    js.put("fornecedor", "5");
    js.put("dataMovimento", "1");
    js.put("portador", "4");
    js.put("documentoNF", "5");
    js.put("valorDocumento", "7");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "0");
    js.put("complemento02", "2");
    js.put("complemento03", "3");
    js.put("complemento04", "5");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Mapahsaoluis");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Superclinic");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "ALTERDATA");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PRINCIPAL");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "EMPRESA");
    js.put("Rotulo_Complemento_02", "CONTA");
    js.put("Rotulo_Complemento_03", "CONTAFINANCEIRA");
    js.put("Rotulo_Complemento_04", "HISTORICO(ORIGINAL)");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroZZPADRAOOTTIMIZZAPAG1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2021-1016997");
    js.put("idRoteiro", "a0ASG0000035zh4");
    js.put("idEmpresa", "a0q6R000007KGdjQAG");
    js.put("idContabilidade", "a091500001BVcOf");
    js.put("CnpjContabilidade", "10.000.000/0000-0");
    js.put("CnpjEmpresa", "1");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "2");
    js.put("dataMovimento", "0");
    js.put("portador", "6");
    js.put("documentoNF", "1");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "5");
    js.put("complemento01", "3");
    js.put("complemento02", "7");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Mapahsaoluis");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Superclinic");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "OFICIAL PLANILHA PADRAO OTTIMIZZA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    String [] campos1 = "DATA PAGAMENTO;DOCUMENTO;FORNECEDOR;DETALHES DO PAGAMENTO".split(";");
    for (int x=0;x<campos1.length;x++) {
        if (!line.contains(campos1[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "ZZPADRAOOTTIMIZZAPAG1";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (nomeOrigem.contains("OFTALMOCLINICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "506";
        contaMovimento = "506";
    }
    if (nomeOrigem.contains("UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("CAPITALIZACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "63";
        contaMovimento = "63";
    }
    if (nomeOrigem.contains("VEXPENSES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COPYMASTER")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PROINDDY")) {
        conta = "515";
        contaMovimento = "515";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BITAL AMBIENTAL")) {
        conta = "607";
        contaMovimento = "607";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRITOS&SOARES LTDA")) {
        conta = "426";
        contaMovimento = "426";
    }
    if (nomeOrigem.contains("PENHA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEUENSCHWANDER")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("CANTINHO DOCE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARTAO") && nomeOrigem.contains("ANUIDADE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("DIAGNOSTICO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CENTRO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLINICA") && nomeOrigem.contains("UROLOGIA")) {
        conta = "678";
        contaMovimento = "678";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLINICA OTOMED")) {
        conta = "509";
        contaMovimento = "509";
    }
    if (nomeOrigem.contains("TECNOLOGIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EXCEDENTE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("COLOPROCTOLOGIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INSTITUTO")) {
        conta = "470";
        contaMovimento = "470";
    }
    if (nomeOrigem.contains("INSTITUTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OTORRILARINGOLOGIA")) {
        conta = "904";
        contaMovimento = "904";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AJUSTE CARTOES")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento02.contains("DEPOSITO") && complemento02.contains("DINHEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("DFN") && nomeOrigem.contains("VERONEZE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEGOCIOS") && nomeOrigem.contains("HR")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("AMERICANAS") && complemento05.contains("LOJAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MARANHAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MOTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SUPERMERCADOS") && nomeOrigem.contains("MATEUS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OFTALMO CARE")) {
        conta = "505";
        contaMovimento = "505";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PROTEGE") && nomeOrigem.contains("PREVENCAO")) {
        conta = "516";
        contaMovimento = "516";
    }
    if (nomeOrigem.contains("SOS FISIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("DIVERSOS") && nomeOrigem.contains("FORNECEDOR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("RIACHUELO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LOJAS")) {
        conta = "161";
        contaMovimento = "161";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CONFRATERNIZACOES") && complemento02.contains("EVENTOS")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (nomeOrigem.contains("INTERNERT") && nomeOrigem.contains("EQUATORIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("AG") && nomeOrigem.contains("CAPITAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "564";
        contaMovimento = "564";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OTO4") && nomeOrigem.contains("CLINICA")) {
        conta = "831";
        contaMovimento = "831";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("HB ASSESSORIA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NF") && nomeOrigem.contains("FALTA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("ARTCOM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INFORMATICA")) {
        conta = "606";
        contaMovimento = "606";
    }
    if (nomeOrigem.contains("ALVORADA") && nomeOrigem.contains("MOTOCICLETAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "596";
        contaMovimento = "596";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ELETROMEDICINA LTDA")) {
        conta = "860";
        contaMovimento = "860";
    }
    if (nomeOrigem.contains("FARMACIA") && nomeOrigem.contains("DROGASIL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("2372") && nomeOrigem.contains("DARF")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EQUATORIAL") && nomeOrigem.contains("TELECOMUNICACOES")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("NF") && complemento05.contains("CARTAO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAIXA") && nomeOrigem.contains("PREVIDENCIA")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALMEIDA") && nomeOrigem.contains("ARTHUR")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("AJUSTE CARTOES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARDOSO") && nomeOrigem.contains("C")) {
        conta = "693";
        contaMovimento = "693";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF") && complemento03.contains("EVENTOS/CONFRATERNIZACOES")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && !nomeOrigem.contains("FALTA NF") && nomeOrigem.contains("VITALMED")) {
        conta = "528";
        contaMovimento = "528";
    }
    if (nomeOrigem.contains("ASSOCIACAO") && nomeOrigem.contains("COMERCIAL") && complemento02.contains("CLASSE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA") && nomeOrigem.contains("TELECOMUNICACOES") && nomeOrigem.contains("BIPMAR")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("BRITO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("ASSESSORIA")) {
        conta = "677";
        contaMovimento = "677";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EIRELI") && nomeOrigem.contains("FERREIRA") && complemento05.contains("VIEIRA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CANTANHEDE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FREITAS") && nomeOrigem.contains("LTDA")) {
        conta = "432";
        contaMovimento = "432";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RODRIGUES") && nomeOrigem.contains("CARVALHO") && nomeOrigem.contains("SERVICOS")) {
        conta = "433";
        contaMovimento = "433";
    }
    if (nomeOrigem.contains("CLICK") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TELEMEDICINA") && nomeOrigem.contains("LAUDOS")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARQUES") && nomeOrigem.contains("MEDICOS")) {
        conta = "445";
        contaMovimento = "445";
    }
    if (nomeOrigem.contains("MELO") && nomeOrigem.contains("CIA") && nomeOrigem.contains("NETO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEIS") && nomeOrigem.contains("3208") && nomeOrigem.contains("DARF")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEPOSITO BANCARIO") && complemento02.contains("DINHEIRO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("DEPOSITO SANTANDER") && complemento02.contains("DINHEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("PAC") && nomeOrigem.contains("PIX") && nomeOrigem.contains("DEV") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (complemento02.contains("TELEFONIA") && complemento02.contains("FIXA") && complemento02.contains("ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento01.contains("HORTAS") && complemento02.contains("ADM") && complemento02.contains("INTERNET") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("ENCARGOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CRED") && nomeOrigem.contains("LIMITE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("OPTICA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("FIBRA") && complemento01.contains("TURU")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento02.contains("CLIENTES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAC") && complemento02.contains("DEVOLUCOES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DEVOLUCOES") && complemento02.contains("CLIENTES") && nomeOrigem.contains("PIX")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FRIOS") && nomeOrigem.contains("COMERCIO")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (nomeOrigem.contains("PLACAS") && nomeOrigem.contains("PAINES") && nomeOrigem.contains("IMPRESSIONE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CIDADANIA") && nomeOrigem.contains("INSTITUTO") && nomeOrigem.contains("EMPRESARIAL")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("INSTITUTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MEDICO") && nomeOrigem.contains("CARDIOLOGICO")) {
        conta = "467";
        contaMovimento = "467";
    }
    if (nomeOrigem.contains("MEDICO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ULTRASSONOGRAFIA") && nomeOrigem.contains("INSTITUTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MEDICOS") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("ISA")) {
        conta = "617";
        contaMovimento = "617";
    }
    if (nomeOrigem.contains("GONCALVES") && nomeOrigem.contains("DOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("S")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("VELOSO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("CASTRO")) {
        conta = "941";
        contaMovimento = "941";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLINICA") && nomeOrigem.contains("REABILITA") && nomeOrigem.contains("FISIOTERAPIA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ESPACO VITAL CENTRO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("FEC") && nomeOrigem.contains("MEDICOS") && nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MEDICA") && nomeOrigem.contains("MERC") && nomeOrigem.contains("HOSPSERVICE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IPANEMA") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("MEDICOS")) {
        conta = "682";
        contaMovimento = "682";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("REZENDE") && nomeOrigem.contains("FONSECA") && nomeOrigem.contains("FREITAS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("ANDREA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("L5") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TELECOMUNICACOES") && nomeOrigem.contains("NETWORKS")) {
        conta = "548";
        contaMovimento = "548";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("LE") && complemento05.contains("BISCUIT") && complemento05.contains("9870")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SOCORRO") && nomeOrigem.contains("PERPETUO") && nomeOrigem.contains("MARIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("LIMA") && nomeOrigem.contains("MATOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MARANHENSE") && nomeOrigem.contains("INFORMATICA") && nomeOrigem.contains("MULTIMIDIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("RESENDE") && nomeOrigem.contains("CLINICA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MATOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("ZACHEU") && nomeOrigem.contains("KIO") && nomeOrigem.contains("NEUDSON") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OCIDENTAL") && nomeOrigem.contains("COMERCIO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("POTIGUAR") && nomeOrigem.contains("MATERIAIS") && nomeOrigem.contains("CONSTRUCAO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("MAIOBAO") && complemento02.contains("REGULARIZACOES") && complemento02.contains("ALVARAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("PRIOS") && nomeOrigem.contains("SEGURANCA") && nomeOrigem.contains("VIGILANCIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("PROINDDY")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("RENATA GONCALVES SANTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("REUMAGEN") && nomeOrigem.contains("REUMATOLOGIA") && nomeOrigem.contains("ENDOSCOPIA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("S") && nomeOrigem.contains("GINECOLOGIA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SERVCON") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSULTAS") && nomeOrigem.contains("SERVICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MARANHAO") && nomeOrigem.contains("URGENCIA") && nomeOrigem.contains("SERVICO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("RATICIDA") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("CF") && complemento05.contains("049265")) {
        conta = "328";
        contaMovimento = "328";
    }
    if (nomeOrigem.contains("T ARRUDA RIBEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "537";
        contaMovimento = "537";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TALLOS TECNOLOGIA INTEGRADA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ODONTOLOGICOS") && nomeOrigem.contains("TAMBAU")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DEVOLUCAO DE FORNECEDORES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("I") && nomeOrigem.contains("TRANSF") && nomeOrigem.contains("COHAB")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("TRANSF") && nomeOrigem.contains("DOC") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("HORTAS")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("DOC") && nomeOrigem.contains("MEDICAL") && nomeOrigem.contains("TRANSF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("GRANDE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF") && nomeOrigem.contains("RUA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("TURU") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF") && nomeOrigem.contains("DOC")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("TREASY SISTEMAS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("KBF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("UNIVERSAL") && nomeOrigem.contains("INFORMATICA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("JOSE") && complemento05.contains("MARIA") && nomeOrigem.contains("UROCLINICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("VOLUS") && nomeOrigem.contains("TECNONOGIA") && nomeOrigem.contains("BENEFICIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("VR") && nomeOrigem.contains("BENEFICIOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CENTER")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("AEREAS") && nomeOrigem.contains("LINHAS") && nomeOrigem.contains("GOL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("LOCAWEB") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("INTERNET") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TECNOLOGIA") && complemento02.contains("SOFTWARE") && nomeOrigem.contains("PLUGA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("PASSAGENS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RODOLFO") && nomeOrigem.contains("SR")) {
        conta = "401";
        contaMovimento = "401";
    }
    if (nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TECNOSERV") && nomeOrigem.contains("EQUIPAMENTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("OLIVE") && complemento05.contains("LUIZ") && complemento05.contains("FABIO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("JULIANA") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("DRA") && complemento05.contains("MARIA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SET") && nomeOrigem.contains("TRANSPORTE") && complemento01.contains("HORTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento02.contains("TELEFONIA FIXA") && nomeOrigem.contains("EMBRATEL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("SOCIOS") && nomePortador.contains("CAIXA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PREVIDENCIA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("AWS") && nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("NF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLINICA SAMARY LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("PVC SOUSA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CASTRO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMERCIAL") && nomeOrigem.contains("NF")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("IMIFARMA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PRODUTOS") && nomeOrigem.contains("FARMACEUTICOS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("FARMACEUTICOS") && nomeOrigem.contains("PRODUTOS") && nomeOrigem.contains("IMIFARMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAG. DIVERSOS-DUPLICIDADE-MOUTA COIMBRA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("PFM COMERCIAL LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MUNICIPAL") && nomeOrigem.contains("PREFEITURA") && nomeOrigem.contains("ALVARA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (complemento05.contains("ELETRONICO") && complemento05.contains("COMERCIO") && complemento05.contains("NF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("REFORMA") && complemento05.contains("MATERIAL") && complemento05.contains("NF")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MATERIAL") && complemento05.contains("NF") && complemento02.contains("REFORMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("CF") && nomePortador.contains("CAIXA") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("COMPRA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("NORTE") && nomeOrigem.contains("VIVO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TELECOMUNICACOES")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento02.contains("DEVOLUCOES A CLIENTES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CANTINHO") && complemento03.contains("EVENTOS/CONFRATERNIZACOES") && nomeOrigem.contains("DOCE")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (complemento03.contains("DEVOLUCOES A CLIENTES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("J") && nomeOrigem.contains("FRIOS") && nomeOrigem.contains("F") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (nomeOrigem.contains("LTDA") && nomeOrigem.contains("HR") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEGOCIOS")) {
        conta = "665";
        contaMovimento = "665";
    }
    if (complemento03.contains("DOACOES - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("MATEUS") && complemento03.contains("EVENTOS/CONFRATERNIZACOES") && nomeOrigem.contains("SUPERMERCADOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (complemento03.contains("ALVARAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PREFEITURA") && nomeOrigem.contains("MUNICIPAL")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (nomeOrigem.contains("LUIS") && nomeOrigem.contains("VIVO") && nomeOrigem.contains("HENRIQUE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("LUCILENE") && nomeOrigem.contains("VIVO") && nomeOrigem.contains("SABOIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("FARMACIA") && nomeOrigem.contains("DROGASIL") && complemento02.contains("MEDICAMENTOS") && nomeOrigem.contains("GLOBO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (nomeOrigem.contains("FARMACIA") && nomeOrigem.contains("DROGASIL") && complemento02.contains("MEDICAMENTOS") && nomeOrigem.contains("DROGARIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (nomeOrigem.contains("ACAO") && nomeOrigem.contains("ENFERMAGEM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PROCESSO") && nomeOrigem.contains("JUDICIAL")) {
        conta = "166";
        contaMovimento = "166";
    }
    if (nomeOrigem.contains("JUDICIAL") && nomeOrigem.contains("PROCESSO") && nomeOrigem.contains("ACAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("AMADEU")) {
        conta = "166";
        contaMovimento = "166";
    }
    if (nomeOrigem.contains("AEREAS") && nomeOrigem.contains("AZUL") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RODOLFO") && nomeOrigem.contains("LINHAS")) {
        conta = "401";
        contaMovimento = "401";
    }
    if (nomeOrigem.contains("SERVCOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRUNO") && nomeOrigem.contains("HENRIQUE") && nomeOrigem.contains("PEREIRA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAIXA") && nomeOrigem.contains("PREVIDENCIA") && nomeOrigem.contains("RODOLFO") && nomeOrigem.contains("GUSTAVO")) {
        conta = "401";
        contaMovimento = "401";
    }
    if (complemento05.contains("NF") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("MATERIAL") && complemento05.contains("76036") && complemento05.contains("PINTURA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("NF") && complemento05.contains("74289") && complemento05.contains("PREDIO") && complemento05.contains("TINTA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CONSELHO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MEDICINA") && complemento01.contains("COHAB") && complemento01.contains("I")) {
        conta = "400";
        contaMovimento = "400";
    }
    if (complemento05.contains("LTDA") && complemento05.contains("DR") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("SAMPAIO") && complemento05.contains("SERVICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("FIBRA") && complemento02.contains("OPTICA") && complemento01.contains("COHAB") && complemento01.contains("II")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AJUSTE CARTOES") && nomeOrigem.contains("NET") && nomeOrigem.contains("GET")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("SERVICOS") && nomeOrigem.contains("ITAERCIO") && nomeOrigem.contains("PAULINO") && nomeOrigem.contains("JUNIOR")) {
        conta = "473";
        contaMovimento = "473";
    }
    if (nomeOrigem.contains("C") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("J") && nomeOrigem.contains("SANTOS") && nomeOrigem.contains("M")) {
        conta = "477";
        contaMovimento = "477";
    }
    if (nomeOrigem.contains("ARIMATEIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOSE") && nomeOrigem.contains("ALVES") && nomeOrigem.contains("MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("PAULO") && nomeOrigem.contains("JOAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INFORMATICA") && nomeOrigem.contains("TOLEDO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("KAIM SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("DRA") && complemento05.contains("ANDREIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("ANDREA") && nomeOrigem.contains("MEDICOS") && complemento05.contains("DRA") && nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("ANDRE") && nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MEDICOS") && complemento05.contains("DRA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && nomeOrigem.contains("PEREIRA") && nomeOrigem.contains("BRUNA") && nomeOrigem.contains("LAISA")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (nomeOrigem.contains("MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LEAL") && nomeOrigem.contains("FEITOSA") && nomeOrigem.contains("SERVICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SABOIA") && nomeOrigem.contains("ASSISTENCIA") && nomeOrigem.contains("MEDICA") && nomeOrigem.contains("M") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("M") && nomeOrigem.contains("B") && nomeOrigem.contains("RIBEIRO") && nomeOrigem.contains("I") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MEDICOS") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("2") && nomeOrigem.contains("M") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("ASSESSORIA CONTABIL") && nomeOrigem.contains("CONTADORES") && nomeOrigem.contains("MAPAH") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MRQ ALENCAR SERVICOS MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NAIRA FERNANDA PESSOA COSTA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("IMPRESSORAS") && nomeOrigem.contains("COPIADORAS") && nomeOrigem.contains("LOCACAO") && nomeOrigem.contains("NORDESTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FUTURE") && nomeOrigem.contains("OFTALMOMAR") && nomeOrigem.contains("MEDICAL") && nomeOrigem.contains("DIAGNOSTIC")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CENTER") && complemento01.contains("HORTAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VR") && nomeOrigem.contains("MARCUS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RESPIMAR") && nomeOrigem.contains("CENTRO") && nomeOrigem.contains("DOENCAS") && nomeOrigem.contains("RESPIRATORIAS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("TERAPEUTICOS") && nomeOrigem.contains("RMA") && nomeOrigem.contains("MEDICOS") && nomeOrigem.contains("SERVICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("DIAGNOSTICOS") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("SANTILHA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("ARRITMIA") && nomeOrigem.contains("MARCAPASSO") && nomeOrigem.contains("SEAME")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("ASSOCIACOES") && complemento02.contains("CLASSE") && complemento01.contains("HORTAS") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMERCIAIS")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SOCIEDADE") && nomeOrigem.contains("FUNERARIA") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("POSTUMOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FACEBOOK") && complemento02.contains("PATROCINIOS") && nomeOrigem.contains("SERVICOS") && complemento02.contains("PROPAGANDAS")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (nomeOrigem.contains("INTERNET") && complemento02.contains("PROPAGANDAS") && nomeOrigem.contains("GOOGLE") && complemento02.contains("PATROCINIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (nomeOrigem.contains("TOP RISO CLINICA ODONTOLOGICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MARCUS") && nomeOrigem.contains("CENTER") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF") && nomeOrigem.contains("DOC")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("HOSPITALAR") && nomeOrigem.contains("MATERIAL") && nomeOrigem.contains("DISTRIBUIDORA") && nomeOrigem.contains("TW")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("COHAB") && complemento01.contains("I") && complemento02.contains("TELEFONIA FIXA")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento01.contains("MARCUS") && complemento02.contains("TELEFONIA FIXA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CENTER")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("TECNONOGIA") && nomeOrigem.contains("BENEFICIOS") && complemento01.contains("GRANDE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VOLUS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TMK") && complemento01.contains("HORTAS") && nomeOrigem.contains("BENEFICIOS") && nomeOrigem.contains("VR")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("VR") && complemento02.contains("REFEICAO") && complemento01.contains("GRANDE") && nomeOrigem.contains("BENEFICIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("HORTAS") && complemento02.contains("REFEICAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VR") && nomeOrigem.contains("BENEFICIOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("COHAB") && complemento01.contains("II") && nomeOrigem.contains("BENEFICIOS") && nomeOrigem.contains("VR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BENEFICIOS") && nomeOrigem.contains("VR") && complemento02.contains("REFEICAO") && complemento01.contains("TURU")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("REFEICAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BENEFICIOS") && complemento01.contains("MAIOBAO") && nomeOrigem.contains("VR")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("I") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VR") && nomeOrigem.contains("BENEFICIOS") && complemento01.contains("COHAB")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("VR") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("COHAB") && complemento01.contains("II") && complemento05.contains("BENEFICIOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("DA") && nomeOrigem.contains("B") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CRUZ") && nomeOrigem.contains("M")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF") && complemento05.contains("CALCAS") && complemento05.contains("COMPRA") && nomeOrigem.contains("EUGENIO")) {
        conta = "393";
        contaMovimento = "393";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("SERVICOS") && nomeOrigem.contains("DISTRIBUIDORA") && nomeOrigem.contains("LDL") && complemento02.contains("MATERIAIS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MENDES") && nomeOrigem.contains("COMERCIO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAIS") && complemento02.contains("LIMPEZA")) {
        conta = "328";
        contaMovimento = "328";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA") && nomeOrigem.contains("LIMA") && nomeOrigem.contains("MESQUITA") && nomeOrigem.contains("CF")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (nomeOrigem.contains("OUTRAS RECEITAS -TESTE ENGEPLUS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("MAIOBAO") && nomeOrigem.contains("SA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONDOMINIO") && nomeOrigem.contains("PEREIRA")) {
        conta = "309";
        contaMovimento = "309";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("S AMORIM DOS SANTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("S M P FERREIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SET") && complemento01.contains("COHAB") && complemento01.contains("I") && nomeOrigem.contains("TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && nomeOrigem.contains("OLIVEIRA") && nomeOrigem.contains("CLAUDINO") && nomeOrigem.contains("B")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CARDOSO") && nomeOrigem.contains("ALMEIDA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("C") && nomeOrigem.contains("A")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("D") && nomeOrigem.contains("ND") && nomeOrigem.contains("LOUSEIRO") && nomeOrigem.contains("C") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "275";
        contaMovimento = "275";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TRANSFERENCIA ENTRE CONTAS") && nomeOrigem.contains("HORTAS")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomeOrigem.contains("INTEGRACAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ESCOLA") && nomeOrigem.contains("EMPRESA") && nomeOrigem.contains("CENTRO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("VCN SERVICE") && complemento02.contains("MANUTENCAO PREDIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "122";
        contaMovimento = "122";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARCELO C REVIL ME")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PEDRO IVO CUTRIM GONCALVES")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("VN SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("STARMED EIRELI - EPP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("T A NEGRIZOLI EIRELI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("TURU") && complemento05.contains("LTDA") && documento.contains("1877") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MEDICOS")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("LICENCA") && nomeOrigem.contains("SEFAZ") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BOMBEIROS") && nomeOrigem.contains("CORPO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomePortador.contains("I") && nomePortador.contains("COHAB") && nomeOrigem.contains("TRANSPORTE") && nomeOrigem.contains("SET") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("IMPOSTO S/ APLICACOES FINANCEIRAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "49";
        contaMovimento = "49";
    }
    if (nomeOrigem.contains("SEGURANCA") && complemento02.contains("SEGURANCA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VIGILANCIA") && nomeOrigem.contains("PARENTELA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLINICA DE UROLOGIA LTDA")) {
        conta = "678";
        contaMovimento = "678";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DEPOSITO EM DINHEIRO.") && nomePortador.contains("CAIXA(TESOURARIA)")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("J") && complemento03.contains("EVENTOS/CONFRATERNIZACOES") && nomeOrigem.contains("CF") && nomeOrigem.contains("GONCALVES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (nomeOrigem.contains("VIVO") && complemento03.contains("TELEFONIA FIXA") && nomeOrigem.contains("TELECOMUNICACOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("S") && nomeOrigem.contains("SALGADO") && nomeOrigem.contains("ENGENHARIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PONTES")) {
        conta = "920";
        contaMovimento = "920";
    }
    if (nomeOrigem.contains("ULTRA MEDICAL SERVICOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "727";
        contaMovimento = "727";
    }
    if (nomeOrigem.contains("SELBETTI") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("IMPRESSORAS E TONERS/CARTUCHOS")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && nomeOrigem.contains("SD") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "183";
        contaMovimento = "183";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAGAMENTO C2,MA,MAIOBAO - SEM APLICATIVO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("ECAD") && complemento01.contains("02 - COHAB I") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (nomeOrigem.contains("GETNET") && complemento01.contains("01 - HORTAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEBITO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento01.contains("06 - TURU") && nomeOrigem.contains("HB ASSESSORIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("01 - HORTAS") && nomeOrigem.contains("VR") && nomeOrigem.contains("PAG")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LJL CONFECCOES LTDA") && complemento02.contains("MANUTENCAO PREDIAL")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("LUIZ FELIPE TEIXEIRA DE ALMEIDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SENDAS") && complemento02.contains("MATERIAIS DE COPA/COZINHA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DISTRIBUIDORA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("REVEST/REF. NF 6616-FECHADURA P/ GAVETA-REVEST")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("07 - PATIO NORTE") && complemento02.contains("CONDOMINIO")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MCA SAO LUIS SS LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("SERVICOS DE ESTERILIZACAO") && nomeOrigem.contains("BRITOS&SOARES LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "426";
        contaMovimento = "426";
    }
    if (nomeOrigem.contains("CENTRO DE DIAGNOSTICO - GASTRODIAGNOSE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "435";
        contaMovimento = "435";
    }
    if (complemento01.contains("07 - PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("CONDOMINIO")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EVENTOS/CONFRATERNIZACOES - ADM") && nomeOrigem.contains("MATEUS SUPERMERCADOS")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (nomeOrigem.contains("SUPERMERCADOS") && nomeOrigem.contains("MATEUS") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAIS DE COPA/COZINHA")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (nomeOrigem.contains("A") && complemento03.contains("MATERIAL GRAFICO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("C") && nomeOrigem.contains("CARDOSO")) {
        conta = "693";
        contaMovimento = "693";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EQUIPAMENTOS DE INFORMATICA") && nomeOrigem.contains("INFORMATICA") && nomeOrigem.contains("MULTIMIDIA")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (nomeOrigem.contains("POTIGUAR MATERIAIS DE CONSTRUCAO LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("CARTAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF") && complemento03.contains("EVENTOS/CONFRATERNIZACOES - ADM")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (nomeOrigem.contains("CF") && nomeOrigem.contains("COMPRA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAIS DE COPA/COZINHA")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EQUIPAMENTOS DE INFORMATICA") && nomeOrigem.contains("COMPRA") && nomeOrigem.contains("CF")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (nomeOrigem.contains("CARTAO") && nomeOrigem.contains("DIAGNOSTICO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS")) {
        conta = "183";
        contaMovimento = "183";
    }
    if (nomeOrigem.contains("TELECOMUNICACOES") && complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DB3")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento03.contains("MATERIAIS DE COPA/COZINHA") && nomeOrigem.contains("145743") && nomeOrigem.contains("CF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (complemento02.contains("FGTS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "129";
        contaMovimento = "129";
    }
    if (nomeOrigem.contains("INSS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (complemento02.contains("ISS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "137";
        contaMovimento = "137";
    }
    if (nomeOrigem.contains("RESCISAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "123";
        contaMovimento = "123";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLIMATIZACAO E ASSISTENCIA TECNICA EM AR")) {
        conta = "322";
        contaMovimento = "322";
    }
    if (complemento02.contains("FIBRA") && complemento02.contains("OPTICA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EQUATORIAL TELECOMUNICACOES LTDA/EQUATORIAL TELECOMUNIC")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("IOF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "384";
        contaMovimento = "384";
    }
    if (nomeOrigem.contains("CONSULT") && nomeOrigem.contains("AG") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("01 - HORTAS") && nomeOrigem.contains("CAPITAL")) {
        conta = "564";
        contaMovimento = "564";
    }
    if (complemento01.contains("01 - HORTAS") && nomeOrigem.contains("OLIVEIRA") && nomeOrigem.contains("CLAUDINO") && nomeOrigem.contains("B") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "658";
        contaMovimento = "658";
    }
    if (complemento01.contains("06 - TURU") && nomeOrigem.contains("A") && nomeOrigem.contains("C") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARDOSO")) {
        conta = "693";
        contaMovimento = "693";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("03 - RUA GRANDE") && nomeOrigem.contains("CLINICA") && nomeOrigem.contains("OTO4")) {
        conta = "831";
        contaMovimento = "831";
    }
    if (complemento02.contains("ALVARAS") && complemento01.contains("02 - COHAB I") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ECAD")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (nomeOrigem.contains("HB ASSESSORIA") && complemento01.contains("04 - COHAB II") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "871";
        contaMovimento = "871";
    }
    if (complemento01.contains("02 - COHAB I") && complemento02.contains("MATERIAL HOSPITALAR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (complemento01.contains("06 - TURU") && nomeOrigem.contains("PALHANO") && nomeOrigem.contains("BEZERRA") && nomeOrigem.contains("ALESSIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "511";
        contaMovimento = "511";
    }
    if (complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && nomeOrigem.contains("CF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("A. CARVALHO COMPONENTES ELETRONICOS LTDA") && complemento05.contains("NF")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CARVALHO") && nomeOrigem.contains("COMPONENTES") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EQUIPAMENTOS DE INFORMATICA") && nomeOrigem.contains("CF")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARVALHO") && nomeOrigem.contains("COMPONENTES") && complemento02.contains("COMPRA MOVEIS E UTENSILIOS")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("A.L.R SILVEIRA") && complemento02.contains("MANUTENCAO PREDIAL - ADM")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("DISTRIBUIDORA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SENDAS") && complemento05.contains("CUPOM") && complemento02.contains("MATERIAIS DE COPA/COZINHA")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GLOBO") && complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (nomeOrigem.contains("JOSE ROBERTO CARVALHO LOBATO") && complemento02.contains("MANUTENCAO PREDIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("PAG. DIVERSOS-DUPLICIDADE-MOUTA COIMBRA") && nomeOrigem.contains("PAG. DIVERSOS-DUPLICIDADE-MOUTA COIMBRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("TRANSF.DOC PATIO NORTE SANTANDER - MAIOBAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento01.contains("07 - PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEDUCOES GETNET")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento01.contains("03 - RUA GRANDE") && nomeOrigem.contains("TRANSFERENCIA BANCARIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("MANUTENCAO DE MOVEIS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF")) {
        conta = "322";
        contaMovimento = "322";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("E S MATOS EIRELE") && complemento02.contains("MANUTENCAO PREDIAL")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("IMPRESSORAS E TONERS/CARTUCHOS") && nomeOrigem.contains("FATURA") && nomeOrigem.contains("INFORMATICA") && nomeOrigem.contains("ARTCOM")) {
        conta = "321";
        contaMovimento = "321";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DOACOES - ADM") && nomeOrigem.contains("MATEUS SUPERMERCADOS LTDA.")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (nomeOrigem.contains("TORY BRINDES LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EVENTOS/CONFRATERNIZACOES - ADM")) {
        conta = "923";
        contaMovimento = "923";
    }
    if (complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TW") && nomeOrigem.contains("DISTRIBUIDORA")) {
        conta = "675";
        contaMovimento = "675";
    }
    if (nomeOrigem.contains("UNIVERSAL") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EQUIPAMENTOS DE INFORMATICA") && nomeOrigem.contains("KBF") && nomeOrigem.contains("COM")) {
        conta = "668";
        contaMovimento = "668";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EVENTOS/CONFRATERNIZACOES - ADM") && nomeOrigem.contains("WAGNER MAFRA SERRA")) {
        conta = "926";
        contaMovimento = "926";
    }
    if (nomeOrigem.contains("FEC SERVICOS MEDICOS LTDA - ME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "453";
        contaMovimento = "453";
    }
    if (complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEVOL") && nomeOrigem.contains("PACIENTE")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("CF") && nomeOrigem.contains("COMPRA") && complemento03.contains("MANUTENCAO PREDIAL - CORRETIVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (nomeOrigem.contains("CF") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO PREDIAL - CORRETIVA") && nomeOrigem.contains("MATEUS")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (nomeOrigem.contains("CF") && nomeOrigem.contains("MATEUS") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (nomeOrigem.contains("PIX") && nomeOrigem.contains("PAC") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (complemento03.contains("MANUTENCAO DE MOVEIS E EQUIPAMENTOS") && nomeOrigem.contains("CF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TECNO") && nomeOrigem.contains("INDUSTRIA")) {
        conta = "562";
        contaMovimento = "562";
    }
    if (complemento03.contains("ASSOCIACOES COMERCIAIS OU DE CLASSE") && nomeOrigem.contains("CONSELHO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("05 - MARCUS CENTER") && nomeOrigem.contains("TELECOMUNICACOES") && nomeOrigem.contains("DB3")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "311";
        contaMovimento = "311";
    }
    if (nomeOrigem.contains("CF") && complemento03.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (nomeOrigem.contains("PAULISTINHA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO PREDIAL - PREVENTIVA") && nomeOrigem.contains("TINTAS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ALUGUEL PREDIAL")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (nomeOrigem.contains("DARF") && nomeOrigem.contains("1708") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INSS") && nomeOrigem.contains("UNIDADES")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IOF") && nomeOrigem.contains("LIMITE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("ISS") && nomeOrigem.contains("PARCELAMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "595";
        contaMovimento = "595";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("LIMITE:")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("LIMITE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JUROS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMPRESTIMO") && nomeOrigem.contains("CEF")) {
        conta = "115";
        contaMovimento = "115";
    }
    if (complemento02.contains("SEGUROS") && complemento02.contains("ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "129";
        contaMovimento = "129";
    }
    if (nomeOrigem.contains("CESTA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("TURU") && nomeOrigem.contains("ALIMENTACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("SALARIO") && complemento02.contains("ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA PIX")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("02 - COHAB I") && nomeOrigem.contains("C") && nomeOrigem.contains("A") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARDOSO")) {
        conta = "693";
        contaMovimento = "693";
    }
    if (complemento01.contains("07 - MEDICAL MAIOBAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("C") && nomeOrigem.contains("A") && nomeOrigem.contains("CARDOSO")) {
        conta = "693";
        contaMovimento = "693";
    }
    if (nomeOrigem.contains("C") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("A") && complemento01.contains("04 - COHAB II") && nomeOrigem.contains("CARDOSO")) {
        conta = "693";
        contaMovimento = "693";
    }
    if (nomeOrigem.contains("ARAUJO") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("D") && nomeOrigem.contains("C")) {
        conta = "275";
        contaMovimento = "275";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("03 - RUA GRANDE") && complemento02.contains("TELEFONIA FIXA") && nomeOrigem.contains("EMBRATEL")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("JACARE HOME CENTER") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "848";
        contaMovimento = "848";
    }
    if (nomeOrigem.contains("PEREIRA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CONDOMINIO") && complemento01.contains("07 - MEDICAL MAIOBAO") && nomeOrigem.contains("ADMINISTRACAO")) {
        conta = "398";
        contaMovimento = "398";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAIS DE COPA/COZINHA") && complemento01.contains("06 - TURU") && nomeOrigem.contains("CF")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (complemento01.contains("03 - RUA GRANDE") && complemento02.contains("FARDAMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SOBERANA") && nomeOrigem.contains("CF")) {
        conta = "393";
        contaMovimento = "393";
    }
    if (nomeOrigem.contains("PIX") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ESTORNO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("TRAUMA") && complemento02.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CT")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CONSTRUCAO") && complemento02.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO") && nomeOrigem.contains("MULTIMIDIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF:")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CORREIOS") && nomeOrigem.contains("CF")) {
        conta = "313";
        contaMovimento = "313";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COSERMED - CONSULTORIOS E SERVICOS MEDICOS LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("REVISAO") && complemento02.contains("MANUTENCAO DE VEICULOS - ADM") && nomeOrigem.contains("MOTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "596";
        contaMovimento = "596";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE MEDICINA MA/ANUIDADE CRM 2023")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIGIRATI INFORMATICA SERVICOS TELECOMUNICACAO/RENOVACAO DE DOMINIO SUPERCLINICA.COM")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("EST. CART CRED- COD 1026211.01-ANTONIA EMEE NASCIM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("TRANSF. DIAGNOSTICO - PAC. ROZILENE LISBOA SOARES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE MEDICINA MA/ANUIDADE CRM 2023")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("EST. CART CRED- COD 1026211.01-ANTONIA EMEE NASCIM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("TRANSF. DIAGNOSTICO - PAC. ROZILENE LISBOA SOARES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF.-PAG. DE OUTRA UNID. (TURU) NF 12")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("MCA SAO LUIS SS LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ASSESSORIA CONTABIL")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("ALUGUEL PREDIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (nomeOrigem.contains("M") && nomeOrigem.contains("CRUZ") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO") && nomeOrigem.contains("B")) {
        conta = "659";
        contaMovimento = "659";
    }
    if (complemento03.contains("PREVIDENCIA SOCIAL - SOCIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAIXA PREVIDENCIA/PREVIDENCIA SOCIOS")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DEVOLUCOES A CLIENTES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (complemento03.contains("DEVOLUCOES A CLIENTES") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (complemento03.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ELETROMEDICINA LTDA")) {
        conta = "860";
        contaMovimento = "860";
    }
    if (nomeOrigem.contains("EMBRATEL - INTERNET/EMBRATEL INTERNET") && complemento03.contains("INTERNET - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("TELECOMUNICACOES") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("FIBRA OPTICA (LAN TO LAN)") && nomeOrigem.contains("EQUATORIAL")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("FRIOS") && nomeOrigem.contains("F") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && nomeOrigem.contains("J")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (nomeOrigem.contains("GONCALVES") && complemento03.contains("MANUTENCAO PREDIAL - PREVENTIVA") && nomeOrigem.contains("CF") && nomeOrigem.contains("J") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (complemento03.contains("MANUTENCAO DE SOFTWARE - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("L5") && nomeOrigem.contains("NETWORKS")) {
        conta = "548";
        contaMovimento = "548";
    }
    if (complemento03.contains("MANUTENCAO DO SITE - ADM") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("LOCAWEB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "414";
        contaMovimento = "414";
    }
    if (complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MATEUS SUPERMERCADOS LTDA.")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (complemento03.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && nomeOrigem.contains("HOSPITALAR") && nomeOrigem.contains("MED") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "724";
        contaMovimento = "724";
    }
    if (nomeOrigem.contains("MULTIMIDIA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO PREDIAL - PREVENTIVA") && nomeOrigem.contains("MARANHENSE") && nomeOrigem.contains("INFORMATICA")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEUDSON") && nomeOrigem.contains("KIO") && complemento03.contains("IMPRESSORAS E TONERS/CARTUCHOS - ADM")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAG. CONSORCIO UNIDADES") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAG. PROINDDY MAIOBAO") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAGAMENTO DIVERSO UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SOS FISIO")) {
        conta = "992";
        contaMovimento = "992";
    }
    if (complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("TW") && nomeOrigem.contains("DISTRIBUIDORA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "675";
        contaMovimento = "675";
    }
    if (complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("DISTRIBUIDORA") && nomeOrigem.contains("TW") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "675";
        contaMovimento = "675";
    }
    if (complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && nomeOrigem.contains("B") && nomeOrigem.contains("M") && nomeOrigem.contains("CRUZ") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "659";
        contaMovimento = "659";
    }
    if (nomeOrigem.contains("CLINICA OTOMED") && complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "509";
        contaMovimento = "509";
    }
    if (nomeOrigem.contains("NORTE") && complemento03.contains("PROPAGANDAS, PUBLICIDADE E PATROCINIOS") && nomeOrigem.contains("CONDOMINIO") && nomeOrigem.contains("PATIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (nomeOrigem.contains("MATEUS") && nomeOrigem.contains("SUPERMERCADOS") && complemento01.contains("02 - COHAB ELEVADO") && complemento03.contains("EVENTOS/CONFRATERNIZACOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VOLUS TECNONOGIA E GESTAO DE BENEFICIOS LTDA")) {
        conta = "712";
        contaMovimento = "712";
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (nomeOrigem.contains("COMERCIAL") && nomeOrigem.contains("PFM") && complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF")) {
        conta = "311";
        contaMovimento = "311";
    }
    if (complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("CF") && nomeOrigem.contains("COMPRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (nomeOrigem.contains("SANTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("F") && nomeOrigem.contains("DOS") && complemento03.contains("PROPAGANDAS, PUBLICIDADE E PATROCINIOS")) {
        conta = "1021";
        contaMovimento = "1021";
    }
    if (nomeOrigem.contains("J") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF") && complemento03.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO") && nomeOrigem.contains("GONCALVES")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (complemento03.contains("MANUTENCAO PREDIAL - CORRETIVA") && nomeOrigem.contains("GONCALVES") && nomeOrigem.contains("CF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("J")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (nomeOrigem.contains("COFINS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEPOSITO") && nomeOrigem.contains("JUDICIAL")) {
        conta = "105";
        contaMovimento = "105";
    }
    if (nomeOrigem.contains("JUDICIAL") && nomeOrigem.contains("PIS") && nomeOrigem.contains("DEPOSITO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "105";
        contaMovimento = "105";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL MAQUINA") && complemento01.contains("TURU")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && complemento02.contains("AGUA ENCANADA")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento02.contains("AGUA ENCANADA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TURU")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento01.contains("HORTAS") && complemento02.contains("ENERGIA ELETRICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (complemento01.contains("GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ENERGIA ELETRICA")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (complemento01.contains("TURU") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ENERGIA ELETRICA")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COFINS") && nomeOrigem.contains("2172")) {
        conta = "134";
        contaMovimento = "134";
    }
    if (nomeOrigem.contains("8109") && nomeOrigem.contains("PIS") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "133";
        contaMovimento = "133";
    }
    if (complemento02.contains("PECUNIARIOS") && complemento02.contains("ABONOS") && complemento02.contains("FERIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "122";
        contaMovimento = "122";
    }
    if (nomeOrigem.contains("ADINATAMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FOLHA") && nomeOrigem.contains("PAGAMENTO")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("BONIFICACOES") && nomeOrigem.contains("PAGAMENTO") && nomeOrigem.contains("FOLHA")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (nomeOrigem.contains("PRIOS") && complemento02.contains("RETENCAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INSS")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && nomeOrigem.contains("ALIMENTACAO") && nomeOrigem.contains("VR")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAXA DE ANTECIPACAO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento02.contains("VALE TRANSPORTE") && complemento01.contains("GRANDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("TURU") && complemento02.contains("VALE TRANSPORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("CONTRATACAO") && nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADITAMENTO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (nomeOrigem.contains("DOC") && nomeOrigem.contains("TED") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("PACOTE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TARIFA PIX") && complemento01.contains("TURU") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && nomeOrigem.contains("PIX")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TURU") && nomeOrigem.contains("TARIFA TED")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("MAIOBAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA") && nomeOrigem.contains("TED")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL MAQUINA GETNET")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMSERV EMP DE SERV E SEGURANCA ELETRONICA LTDA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PORTO") && nomeOrigem.contains("SEGUROS") && nomeOrigem.contains("LTDA")) {
        conta = "330";
        contaMovimento = "330";
    }
    if (nomeOrigem.contains("MUNICIPAL") && nomeOrigem.contains("PREFEITURA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IPTU")) {
        conta = "361";
        contaMovimento = "361";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ZENVIA MOBILE SERVICOS DIGITAIS SA/FATURA 127517 - FATURAMENTO")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (nomeOrigem.contains("COIMBRA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("04 - COHAB II") && complemento02.contains("SEGURANCA ELETRONICA") && nomeOrigem.contains("MOUTA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("01 - HORTAS") && complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES") && nomeOrigem.contains("VR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAIS DE COPA/COZINHA") && nomeOrigem.contains("A DE S FRANCO EIRELI")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CF") && complemento02.contains("MANUTENCAO DE VEICULOS - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MOTOCICLETAS") && nomeOrigem.contains("ALVORADA")) {
        conta = "596";
        contaMovimento = "596";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO - ADM") && nomeOrigem.contains("CF") && nomeOrigem.contains("KALUNGA")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (complemento02.contains("MANUTENCAO PREDIAL") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LV INSTALACOES COMERCIAIS LTDA FILIAL") && complemento05.contains("NF")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("NF") && nomeOrigem.contains("PINTO") && nomeOrigem.contains("M")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CANC. - COMPRA IMPRESSORA") && complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("CENTROCOR NF 5793 - VALOR PAGO A MAIOR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("MENDES PINTO COMERCIO SERVICOS LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EQUIPAMENTOS DE INFORMATICA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("TRANSF. RG - PIX PAC. JOSE AUGUSTO GOMES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("F") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("EIRELI") && nomeOrigem.contains("PINTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO FEDERAL DE FARMACIA/REF. ANUIDADE 2023 - FARMACIA")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE MEDICINA MA/CRM - ANUIDADE 2023")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE MEDICINA MA/REF. ANUIDADE CRM 2023")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("PFM COMERCIAL LTDA/CF 12719 - CARTAO MESAS MAIOBAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("01 - HORTAS") && complemento02.contains("AMORTIZACAO CONTA GARATIDA - PRINCIPAL")) {
        conta = "118";
        contaMovimento = "118";
    }
    if (nomeOrigem.contains("CONSELHO FEDERAL DE FARMACIA/REF. ANUIDADE 2023 - FARMACIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE MEDICINA MA/CRM - ANUIDADE 2023")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("CONSELHO REGIONAL DE MEDICINA MA/REF. ANUIDADE CRM 2023") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("2372") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CSLL")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MULTIMIDIA CONSTRUCAO/COMPRA DE EQUIP. ELETRON. RECEP. 2-NF 41154")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SHERWIN - WILLIAMS DO BRASIL INSDUSTRIA E COMERCIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SOBERANA SEGURANCA/REF. NF 170252-PLACA DE SINALIZ. DA PORTA-RECEPCAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("TRANSF. SUPERDIAG - PAC. ARNALDO OTAVIO GALVAO BER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("TRANSF. PROTEGE NF 118 DRA MARIA DE FATIMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("06 - TURU") && complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("DC BATERIAS LTDA") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "321";
        contaMovimento = "321";
    }
    if (nomeOrigem.contains("BANCO") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("AMAZONIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("NORDESTE") && nomeOrigem.contains("BANCO")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ENERGIA ELETRICA") && nomeOrigem.contains("EQUATORIAL")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (nomeOrigem.contains("1124") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (nomeOrigem.contains("R COS JUNIOR COMERCIO E SERVICOS") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MANUTENCAO PREDIAL")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("M") && nomeOrigem.contains("CRUZ") && complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("B") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "659";
        contaMovimento = "659";
    }
    if (nomeOrigem.contains("CLINICA") && nomeOrigem.contains("REABILITA") && complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FISIOTERAPIA")) {
        conta = "439";
        contaMovimento = "439";
    }
    if (nomeOrigem.contains("CASTRO") && complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("ALEXANDRE") && nomeOrigem.contains("COMERCIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "568";
        contaMovimento = "568";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARF") && nomeOrigem.contains("2172") && complemento03.contains("COFINS")) {
        conta = "134";
        contaMovimento = "134";
    }
    if (nomeOrigem.contains("5856") && nomeOrigem.contains("DARF") && complemento03.contains("COFINS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "134";
        contaMovimento = "134";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARF") && nomeOrigem.contains("8109") && complemento03.contains("PIS")) {
        conta = "133";
        contaMovimento = "133";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIGI MANIA COMERCIO ELETRONICO EIRELI") && complemento03.contains("EQUIPAMENTOS DE INFORMATICA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("TELEFONIA FIXA - ADM") && nomeOrigem.contains("EMBRATEL/EMBRATEL REF A 12.2023") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("EMPREENDIMENTOS") && nomeOrigem.contains("FARMACEUTICOS") && nomeOrigem.contains("CF")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PROPAGANDAS E PATROCINIOS - ADM") && nomeOrigem.contains("GOOGLE INTERNET LTDA/IMPULSIONAMENTO")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("CF") && nomeOrigem.contains("PRODUTOS") && nomeOrigem.contains("IMIFARMA")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("COMPRA DE MAQUINAS E EQUIPAMENTOS") && nomeOrigem.contains("MATEUS SUPERMERCADOS LTDA.")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (complemento03.contains("EQUIPAMENTOS DE INFORMATICA - ADM") && nomeOrigem.contains("MATEUS SUPERMERCADOS LTDA.") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (nomeOrigem.contains("MATEUS") && nomeOrigem.contains("SUPERMERCADOS") && complemento03.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "935";
        contaMovimento = "935";
    }
    if (nomeOrigem.contains("NEUDSON") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("05 - MARCUS CENTER") && complemento03.contains("IMPRESSORAS E TONERS/CARTUCHOS")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (nomeOrigem.contains("OCIDENTAL COMERCIO E SERVICOS LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("IMPRESSORAS E TONERS/CARTUCHOS")) {
        conta = "503";
        contaMovimento = "503";
    }
    if (nomeOrigem.contains("PREFEITURA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("IPTU") && nomeOrigem.contains("MUNICIPAL")) {
        conta = "361";
        contaMovimento = "361";
    }
    if (nomeOrigem.contains("BARBOSA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA") && complemento03.contains("COMPRA DE MAQUINAS E EQUIPAMENTOS") && nomeOrigem.contains("TRANDAVILOV")) {
        conta = "1006";
        contaMovimento = "1006";
    }
    if (nomeOrigem.contains("COM") && complemento03.contains("EQUIPAMENTOS DE INFORMATICA - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("UNIVERSAL") && nomeOrigem.contains("KBF")) {
        conta = "668";
        contaMovimento = "668";
    }
    if (nomeOrigem.contains("MELO") && complemento03.contains("MANUTENCAO DE VEICULOS - ADM") && nomeOrigem.contains("T") && nomeOrigem.contains("C") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "596";
        contaMovimento = "596";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("REPRESENTACOES") && nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("CASTRO")) {
        conta = "661";
        contaMovimento = "661";
    }
    if (nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("6912") && complemento03.contains("PIS")) {
        conta = "133";
        contaMovimento = "133";
    }
    if (complemento03.contains("TELEFONIA FIXA - ADM") && complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("RETENCAO") && nomeOrigem.contains("INSS") && nomeOrigem.contains("PARENTELA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (nomeOrigem.contains("J G DE OLIVEIRA LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EVENTOS/CONFRATERNIZACOES - ADM")) {
        conta = "931";
        contaMovimento = "931";
    }
    if (complemento03.contains("MANUTENCAO PREDIAL - CORRETIVA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOSE ROBERTO CARVALHO LOBATO")) {
        conta = "907";
        contaMovimento = "907";
    }
    if (nomeOrigem.contains("PAG. CONSORCIO VALORGAS UNIDADES") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("PAG. PROINDDY PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "515";
        contaMovimento = "515";
    }
    if (nomeOrigem.contains("PAGTO MEDICO NF - MA") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("SEGURO CAIXA/SEGURO FUNCIONARIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "129";
        contaMovimento = "129";
    }
    if (nomeOrigem.contains("PAGO") && nomeOrigem.contains("TRAFEGO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PROPAGANDAS E PATROCINIOS - ADM") && nomeOrigem.contains("FACEBOOK")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FRIOVIX COMERCIO DE REFRIGERACAO")) {
        conta = "1022";
        contaMovimento = "1022";
    }
    if (nomeOrigem.contains("ERRO REPASSE DRA ANDREA NEIVA") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && nomeOrigem.contains("PAG. HOSPEDAGEM SITE SUPERVIDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "414";
        contaMovimento = "414";
    }
    if (nomeOrigem.contains("PILAR") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("CONSTRUCOES, AMPLIACOES E REFORMAS - ADM") && nomeOrigem.contains("CONSTRUCAO")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (complemento03.contains("FARDAMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("S M S CRUZ & CIA LTDA")) {
        conta = "1038";
        contaMovimento = "1038";
    }
    if (complemento01.contains("COHAB") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADIANTAMENTO") && complemento01.contains("I") && nomeOrigem.contains("CONSULTAS")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (complemento01.contains("COHAB") && nomeOrigem.contains("ALUGUEL") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("I") && nomeOrigem.contains("GETNET")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (complemento01.contains("COHAB") && complemento01.contains("II") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL") && nomeOrigem.contains("MAQUINETA")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (nomeOrigem.contains("MAQUINETA") && complemento01.contains("MEDICAL") && complemento01.contains("MAIOBAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (complemento01.contains("CENTER") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MAQUINETA") && complemento01.contains("MARCUS") && nomeOrigem.contains("ALUGUEL")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (complemento01.contains("MARCUS") && complemento01.contains("CENTER") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL GETNET")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL") && nomeOrigem.contains("MAQUINA") && complemento01.contains("I") && complemento01.contains("COHAB")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (complemento01.contains("GRANDE") && complemento02.contains("ALUGUEL PREDIAL") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("RUA")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ALUGUEL PREDIAL") && nomeOrigem.contains("RAPOSO") && nomeOrigem.contains("ARMAZEM")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (nomeOrigem.contains("ALMEIDA") && complemento02.contains("PRO") && complemento02.contains("LABORE") && nomeOrigem.contains("ARTHUR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "380";
        contaMovimento = "380";
    }
    if (nomeOrigem.contains("BANCO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMPRESTIMOS") && nomeOrigem.contains("PRINCIPAL") && nomeOrigem.contains("NORDESTE")) {
        conta = "174";
        contaMovimento = "174";
    }
    if (nomeOrigem.contains("BANCO") && nomeOrigem.contains("NORDESTE") && nomeOrigem.contains("EMPRESTIMOS") && nomeOrigem.contains("PRONCIPAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "174";
        contaMovimento = "174";
    }
    if (complemento02.contains("PRINCIPAL") && nomeOrigem.contains("EMPRESTIMO") && nomeOrigem.contains("CAIXA") && nomeOrigem.contains("ECONOMICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115";
        contaMovimento = "115";
    }
    if (nomeOrigem.contains("CLARO") && complemento01.contains("HORTAS") && complemento02.contains("ADM") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CELULARES")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento01.contains("RUA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("GRANDE") && complemento02.contains("AGUA ENCANADA")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AGUA ENCANADA") && complemento01.contains("COHAB") && complemento01.contains("I")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento01.contains("MARCUS") && complemento02.contains("ENERGIA ELETRICA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CENTER")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (complemento02.contains("ENERGIA ELETRICA") && complemento01.contains("II") && complemento01.contains("COHAB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (complemento01.contains("COHAB") && complemento02.contains("ENERGIA ELETRICA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("I")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (nomeOrigem.contains("ADMINISTRADORA") && nomeOrigem.contains("DEDUCOES") && nomeOrigem.contains("GETNET") && nomeOrigem.contains("TAXA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADMNISTRADORA") && nomeOrigem.contains("TAXA") && nomeOrigem.contains("GETNET") && nomeOrigem.contains("DEDUCOES")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento02.contains("AGUA MINERAL") && nomeOrigem.contains("FABIO RIBEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("ALVARAS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && complemento02.contains("REGULARIZACOES") && complemento02.contains("LICENCIAMENTOS")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (complemento05.contains("LOJAS") && complemento05.contains("AMERICANAS") && complemento05.contains("GERENTE") && complemento05.contains("CELULAR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "161";
        contaMovimento = "161";
    }
    if (nomeOrigem.contains("BRADESCO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS") && nomeOrigem.contains("GUSTAVO") && nomeOrigem.contains("SAUDE")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (nomeOrigem.contains("GUSTAVO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LABORE") && nomeOrigem.contains("PRO") && nomeOrigem.contains("LUIS")) {
        conta = "125";
        contaMovimento = "125";
    }
    if (nomeOrigem.contains("BRADESCO") && nomeOrigem.contains("SAUDE") && nomeOrigem.contains("RODOLFO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS")) {
        conta = "401";
        contaMovimento = "401";
    }
    if (nomeOrigem.contains("RODOLFO") && nomeOrigem.contains("LABORE") && nomeOrigem.contains("PRO") && nomeOrigem.contains("LUIS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "125";
        contaMovimento = "125";
    }
    if (complemento02.contains("VALE FARMACIA") && complemento01.contains("I") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("COHAB")) {
        conta = "271";
        contaMovimento = "271";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VALE") && nomeOrigem.contains("TRANSPORTE") && complemento01.contains("COHAB") && complemento01.contains("I")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("SET") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSPORTE") && nomeOrigem.contains("VALE") && complemento01.contains("MAIOBAO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && complemento02.contains("ADM") && complemento02.contains("TRANSPORTE") && complemento02.contains("VALE")) {
        conta = "304";
        contaMovimento = "304";
    }
    if (complemento01.contains("CENTER") && complemento01.contains("MARCUS") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("VALE TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && complemento02.contains("TMK") && complemento02.contains("TRANSPORTE") && complemento02.contains("VALE")) {
        conta = "304";
        contaMovimento = "304";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA AVULSA ENVIO PIX")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento02.contains("ENCARGOS") && complemento02.contains("BANCARIAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFAS") && nomeOrigem.contains("PACT")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("II") && complemento01.contains("COHAB") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("TARIFA")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TARIFA PIX") && complemento01.contains("COHAB") && complemento01.contains("II") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("DEBITO") && nomeOrigem.contains("RECEBIDO") && nomeOrigem.contains("PIX") && nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA QR CODE") && complemento01.contains("TURU")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento01.contains("II") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("COHAB") && nomeOrigem.contains("CODE") && nomeOrigem.contains("TARIFA")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento01.contains("COHAB") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA TED") && complemento01.contains("II")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("GRANDE") && nomeOrigem.contains("TAXA ADMNISTRADORA MASTER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento02.contains("CORPORATIVOS") && complemento02.contains("CELULARES") && complemento01.contains("COHAB") && complemento01.contains("II") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento01.contains("MAIOBAO") && complemento02.contains("REFEICAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALIMENTACAO") && complemento01.contains("MEDICAL")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("TARIFAS") && complemento02.contains("BANCARIAS") && nomeOrigem.contains("BRADESCO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARTAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("CUMULATIVO") && nomeOrigem.contains("DARF") && nomeOrigem.contains("NAO") && nomeOrigem.contains("COFINS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "134";
        contaMovimento = "134";
    }
    if (nomeOrigem.contains("MOVEIS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADIANTAMENTO") && nomeOrigem.contains("PEREIRA") && nomeOrigem.contains("SA")) {
        conta = "33";
        contaMovimento = "33";
    }
    if (complemento02.contains("AMORTIZACAO") && complemento01.contains("II") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("AMAZONIA") && nomeOrigem.contains("EMPRESTIMO")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (nomeOrigem.contains("LUA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IPTU") && nomeOrigem.contains("NOVA") && complemento01.contains("TURU")) {
        conta = "361";
        contaMovimento = "361";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("IMPRESSORAS E TONERS/CARTUCHOS") && complemento01.contains("07 - MEDICAL MAIOBAO") && nomeOrigem.contains("ARTCOM") && nomeOrigem.contains("INFORMATICA")) {
        conta = "321";
        contaMovimento = "321";
    }
    if (complemento05.contains("NF") && nomeOrigem.contains("JORDELMAR COSTA PEREIRA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LS") && nomeOrigem.contains("MARANHAO") && complemento02.contains("HONORARIOS MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("NF") && nomeOrigem.contains("S.C. GARCIA BARBON") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("NF") && nomeOrigem.contains("VAPOR DISTRIBUIDORA LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PIS") && nomeOrigem.contains("NAO") && nomeOrigem.contains("CUMULATIVO") && nomeOrigem.contains("6912")) {
        conta = "133";
        contaMovimento = "133";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("M DOS SANTOS ALVES COM DE MOVEIS PARA ESCRITORIOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NAGIB") && nomeOrigem.contains("ABDALA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CONDOMINIO DO PATIO NORTE SHOPPING/01/2023 - COND. PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("MULTIMIDIA CONSTRUCAO/REF. NF42237- PILHAS E CARREG. P/ A PRE-CONSULTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONDOMINIO DO PATIO NORTE SHOPPING/01/2023 - COND. PATIO NORTE")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MULTIMIDIA CONSTRUCAO/REF. NF42237- PILHAS E CARREG. P/ A PRE-CONSULTA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("CELULARES CORPORATIVOS - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("TRANSF. BANC. STERILIZA-DUPLIC. NA CONTA ERRADA") && complemento02.contains("TRANSFERENCIA ENTRE CONTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("MATERIAIS DE COPA/COZINHA") && nomeOrigem.contains("BANQUETA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("04 - COHAB II") && nomeOrigem.contains("SILVA")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (complemento02.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO") && nomeOrigem.contains("CF") && complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("04 - COHAB II")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && nomePortador.contains("CAIXA(TESOURARIA)") && complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento05.contains("ESTORNO DEV. PARA HORTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("BANCARIAS") && complemento02.contains("ENCARGOS") && complemento02.contains("TARIFAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PACT")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("INTERNET - ADM") && nomeOrigem.contains("INTERNET") && nomeOrigem.contains("EMBRATEL") && tipoPlanilha.contains("MOVIMENTO") && nomePortador.contains("SANTANDER - RUA GRANDE")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("VR") && nomeOrigem.contains("BENEFICIOS") && complemento02.contains("REFEICAO/ ALIMENTACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14";
        contaMovimento = "14";
    }
    if (complemento02.contains("LABORE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS") && nomeOrigem.contains("GUSTAVO") && complemento02.contains("PRO")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ECAD") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomePortador.contains("HORTAS") && nomeOrigem.contains("PAG. CARTAO MASTER RG ADM - A MAIOR")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLICK LAUDOS EM TELEMEDICINA/SUPERVIDA-CLICKLAUDO")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("CLINICA OTOMED") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "509";
        contaMovimento = "509";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PARCELAMENTOS DE IMPOSTOS  E TRIBUTOS  - ADM")) {
        conta = "651";
        contaMovimento = "651";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && nomeOrigem.contains("ECAD/ECAD")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MULTIMIDIA - INFORMATICA MARANHENSE/COMPRA FONTE COMPUTADOR") && complemento03.contains("EQUIPAMENTOS DE INFORMATICA")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO DE SOFTWARE") && nomeOrigem.contains("PROINDDY SERVICOS E COMERCIO - ME")) {
        conta = "515";
        contaMovimento = "515";
    }
    if (nomeOrigem.contains("TREASY SISTEMAS LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("CONSULTORIA E ASSESSORIA GESTAO - ADM")) {
        conta = "690";
        contaMovimento = "690";
    }
    if (nomeOrigem.contains("LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("UROCLINICA")) {
        conta = "541";
        contaMovimento = "541";
    }
    if (nomeOrigem.contains("VOLUS") && nomeOrigem.contains("TECNONOGIA") && complemento03.contains("REFEICAO/ ALIMENTACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "712";
        contaMovimento = "712";
    }
    if (nomeOrigem.contains("BENEFICIOS") && nomeOrigem.contains("VR") && complemento03.contains("REFEICAO/ ALIMENTACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "692";
        contaMovimento = "692";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("02 - COHAB ELEVADO") && complemento03.contains("COMPLEMENTO SALARIAL - ADM") && complemento04.contains("CONSULTA")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (complemento03.contains("IMPRESSORAS E TONERS/CARTUCHOS") && nomeOrigem.contains("ARTCOM") && nomeOrigem.contains("FAT") && complemento01.contains("07 - PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento03.contains("LOCACAO DE EQUIPAMENTOS, MAQUINAS E VEICULOS") && complemento04.contains("ND") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DB3") && nomeOrigem.contains("TELECOMUNICACOES")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento03.contains("DEVOLUCOES A CLIENTES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEVOLUCAO KAUA RAMOS - COD: 1051936.01")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DEVOLUCAO PACTE: PATRICK JONATHA COD: 562872.10") && complemento03.contains("DEVOLUCOES A CLIENTES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("DEVOLUCAO PIX PACIENTE - DEBORA FERNANDES") && complemento03.contains("DEVOLUCOES A CLIENTES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("J A DINIZ ARAUJO") && complemento03.contains("MANUTENCAO PREDIAL - CORRETIVA") && complemento04.contains("GRAXA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (nomeOrigem.contains("LV INSTALACOES COMERCIAIS LTDA FILIAL") && complemento03.contains("COMPRA MOVEIS E UTENSILIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "846";
        contaMovimento = "846";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MATEUS") && nomeOrigem.contains("SUPERMERCADOS") && complemento03.contains("EVENTOS/CONFRATERNIZACOES") && complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SELBETTI TECNOLOGIA S.A.") && complemento03.contains("LOCACAO DE EQUIPAMENTOS, MAQUINAS E VEICULOS")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento03.contains("FARDAMENTO - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONFECCOES") && nomeOrigem.contains("FARDAMENTO") && complemento01.contains("03 - RUA GRANDE")) {
        conta = "306";
        contaMovimento = "306";
    }
    if (nomeOrigem.contains("COMPRA") && complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CF")) {
        conta = "328";
        contaMovimento = "328";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("FUNCIONARIOS") && complemento04.contains("ADIANTAMENTO") && complemento03.contains("COMPLEMENTO SALARIAL")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (nomeOrigem.contains("CONSELHO") && complemento03.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("JOSE") && nomeOrigem.contains("ARIMATEA")) {
        conta = "906";
        contaMovimento = "906";
    }
    if (nomeOrigem.contains("MAIS IMAGEM MEDICINA DIAGNOSTICA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "1064";
        contaMovimento = "1064";
    }
    if (nomeOrigem.contains("DR") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("SANTIAGO")) {
        conta = "533";
        contaMovimento = "533";
    }
    if (complemento02.contains("AMORTIZACAO EMPRESTIMO PRINCIPAL  SANTANDER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "175";
        contaMovimento = "175";
    }
    if (nomeOrigem.contains("TRASNF. SALARIO PARA ALANA (TMK)") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (complemento02.contains("TREINAMENTO - ADM") && complemento01.contains("01 - HORTAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAMELA SABRINA SARAIVA SILVA")) {
        conta = "850";
        contaMovimento = "850";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES") && nomeOrigem.contains("CANC. - COMPRA DE SUPORTE BEBEDOURO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EXAME") && nomeOrigem.contains("DEVOLVIDO") && complemento02.contains("DEVOLUCOES A CLIENTES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && nomeOrigem.contains("INSTITUTO DO SONO DO MARANHAO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("PAG. A MAIOR CARTAO SANTANDER") && nomeOrigem.contains("PAG. A MAIOR CARTAO SANTANDER")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento02.contains("COMPRA MOVEIS E UTENSILIOS") && complemento01.contains("07 - MEDICAL MAIOBAO") && nomeOrigem.contains("SA") && nomeOrigem.contains("PEREIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "398";
        contaMovimento = "398";
    }
    if (complemento01.contains("01 - HORTAS") && nomeOrigem.contains("MOBILE") && nomeOrigem.contains("ZENVIA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("R. A. VIEGAS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("TRANSFERENCIA A FORNECEDOR - SISAC DIAGNOSTICO") && complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "183";
        contaMovimento = "183";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CANC. VENDA - COMPRA DE BEBEDOURO") && complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MANUTENCAO PREDIAL") && nomeOrigem.contains("CASAS FREITAS LTDA/CF 71852 - CARTAO VARAO CORTINAS")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LOJAS LE BISCUIT") && complemento05.contains("LOJAS LE BISCUIT/NF 22127 - LE BISCUIT")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("PFM COMERCIAL LTDA/NF 16600 - CASA FREITAS") && nomeOrigem.contains("PFM COMERCIAL LTDA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMERCIAL CASTRO - ALEXANDRE S REGO - ME/MAT. LIMPEZA NF-25342")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("LOJAS LE BISCUIT/NF 22127 - LE BISCUIT") && nomeOrigem.contains("LOJAS LE BISCUIT")) {
        conta = "112'";
        contaMovimento = "112'";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS GUSTAVO SARDINHA ALMEIDA/REF. BODAS DE OURO DR ARTHUR ALMEIDA")) {
        conta = "401";
        contaMovimento = "401";
    }
    if (complemento01.contains("02 - COHAB I") && nomeOrigem.contains("CASA & COR - LRC COMERCIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (documento.contains("CARTAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMPRA ESTORNADA CARTAO DE CRIEDITO") && complemento02.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("PARCELAMENTOS DE IMPOSTOS  E TRIBUTOS  - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("1124")) {
        conta = "651";
        contaMovimento = "651";
    }
    if (nomeOrigem.contains("CF") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (nomeOrigem.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MUNICIPAL") && nomeOrigem.contains("PREFEITURA")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (nomeOrigem.contains("VIGILANCIA") && nomeOrigem.contains("SANITARIA") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ISABEL") && complemento02.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("FABIO") && nomeOrigem.contains("MARIA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("TAXA SINDICAL LABORAL - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONTRIBUICAO") && complemento02.contains("TAXA SINDICAL LABORAL") && nomeOrigem.contains("ASSISTENCIAL")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (complemento01.contains("02 - COHAB ELEVADO") && complemento02.contains("FRETES") && nomeOrigem.contains("CORREIOS")) {
        conta = "313";
        contaMovimento = "313";
    }
    if (complemento03.contains("AGUA ENCANADA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("06 - TURU")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("ENERGIA ELETRICA")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("DR SAMPAIO SERVICOS LTDA ME")) {
        conta = "448";
        contaMovimento = "448";
    }
    if (nomeOrigem.contains("PIX") && complemento03.contains("DEVOLUCOES A CLIENTES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ESTORNO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("GCA OTORRINOLARINGOLOGIA LTDA")) {
        conta = "904";
        contaMovimento = "904";
    }
    if (nomeOrigem.contains("HR NEGOCIOS LTDA") && complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA - TMK") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "665";
        contaMovimento = "665";
    }
    if (nomeOrigem.contains("INSTITUTO DE COLOPROCTOLOGIA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "470";
        contaMovimento = "470";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && nomeOrigem.contains("INSTITUTO DO SONO DO MARANHAO")) {
        conta = "905";
        contaMovimento = "905";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("PABLO RAMOS MACARIO")) {
        conta = "916";
        contaMovimento = "916";
    }
    if (nomeOrigem.contains("INSS") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("NF") && complemento03.contains("MANUTENCAO PREDIAL - PREVENTIVA") && nomeOrigem.contains("POTIGUAR MATERIAIS DE CONSTRUCAO LTDA")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (complemento03.contains("AVISO PREVIO E INDENIZACOES") && nomeOrigem.contains("RESCISAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "123";
        contaMovimento = "123";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("T ARRUDA RIBEIRO")) {
        conta = "537";
        contaMovimento = "537";
    }
    if (complemento03.contains("DESPESAS COMPARTILHADA ENTRE SOCIOS") && nomeOrigem.contains("VIVO NORTE BRASIL TELECOMUNICACOES/APARELHOCEL.LUIS HENRIQUE-7 PARCELA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("TELECOMUNICACOES") && complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TELEFONIA FIXA") && nomeOrigem.contains("VIVO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (nomeOrigem.contains("AGORALUX COMERCIO DE MATERIAIS ELETRICOS LTDA") && complemento03.contains("MANUTENCAO PREDIAL - CORRETIVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("DISTRIBUIDORA DE PLASTICOS MARANHENSE LTDA/CF 50988 - COMPRA DE CORTINA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "311";
        contaMovimento = "311";
    }
    if (complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAG. CARTAO - FUNC. RUA GRANDE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF. PIX RUA GRANDE - PAC. JOSE RIBAMAR ALVES D")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (nomeOrigem.contains("VIVO NORTE BRASIL TELECOMUNICACOES/APARELHOCEL.LUIS HENRIQUE-8 PARCELA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DESPESAS COMPARTILHADA ENTRE SOCIOS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("CLINICA") && nomeOrigem.contains("STEPHANIE") && nomeOrigem.contains("OFTALMOLOGIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "441";
        contaMovimento = "441";
    }
    if (complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO") && complemento03.contains("ASSOCIACOES COMERCIAIS OU DE CLASSE")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (complemento01.contains("03 - RUA GRANDE") && complemento03.contains("PROPAGANDAS E PATROCINIOS - ADM") && nomeOrigem.contains("FACEBOOK") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PROPAGANDAS E PATROCINIOS - ADM") && nomeOrigem.contains("GOOGLE")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (complemento03.contains("CONSTRUCOES, AMPLIACOES E REFORMAS - ADM") && nomeOrigem.contains("JOSE ROBERTO CARVALHO LOBATO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "907";
        contaMovimento = "907";
    }
    if (nomeOrigem.contains("SANITARIA") && nomeOrigem.contains("VIGILLANCIA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUA") && nomeOrigem.contains("NOVA") && complemento02.contains("IPTU")) {
        conta = "361";
        contaMovimento = "361";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SEGURO CAIXA/SEGURO FUNC. - DEBITO AUTOMATICO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("A DE NEIVA GRANJA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AMORTIZACAO EMPRESTIMO PRINCIPAL BASA") && nomeOrigem.contains("BANCO") && nomeOrigem.contains("AMAZONIA")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CASTRO COMERCIO E REPRESENTACOES/MAT. HOSPITALAR NF-49665")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("TRANSF.DOC BANCO DO NORDESTE P/BANCO DO NORDESTE - BNB - CAUCAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("VALE") && complemento01.contains("04 - COHAB II") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSULTA")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (nomeOrigem.contains("LUIS GUSTAVO SARDINHA ALMEIDA/REF. BODAS DE OURO - DR ARTHUR ALMEIDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PFM COMERCIAL LTDA") && complemento05.contains("PFM COMERCIAL LTDA/NF 12946- CASA FREITAS- GARRAFA TERM.")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("PRECIORE MASTOLOGIA CLINICA E CIRURGIA LTDA/PRECIORE MASTOLOGIA CLINICA E CIRURGIA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("T A NEGRIZOLI EIRELI/NF 8-THEREZINHA ABREU NEGRIZOLI") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("T A NEGRIZOLI EIRELI")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("T A NEGRIZOLI EIRELI") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("T A NEGRIZOLI EIRELI/NF 7-THEREZINHA ABREU NEGRIZOLI")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("ARGO SEGUROS BRASIL S.A/REF.SEGURO RESPONS. CIVIL-MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "330";
        contaMovimento = "330";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS GUSTAVO SARDINHA ALMEIDA/REF. BODAS DE OURO - DR ARTHUR ALMEIDA")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (nomeOrigem.contains("MAXXCARD ADMINISTRADORA DE CARTOES LTDA/TARIFA MAXXCARD") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PRECIORE MASTOLOGIA CLINICA E CIRURGIA LTDA/PRECIORE MASTOLOGIA CLINICA E CIRURGIA LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("REVEST/REF. NF 6616-FECHADURA P/ GAVETA-REVEST") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MANUTENCAO DE MOVEIS E EQUIPAMENTOS ADMINISTRATIVO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CONDOMINIO DO PATIO NORTE SHOPPING/CONDOMINIO-PATIO NORTE") && complemento02.contains("CONDOMINIO") && complemento01.contains("07 - PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "398";
        contaMovimento = "398";
    }
    if (nomeOrigem.contains("CONDOMINIO") && complemento05.contains("CONDOMINIO DO PATIO NORTE SHOPPING/REF. MIDIA - 02/2023") && nomeOrigem.contains("NORTE") && nomeOrigem.contains("PATIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (nomeOrigem.contains("DORMED HOSPITALAR EIRELI") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("DORMED HOSPITALAR EIRELI/NF 4615 - CARTAO COMPRA ELETRODO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("04 - COHAB II") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA") && nomeOrigem.contains("LIMA")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("NF") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && nomeOrigem.contains("MENDES PINTO COMERCIO SERVICOS LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("WANDERSON NUNES DOS SANTOS 03486263390/NF 252- MANUT. E TESTE DE ALARMES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO") && nomeOrigem.contains("REGIONAL") && nomeOrigem.contains("MA")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (nomeOrigem.contains("R COS JUNIOR COMERCIO E SERVICOS") && complemento02.contains("MANUTENCAO DE MOVEIS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALENCAR & LOPES LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "420";
        contaMovimento = "420";
    }
    if (complemento03.contains("AGUA ENCANADA") && complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento01.contains("02 - COHAB ELEVADO") && complemento03.contains("AGUA ENCANADA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento03.contains("ENERGIA ELETRICA") && complemento01.contains("02 - COHAB ELEVADO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (complemento03.contains("ENERGIA ELETRICA") && complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (complemento03.contains("ENERGIA ELETRICA") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (nomeOrigem.contains("COSTA ALVES DERMATOLOGIA LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "895";
        contaMovimento = "895";
    }
    if (complemento03.contains("DEVOLUCOES A CLIENTES") && nomeOrigem.contains("DEVOLUCAO: PACTE FAGNA MARIA DE SOUSA - ECO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("DUAILIBE MEDICINA OCUPACIONAL EIRELI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "899";
        contaMovimento = "899";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("E.D.A ESCOLA DE DESENVOLVIMENTO") && complemento03.contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM")) {
        conta = "900";
        contaMovimento = "900";
    }
    if (complemento03.contains("PROPAGANDAS E PATROCINIOS - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FACEBOOK SERVICOS ONLINE DO BRASIL LTDA/IMPULSIONAMENTO")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("IPANEMA SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "682";
        contaMovimento = "682";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("KAIM SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "683";
        contaMovimento = "683";
    }
    if (complemento03.contains("REFORMA E AMPLIACAO - COHAB 2") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("POTIGUAR MATERIAIS DE CONSTRUCAO LTDA")) {
        conta = "672";
        contaMovimento = "672";
    }
    if (nomeOrigem.contains("STARMED EIRELI - EPP") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "922";
        contaMovimento = "922";
    }
    if (nomeOrigem.contains("TAMBAU SERVICOS ODONTOLOGICOS LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "689";
        contaMovimento = "689";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("06 - TURU") && complemento03.contains("TAXA DE ANTECIPACAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF.DOC HORTAS SANTANDER - HORTAS") && nomePortador.contains("SANTANDER - HORTAS") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("TELECOMUNICACOES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VIVO") && complemento03.contains("CELULARES CORPORATIVOS - ADM")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("VN SERVICOS MEDICOS LTDA")) {
        conta = "925";
        contaMovimento = "925";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("COMPLEMENTO SALARIAL - ADM") && nomeOrigem.contains("VOLUS TECNONOGIA E GESTAO DE BENEFICIOS LTDA")) {
        conta = "712";
        contaMovimento = "712";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ACDJS NEFROLOGIA ASSOCIADOS LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "890";
        contaMovimento = "890";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BARROSO SERVICOS MEDICOS LTDA")) {
        conta = "891";
        contaMovimento = "891";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAMPINA SERVICOS MEDICOS LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "1020";
        contaMovimento = "1020";
    }
    if (nomeOrigem.contains("CLIMATIZACAO E ASSISTENCIA TECNICA EM AR") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS")) {
        conta = "946";
        contaMovimento = "946";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("VALE") && complemento04.contains("CONSULTA") && complemento01.contains("05 - MARCUS CENTER")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (nomeOrigem.contains("ALIMENTACAO") && nomeOrigem.contains("VR") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("SEGURO PREDIAL - MEDICOS E OUTROS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("L E S EUGENIO")) {
        conta = "1024";
        contaMovimento = "1024";
    }
    if (nomeOrigem.contains("ENERGIA") && nomeOrigem.contains("CONSORCIO") && complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("R. KASSINTON SANTOS SILVA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1025";
        contaMovimento = "1025";
    }
    if (complemento03.contains("VALE TRANSPORTE - TMK") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SINDICATO") && nomeOrigem.contains("SET")) {
        conta = "304";
        contaMovimento = "304";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("03 - RUA GRANDE") && complemento03.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("CARVALHO") && nomeOrigem.contains("CF")) {
        conta = "328";
        contaMovimento = "328";
    }
    if (complemento03.contains("EMPRESTIMO ENTRE EMPRESAS") && nomeOrigem.contains("SARDINHA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS") && nomeOrigem.contains("GUSTAVO")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (nomeOrigem.contains("R F SANTOS ROSA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "1065";
        contaMovimento = "1065";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA") && nomeOrigem.contains("ALUGUEL")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (nomeOrigem.contains("FOLHA") && nomeOrigem.contains("DE") && nomeOrigem.contains("PAGAMENTO") && complemento01.contains("02 - COHAB I") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (nomeOrigem.contains("EMPRESTIMO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("AMAZONIA") && complemento02.contains("AMORTIZACAO") && complemento01.contains("04 - COHAB II")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (nomeOrigem.contains("PAGAMENTO") && complemento01.contains("02 - COHAB I") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FOLHA") && nomeOrigem.contains("DE")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (complemento02.contains("VALE TRANSPORTE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("07 - MEDICAL MAIOBAO") && nomeOrigem.contains("SET")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BELLIS BRASIL EIRELI - ME")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("13 SALARIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (complemento05.contains("TRANSF.DOC PATIO NORTE SANTANDER - MAIOBAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF.DOC PATIO NORTE SANTANDER - MAIOBAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("07 - PATIO NORTE") && complemento02.contains("REFEICAO/ ALIMENTACAO") && nomeOrigem.contains("VR")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("A I G MENDES EIRELI") && complemento02.contains("HONORARIOS MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("DC BATERIAS LTDA/NF 6498 - CARTAO BATERIAS PARA DEA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DC BATERIAS LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARIA") && nomeOrigem.contains("MALVA") && complemento02.contains("HONORARIOS MEDICOS") && complemento01.contains("06 - TURU")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("BEM VIVER SERVICOS MEDICOS LTDA")) {
        conta = "950";
        contaMovimento = "950";
    }
    if (nomeOrigem.contains("CANTANHEDE & FREITAS SS LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "432";
        contaMovimento = "432";
    }
    if (complemento03.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && nomeOrigem.contains("CLICK LAUDOS EM TELEMEDICINA/CLICK LAUDOS EM MEDICINA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (nomeOrigem.contains("CONSULTORIO DRA FLAVIA MOHANA LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "893";
        contaMovimento = "893";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("D.C.L MARQUES SERVICOS MEDICOS EIRELI")) {
        conta = "611";
        contaMovimento = "611";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("1124") && nomeOrigem.contains("DARF") && complemento03.contains("PAGAMENTOS DE JUROS DE TITULOS")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("DIPEREZ - SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "898";
        contaMovimento = "898";
    }
    if (nomeOrigem.contains("FGTS") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("FGTS")) {
        conta = "129";
        contaMovimento = "129";
    }
    if (nomeOrigem.contains("FRANCISCO CARNEIRO EMPREENDIMENTOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "944";
        contaMovimento = "944";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GALVAO GONCALVES SERVICOS MEDICOS LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "903";
        contaMovimento = "903";
    }
    if (nomeOrigem.contains("INSS") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("INSS")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (nomeOrigem.contains("INSTITUTO MEDICO DE ULTRASSONOGRAFIA LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "472";
        contaMovimento = "472";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ISS") && complemento03.contains("ISS")) {
        conta = "145";
        contaMovimento = "145";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LEDA BRAGA SERVICOS MEDICOS LTDA")) {
        conta = "910";
        contaMovimento = "910";
    }
    if (nomeOrigem.contains("LEITE MAIA SERVICOS MEDICOS LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "911";
        contaMovimento = "911";
    }
    if (nomeOrigem.contains("LUDMILA M DA S CARDOSO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "912";
        contaMovimento = "912";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("M K SERVICOS MEDICOS LTDA")) {
        conta = "684";
        contaMovimento = "684";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MATOS E LIMA LTDA ME") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "497";
        contaMovimento = "497";
    }
    if (complemento03.contains("TAXAS DE CARTAO DEBITO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("06 - TURU")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TAXA DE ANTECIPACAO") && complemento01.contains("07 - PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("02 - COHAB ELEVADO") && complemento03.contains("TAXA DE ANTECIPACAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXA DE ANTECIPACAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TAXA DE ANTECIPACAO") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF.DOC PATIO NORTE SANTANDER - MAIOBAO") && nomePortador.contains("SANTANDER - MAIOBAO") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento03.contains("ABASTECIMENTO DE VEICULOS - ADM") && nomeOrigem.contains("VOLUS TECNONOGIA E GESTAO DE BENEFICIOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "712";
        contaMovimento = "712";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("REFEICAO / ALIMENTACAO - TMK") && nomeOrigem.contains("BENEFICIOS") && nomeOrigem.contains("VR")) {
        conta = "692";
        contaMovimento = "692";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LAUDOS") && nomeOrigem.contains("CLICK") && complemento01.contains("05 - MARCUS CENTER") && complemento03.contains("LOCACAO DE EQUIPAMENTOS, MAQUINAS E VEICULOS")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DB3") && nomeOrigem.contains("TELECOMUNICACOES") && complemento03.contains("LOCACAO DE EQUIPAMENTOS, MAQUINAS E VEICULOS") && complemento01.contains("05 - MARCUS CENTER")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento03.contains("ASSESSORIAS E PLANEJAMENTO EM GESTAO - ADM") && nomeOrigem.contains("OVERA CAPITAL ASSESSORIA FINANCEIRA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "334";
        contaMovimento = "334";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADIANTAMENTO") && nomeOrigem.contains("FUNCIONARIOS") && complemento02.contains("SALARIOS")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (nomeOrigem.contains("0561") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IRRF")) {
        conta = "141";
        contaMovimento = "141";
    }
    if (nomeOrigem.contains("ADIANTAMENTO") && nomeOrigem.contains("PAGAMENTO") && nomeOrigem.contains("FOLHA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (nomeOrigem.contains("FOLHA") && complemento02.contains("SALARIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAGAMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (complemento02.contains("ENCARGOS") && nomeOrigem.contains("IOF") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TARIFAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ISS ") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("PARCELAMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("MAIOBAO") && complemento02.contains("SAUDE") && complemento02.contains("PLANO")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PLANO") && complemento02.contains("SAUDE") && nomeOrigem.contains("SUPERVIDA")) {
        conta = "565";
        contaMovimento = "565";
    }
    if (complemento02.contains("AMORTIZACAO") && complemento02.contains("PRINCIPAL") && nomeOrigem.contains("BANCO DA AMAZONIA/EMPRESTIMO BANCO DA AMAZONIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (complemento02.contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("5952") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && nomeOrigem.contains("DARF")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && complemento01.contains("02 - COHAB I") && nomeOrigem.contains("CERTIDOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSPORTE") && nomeOrigem.contains("EMPRESAS") && complemento01.contains("07 - PATIO NORTE") && complemento02.contains("VALE TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE ENFERMAGEM - MA/TAXA RESPONSABILIDADE TECNICA")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("STARMED EIRELI - EPP") && complemento05.contains("STARMED EIRELI - EPP/NF 30- DRA. MILENA ALENCAR MENDONCA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("CONSELHO REGIONAL DE ENFERMAGEM - MA/TAXA RESPONSABILIDADE TECNICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ACAO JUDICIAL/DEP. - CAUSAS TRABALHISTAS SIND ENFERMAG") && complemento02.contains("PAGAMENTO DE CAUSAS JURIDICAS - ADM")) {
        conta = "166";
        contaMovimento = "166";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DESPESAS COMPARTILHADA ENTRE SOCIOS") && nomeOrigem.contains("LUIS GUSTAVO SARDINHA ALMEIDA/REF. BODAS DE OURO DR ARTHUR")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("ORTOPEDIA CALIXTO LTDA/NF 12- CONSERTO CADEIRA DE RODAS") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomePortador.contains("SANTANDER") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("LICENCIAMENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("IPVA") && nomeOrigem.contains("MOTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TAXAS") && complemento02.contains("IPVA") && nomeOrigem.contains("MOTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomePortador.contains("SANTANDER - COHAB I") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ENERGIA ELETRICA") && nomeOrigem.contains("VALORGAS") && nomeOrigem.contains("CONSORCIO")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("EMPRESTIMOS") && nomeOrigem.contains("SANTANDER")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (complemento04.contains("ADIANTAMENTO") && complemento04.contains("FUNCIONARIOS") && complemento03.contains("SALARIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (nomeOrigem.contains("COMERCIAL") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM") && nomeOrigem.contains("MARANHAO") && complemento01.contains("03 - RUA GRANDE")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("AMORTIZACAO EMPRESTIMO PRINCIAPL BNB") && nomePortador.contains("BANCO DO NORDESTE- M&L")) {
        conta = "174";
        contaMovimento = "174";
    }
    if (complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("AGUA ENCANADA")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento03.contains("ENERGIA ELETRICA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("D A B DE SA LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "896";
        contaMovimento = "896";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("EXAMINAR SERVICOS DE NEUROFISIOLOGIA CLINICA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "943";
        contaMovimento = "943";
    }
    if (complemento03.contains("SALARIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FOLHA") && nomeOrigem.contains("PAGAMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (complemento04.contains("IANELE") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INSTITUTO MEDICO CARDIOLOGICO S/C LTDA")) {
        conta = "467";
        contaMovimento = "467";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("J M C DE F SANTOS")) {
        conta = "477";
        contaMovimento = "477";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("L.F.M. DE ALMEIDA SERVICOS MEDICOS LTDA")) {
        conta = "908";
        contaMovimento = "908";
    }
    if (complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && nomeOrigem.contains("PAG. VR ALIMENTACAO UNIDADES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("R R R BATISTA SERVICOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "919";
        contaMovimento = "919";
    }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (complemento03.contains("AMORTIZACAO EMPRESTIMO PRINCIPAL  SANTANDER") && nomePortador.contains("SANTANDER - HORTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "175";
        contaMovimento = "175";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("SANTILHA SERVICOS MEDICOS E DIAGNOSTICOS IMAGEM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "529";
        contaMovimento = "529";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("SERVCON SERVICOS E CONSULTAS MEDICO AMBULATORIAL")) {
        conta = "531";
        contaMovimento = "531";
    }
    if (nomeOrigem.contains("SUPERCLINICA - UNIDADE COHAB II /DEVOLUCAO P/[C.CORRENTE] MURILO RIBEIRO GUIMARAES") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DEVOLUCOES A CLIENTES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXAS DE CARTAO DEBITO") && complemento01.contains("05 - MARCUS CENTER")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXAS DE CARTAO DEBITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("02 - COHAB ELEVADO") && complemento03.contains("TAXAS DE CARTAO DEBITO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("07 - PATIO NORTE") && complemento03.contains("TAXAS DE CARTAO DEBITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && tipoPlanilha.contains("MOVIMENTO") && nomePortador.contains("SANTANDER - COHAB II") && nomeOrigem.contains("TRANSF.DOC COHAB TERMINAL DE INTEGRACAO SANTANDER")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VIEIRA E CAMPELO SERVICOS MEDICOS LTDA")) {
        conta = "924";
        contaMovimento = "924";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BIOFORMULA") && nomeOrigem.contains("MANIPULACAO") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && complemento04.contains("NF")) {
        conta = "660";
        contaMovimento = "660";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("BRUNO HENRIQUE DA SILVA PEREIRA SERVCOS")) {
        conta = "608";
        contaMovimento = "608";
    }
    if (nomeOrigem.contains("C M DOS S C BRANCO") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1013";
        contaMovimento = "1013";
    }
    if (complemento03.contains("IRRF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARF") && nomeOrigem.contains("0561")) {
        conta = "141";
        contaMovimento = "141";
    }
    if (complemento03.contains("PASSAGENS, HOSPED, ALIMENT/.REEMBOLSO DE KM - ADM") && nomeOrigem.contains("EAGLE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("M DE F L PINTO EIRELI - EPP/MAT.HOSPITALAR") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "670";
        contaMovimento = "670";
    }
    if (complemento01.contains("07 - PATIO NORTE") && nomeOrigem.contains("SET") && nomeOrigem.contains("SINDICATO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("VALE TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("VALE TRANSPORTE") && complemento01.contains("02 - COHAB ELEVADO") && nomeOrigem.contains("SINDICATO") && nomeOrigem.contains("SET")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento03.contains("VALE TRANSPORTE") && complemento01.contains("05 - MARCUS CENTER") && nomeOrigem.contains("SINDICATO") && nomeOrigem.contains("SET") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("03 - RUA GRANDE") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SINDICATO") && nomeOrigem.contains("SET") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("INSTITUTO DE IMERSAO EM MEDICINA LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1049";
        contaMovimento = "1049";
    }
    if (nomeOrigem.contains("JUROS") && nomeOrigem.contains("CAIXA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ECONOMICA") && nomeOrigem.contains("EMPRESTIMOS")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (complemento01.contains("GRANDE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMPRESTIMOS") && nomeOrigem.contains("ENCARGOS") && complemento02.contains("JUROS")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EMPRESTIMOS") && complemento02.contains("JUROS") && nomeOrigem.contains("SANTANDER") && nomeOrigem.contains("GARANTIDA")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("JUROS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GIRO") && nomeOrigem.contains("SANTANDER") && complemento02.contains("EMPRESTIMOS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("SAUDE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("I") && complemento01.contains("COHAB") && complemento02.contains("PLANO")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (nomeOrigem.contains("JUROS") && complemento01.contains("II") && nomeOrigem.contains("AMAZONIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMPRESTIMO")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("I S L DE OLIVEIRA SERVICOS MEDICOS") && complemento02.contains("HONORARIOS MEDICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VIGILANCIA") && nomeOrigem.contains("SANITARIA") && complemento01.contains("02 - COHAB I") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("JF SERVICOS OFTALMOLOGICOS/NF 19- DRA. M JULIANA REF 04.22 E 12.22") && nomeOrigem.contains("JF SERVICOS OFTALMOLOGICOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("T A NEGRIZOLI EIRELI") && complemento05.contains("T A NEGRIZOLI EIRELI/NF 9 - DRA. THEREZINHA ABREU NEGRIZOLI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIGIRATI INFORMATICA SERVICOS TELECOMUNICACAO/RENOVACAO DE DOMINIO SUPERCLINICA.COM") && complemento05.contains("DIGIRATI INFORMATICA SERVICOS TELECOMUNICACAO/RENOVACAO DE DOMINIO SUPERCLINICA.COM")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("JF SERVICOS OFTALMOLOGICOS/NF 19- DRA. M JULIANA REF 04.22 E 12.22") && nomeOrigem.contains("JF SERVICOS OFTALMOLOGICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PREFEITURA DE SAO JOSE DE RIBAMAR/TAXA DE ALVARA SJR-2023")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("RADHAR NEGOCIOS E REPRESENTACOES EIRELLI/MATERIAL DE SERVICO DE LIMPEZA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "328";
        contaMovimento = "328";
    }
    if (nomeOrigem.contains("REVEST") && complemento05.contains("REVEST/NF 399783-MAT. DA OBRA DO PISO") && complemento02.contains("MANUTENCAO PREDIAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BOMBEIROS") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && complemento01.contains("07 - PATIO NORTE") && nomeOrigem.contains("SEFAZ")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (complemento01.contains("02 - COHAB I") && nomeOrigem.contains("SEFAZ") && nomeOrigem.contains("BOMBEIROS") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("JUDICIAL") && nomeOrigem.contains("DEPOSITO") && nomeOrigem.contains("COFINS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PIS")) {
        conta = "105";
        contaMovimento = "105";
    }
    if (complemento03.contains("AMORTIZACAO EMPRESTIMO PRINCIPAL BASA") && nomePortador.contains("BANCO DA AMAZONIA - BASA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (nomePortador.contains("BANCO DO NORDESTE- M&L") && complemento03.contains("AMORTIZACAO EMPRESTIMO PRINCIPAL  SANTANDER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "175";
        contaMovimento = "175";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRITO ASSESSORIA E SERVICOS MEDICOS SS ME") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "426";
        contaMovimento = "426";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("C. R. L. NEUENSCHWANDER PENHA - ME") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "431";
        contaMovimento = "431";
    }
    if (nomeOrigem.contains("MASTERCARD") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("COSERMED - CONSULTORIOS E SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "894";
        contaMovimento = "894";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("D S M SELARES SERVICOS DE PSICOLOGIA")) {
        conta = "897";
        contaMovimento = "897";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("I S L DE OLIVEIRA SERVICOS MEDICOS")) {
        conta = "945";
        contaMovimento = "945";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MAYA & FONTES MARTINS LTDA - ME")) {
        conta = "928";
        contaMovimento = "928";
    }
    if (complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && complemento03.contains("TAXA DE ANTECIPACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TRANSF.DOC COHAB ELEVADO SANTANDER - COHAB I") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && nomePortador.contains("SANTANDER - COHAB I")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF.DOC MARCUS CENTER SANTANDER - MARCUS CENTER") && nomePortador.contains("SANTANDER - MARCUS CENTER") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && nomePortador.contains("SANTANDER - RUA GRANDE") && nomeOrigem.contains("TRANSF.DOC RUA GRANDE SANTANDER - RUA GRANDE")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("VIVO") && complemento03.contains("CELULARES CORPORATIVOS - ADM") && complemento01.contains("09 - TELEMARKETING") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TELECOMUNICACOES")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS") && nomeOrigem.contains("RODOLFO") && complemento03.contains("PRO-LABORE RODOLFO")) {
        conta = "125";
        contaMovimento = "125";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("M A SABOIA ASSISTENCIA MEDICA - ME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "489";
        contaMovimento = "489";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("M DE F L PINTO EIRELI - EPP/MAT. HOSPITALAR") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "670";
        contaMovimento = "670";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("J BORBA DE FREITAS NETO OFTALMOLOGIA LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "1023";
        contaMovimento = "1023";
    }
    if (nomeOrigem.contains("GUSTAVO") && complemento03.contains("PRO-LABORE GUSTAVO") && nomeOrigem.contains("LUIS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "125";
        contaMovimento = "125";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("M. P. D. L. CONSULTORIA MEDICA S/S")) {
        conta = "1056";
        contaMovimento = "1056";
    }
    if (nomeOrigem.contains("V DE J V MELO SERVICOS MEDICOS") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1066";
        contaMovimento = "1066";
    }
    if (nomeOrigem.contains("DEBITO") && nomeOrigem.contains("GETNET") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("HORTAS") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("01 - HORTAS") && nomeOrigem.contains("5952") && nomeOrigem.contains("DARF")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (complemento02.contains("SALARIOS - TMK") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF MC AJUSTE CAUCAO") && complemento01.contains("01 - HORTAS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("CELULARES CORPORATIVOS - ADM") && nomeOrigem.contains("VIVO") && nomeOrigem.contains("TELECOMUNICACOES") && complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && complemento01.contains("05 - MARCUS CENTER") && nomeOrigem.contains("WORLD SIGN SERVICOS DE COMUNICACAO VISUAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("ZENVIA MOBILE SERVICOS DIGITAIS SA/FATURA 140394 ZENVIA") && complemento01.contains("01 - HORTAS") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAUA CARDOSO PAULINO") && complemento02.contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("DECIMO TERCEIRO/1 PARCELA DECIMO TERCEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAG. DR. JANARI A MAIOR - NAO DESCONTOU IMP RENDA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE ENFERMAGEM - MA/TAXA RESPONSABILIDADE TECINICA - MYRIA")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("TABELIAO TITO SOARES - CARTORIO/CF 235333 CARTAO - CONTRATO BNB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "312";
        contaMovimento = "312";
    }
    if (nomeOrigem.contains("CONSELHO REGIONAL DE ENFERMAGEM - MA/TAXA RESPONSABILIDADE TECINICA - MYRIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (nomeOrigem.contains("TABELIAO TITO SOARES - CARTORIO/CF 235333 CARTAO - CONTRATO BNB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "312";
        contaMovimento = "312";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO") && nomeOrigem.contains("EVOLUTIVA LIVRARIA E PAPELARIA LTDA/CF 76417 - COMPRA DE ENVELOPES EXAMES")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (complemento01.contains("03 - RUA GRANDE") && nomeOrigem.contains("E.D.A ESCOLA DE DESENVOLVIMENTO") && complemento02.contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DESPESAS COMPARTILHADA ENTRE SOCIOS") && nomeOrigem.contains("GRUPO EMPRESARIAL PAX UNIAO LTDA/COROA DE FLORES - IRMAO DR. OSEAS")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (complemento02.contains("AGUA ENCANADA") && nomeOrigem.contains("BASICO") && nomeOrigem.contains("SANEAMENTO") && nomeOrigem.contains("COMPANHIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (complemento05.contains("EMPRESA JUNIOR DE ADMINISTRACAO UEMA/NF 257 - PESQUISA MERCADO ENTRADA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMPRESA JUNIOR DE ADMINISTRACAO UEMA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO") && complemento01.contains("07 - PATIO NORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT.HOSPITALAR")) {
        conta = "660";
        contaMovimento = "660";
    }
    if (complemento03.contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARTAO") && nomeOrigem.contains("ANUIDADE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS") && nomeOrigem.contains("CAUA CARDOSO PAULINO")) {
        conta = "892";
        contaMovimento = "892";
    }
    if (complemento03.contains("PLANO DE SAUDE - ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "528";
        contaMovimento = "528";
    }
    if (complemento03.contains("CORREIOS / SEDEX - ADM") && tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("CF") && complemento01.contains("03 - RUA GRANDE")) {
        conta = "312";
        contaMovimento = "312";
    }
    if (nomeOrigem.contains("DARF") && nomeOrigem.contains("3208") && complemento03.contains("IRRF SOBRE ALUGUEL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (complemento03.contains("PAGAMENTOS DE JUROS DE TITULOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIGI MANIA COMERCIO ELETRONICO EIRELI")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("FERIAS E ABONOS PECUNIARIOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FERIAS")) {
        conta = "122";
        contaMovimento = "122";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("J DE R CASTRO VELOSO SERVICOS - ME") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "476";
        contaMovimento = "476";
    }
    if (nomeOrigem.contains("PROTEGE CLIN DE PREVENCAO DO CANCE GINECOLIGO LTDA") && complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "516";
        contaMovimento = "516";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("SERVICO DE URGENCIA DO MARANHAO LTDA - EPP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "532";
        contaMovimento = "532";
    }
    if (nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE 01/24") && complemento03.contains("VALE TRANSPORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && complemento01.contains("01 - HORTAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TAXAS DE CARTAO DEBITO") && complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("05 - MARCUS CENTER") && complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOSE ARIMATEIA ALVES DE CARVALHHO JR SERV MEDICOS")) {
        conta = "481";
        contaMovimento = "481";
    }
    if (nomeOrigem.contains("COMPRA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIS") && nomeOrigem.contains("RODOLFO") && complemento03.contains("PRO-LABORE RODOLFO")) {
        conta = "401";
        contaMovimento = "401";
    }
    if (nomeOrigem.contains("MACROPACK DISTRIBUIDORA") && complemento03.contains("MATERIAIS DE COPA/COZINHA - ADM") && tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("MACROPACK DISTRIBUIDORA/NF 351128 - CARTAO GARRAFA TERMICA TMK")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SET") && complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SINDICATO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("02 - COHAB ELEVADO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("LOJAS LE BISCUIT") && complemento04.contains("LOJAS LE BISCUIT/NF 13144 COMPRA DE MICROONDAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANDREAZZA - PAG. CARTAO SANTANDER") && complemento01.contains("01 - HORTAS") && complemento02.contains("TRANSFERENCIA ENTRE CONTAS") && complemento05.contains("ANDREAZZA - PAG. CARTAO SANTANDER")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomePortador.contains("BANCO DO NORDESTE") && complemento02.contains("APLICACAO FINANCEIRA") && nomeOrigem.contains("APLICACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "386";
        contaMovimento = "386";
    }
    if (nomeOrigem.contains("MULTIMIDIA CONSTRUCAO/COMPRA DE EQUIP. ELETRON. RECEP. 2-NF 41154") && complemento05.contains("MULTIMIDIA CONSTRUCAO/COMPRA DE EQUIP. ELETRON. RECEP. 2-NF 41154") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("SOBERANA SEGURANCA/REF. NF 170252-PLACA DE SINALIZ. DA PORTA-RECEPCAO") && nomeOrigem.contains("SOBERANA SEGURANCA/REF. NF 170252-PLACA DE SINALIZ. DA PORTA-RECEPCAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("TRANSF. SUPERDIAG - PAC. ARNALDO OTAVIO GALVAO BER") && nomeOrigem.contains("TRANSF. SUPERDIAG - PAC. ARNALDO OTAVIO GALVAO BER")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("VIVO NORTE BRASIL TELECOMUNICACOES/VIVO REF A 01.2023") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CELULARES CORPORATIVOS - ADM")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IR S/ APLICACAO - RESGATE FUNDOS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SANTANDER (EMPRESTIMOS)/PAGAMENTO CONTA GARANTIDA - 2250") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AMORTIZACAO CONTA GARATIDA - PRINCIPAL")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("02 - COHAB I") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ISS") && complemento02.contains("PAGAMENTOS DE JUROS DE TITULOS")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (nomePortador.contains("SANTANDER - COHAB I") && nomeOrigem.contains("CONSORCIO VALORGAS ENERGIA SUSTENTAVEL MAIII/CONSORCIO DE ENERGIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomeOrigem.contains("BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT. HOSPITALAR") && complemento03.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "660";
        contaMovimento = "660";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSORCIO VITALMED SAFECARE") && complemento03.contains("PLANO DE SAUDE")) {
        conta = "528";
        contaMovimento = "528";
    }
    if (nomeOrigem.contains("ISA M B M S J SERVICOS MEDICOS LTDA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "617";
        contaMovimento = "617";
    }
    if (nomeOrigem.contains("ISS") && complemento03.contains("PAGAMENTOS DE JUROS DE TITULOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (nomeOrigem.contains("M. S. 2 SERVICOS MEDICOS LTDA ME - ME") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "492";
        contaMovimento = "492";
    }
    if (complemento03.contains("13 SALARIO - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TECNONOGIA") && nomeOrigem.contains("VOLUS")) {
        conta = "712";
        contaMovimento = "712";
    }
    if (nomeOrigem.contains("AMAZONIA") && nomeOrigem.contains("JUROS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("04 - COHAB II") && nomeOrigem.contains("EMPRESTIMO")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (complemento01.contains("01 - HORTAS") && nomeOrigem.contains("VALOR PENDENTE DEBADQUIRENCIA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (nomeOrigem.contains("TRANSF.-PAG. DE OUTRA UNID. (TURU) NF 12") && complemento05.contains("TRANSF.-PAG. DE OUTRA UNID. (TURU) NF 12") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TRANSFERENCIA ENTRE CONTAS")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("CASTRO COMERCIO E REPRESENTACOES/MAT. HOSPITALAR NF-50443") && complemento02.contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)") && nomeOrigem.contains("CASTRO COMERCIO E REPRESENTACOES/MAT. HOSPITALAR NF-50443") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GCA OTORRINOLARINGOLOGIA LTDA") && complemento05.contains("GCA OTORRINOLARINGOLOGIA LTDA/NF 3-DR. GUILHERME CASTRO ALVES")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("GCA OTORRINOLARINGOLOGIA LTDA/NF 2-DR. GUILHERME CASTRO ALVES") && complemento02.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("GCA OTORRINOLARINGOLOGIA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && complemento05.contains("MAPLE HOSPITALAR COMERCIO E/NF 2440- PAS ELETRODO P/ DEA")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento05.contains("R M DA SILVA VOSTA/NF 4973 - CARTAO COMPRA FECHADURA") && complemento02.contains("MANUTENCAO PREDIAL") && nomeOrigem.contains("R M DA SILVA VOSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARF") && nomeOrigem.contains("1708") && complemento03.contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("PARCELAMENTO") && complemento03.contains("PAGAMENTOS DE JUROS DE TITULOS") && nomeOrigem.contains("INSS")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LARA PARAGUASSU DEMES FRANCA LTDA") && complemento03.contains("HONORARIOS MEDICOS")) {
        conta = "909";
        contaMovimento = "909";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("SEGUROS - ADM") && nomeOrigem.contains("SEGURO CAIXA/SEGURO CAIXA FUNCIONARIOS")) {
        conta = "129";
        contaMovimento = "129";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento04.contains("TRANSF.DOC SANTANDER - HORTAS P/CAIXA ECONOMICA FEDERAL-HORTAS") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && nomeOrigem.contains("TRANSF.DOC SANTANDER - HORTAS P/CAIXA ECONOMICA FEDERAL-HORTAS")) {
        conta = "14";
        contaMovimento = "14";
    }
    if (complemento03.contains("PAGAMENTOS DIVERSOS - UNIDADES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VIVO NORTE BRASIL TELECOMUNICACOES/PARC. 1-CELULAR DA VIVO-LUCILENE SABOIA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE") && complemento03.contains("VALE TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("DARF") && nomeOrigem.contains("5952") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CSRF")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (nomeOrigem.contains("CAIXA") && nomeOrigem.contains("ANIDADE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("01 - HORTAS") && complemento02.contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("07 - MEDICAL MAIOBAO") && complemento02.contains("TAXAS DE CARTAO DEBITO") && nomeOrigem.contains("TAR PIX REC QR CHECKOUT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EVOLUTIVA LIVRARIA E PAPELARIA LTDA/CF 72221 - COMPRA ENVELOPES EXAMES") && complemento02.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (nomeOrigem.contains("EVOLUTIVA LIVRARIA E PAPELARIA LTDA/CF 72367 - COMPRA DE ENVELOPES") && complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO")) {
        conta = "326";
        contaMovimento = "326";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/REF. ALIMENTACAO 05/2023") && nomePortador.contains("SANTANDER - COHAB I")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO") && nomeOrigem.contains("ALUGUEL MAQUINA")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (complemento03.contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("1708") && nomeOrigem.contains("DARF")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (complemento03.contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS") && nomeOrigem.contains("INSS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RETENCAO")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (nomeOrigem.contains("SEGURO") && nomeOrigem.contains("PROTEGIDO:") && complemento02.contains("TARIFAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CHEQUE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("SEGURO PREDIAL - MEDICOS E OUTROS") && nomeOrigem.contains("BRASIL") && nomeOrigem.contains("SEGUROS") && nomeOrigem.contains("ARGO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("PFM COMERCIAL LTDA/CF 91193 - GUARDA CHUVA SR. BRANCO/MEDICOS") && complemento02.contains("ESTACIONAMENTO") && complemento05.contains("PFM COMERCIAL LTDA/CF 91193 - GUARDA CHUVA SR. BRANCO/MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && nomeOrigem.contains("INSTRAMED INDUSTRIA MEDICO HOSPITALAR LTDA") && complemento05.contains("INSTRAMED INDUSTRIA MEDICO HOSPITALAR LTDA/NF 53561-ELETRODO/ PAS - INSTRAMED") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("EQUIPAMENTOS DE INFORMATICA") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("MULTIMIDIA CONSTRUCAO/REF. CF 42455- TECLADO - SALA 6") && nomeOrigem.contains("MULTIMIDIA CONSTRUCAO/REF. CF 42455- TECLADO - SALA 6")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (complemento05.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. LIMPEZA NF-762") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. LIMPEZA NF-762")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. LIMPEZA NF-786") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. LIMPEZA NF-786")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. LIMPEZA NF-788") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. LIMPEZA NF-788")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("REPASSE MEDICO/CLICK LAUDOS - 01 A 31.01") && complemento02.contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") && complemento05.contains("REPASSE MEDICO/CLICK LAUDOS - 01 A 31.01")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("WDISCOVER SOLUCOES EM INFORMATICA LTDA/NF 488 - MANUENCAO BI") && nomeOrigem.contains("WDISCOVER SOLUCOES EM INFORMATICA LTDA") && complemento02.contains("MANUTENCAO DE SOFTWARE - ADM")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("FOLHA") && complemento04.contains("ADIANTAMENTO") && complemento03.contains("SALARIOS") && nomeOrigem.contains("PAGAMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("PROSEM - PROFISSIONAIS DE SERVICOS MEDICOS LTDA")) {
        conta = "917";
        contaMovimento = "917";
    }
    if (nomeOrigem.contains("TARIFA DOC/TED") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento04.contains("TRANSF.DOC TURU SANTANDER - MARIO ANDREAZZA") && nomeOrigem.contains("TRANSF.DOC TURU SANTANDER - MARIO ANDREAZZA") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && tipoPlanilha.contains("MOVIMENTO") && nomePortador.contains("SANTANDER - MARIO ANDREAZZA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento03.contains("PASSAGENS, HOSPED, ALIMENT/.REEMBOLSO DE KM - ADM") && nomeOrigem.contains("VIAGEM") && nomeOrigem.contains("SOCIOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (complemento03.contains("PASSAGENS, HOSPED, ALIMENT/.REEMBOLSO DE KM - ADM") && nomeOrigem.contains("SOCI") && nomeOrigem.contains("VIAGEM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/REF. 02/2024") && complemento03.contains("VALE TRANSPORTE") && complemento01.contains("02 - COHAB ELEVADO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("06 - TURU") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE FUNCIONARIOS 02/24") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("LUIS GUSTAVO SARDINHA ALMEIDA/REF. BODAS DE OURO DR ARTHUR ALMEIDA") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("LUIS GUSTAVO SARDINHA ALMEIDA/REF. BODAS DE OURO DR ARTHUR ALMEIDA")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (nomeOrigem.contains("GCA OTORRINOLARINGOLOGIA LTDA") && complemento05.contains("GCA OTORRINOLARINGOLOGIA LTDA/NF 04 - DR. GUILHERME 01 A 15.02") && complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA") && complemento05.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/NF 771 - MATERIAL DE LIMPEZA") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("POINT GRAVACOES PRODUTORA DE AUDIO") && complemento05.contains("POINT GRAVACOES PRODUTORA DE AUDIO/NF 202376 - MENSAGEM URA TMK") && complemento02.contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (nomeOrigem.contains("TARIFA CESTA PJ2") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAXAS DE CARTAO DEBITO") && complemento01.contains("06 - TURU") && nomeOrigem.contains("TAXA DE CARTAO CREDITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IR S/ APLICACAO - 04 A 11.2022") && complemento02.contains("IMPOSTSO S/ APLICACAO FINANCEIRA")) {
        conta = "49";
        contaMovimento = "49";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA MENSAL PACOTE SERV") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SEGURO CAPITAL DE GIRO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("SHERWIN - WILLIAMS DO BRASIL INSDUSTRIA E COMERCIO") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("SHERWIN - WILLIAMS DO BRASIL INSDUSTRIA E COMERCIO/NF 2263 - CARTAO TINTAS MAIOBAO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("07 - PATIO NORTE") && nomeOrigem.contains("CASA & COR - LRC COMERCIO") && complemento05.contains("CASA & COR - LRC COMERCIO/NF 82122- TINTAS P/ MEDICAL MAIOBAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("GCA OTORRINOLARINGOLOGIA LTDA/NF 01 - DR. GUILHERME REF 16 A 31.01") && complemento02.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("GCA OTORRINOLARINGOLOGIA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && complemento05.contains("JF SERVICOS OFTALMOLOGICOS/NF 20 - DRA. M JULIANA REF A 01.2023") && nomeOrigem.contains("JF SERVICOS OFTALMOLOGICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. DE LIMPEZA NF-747") && complemento02.contains("MATERIAIS E SERVICOS DE LIMPEZA") && nomeOrigem.contains("NEXO CLEAN NEGOCIOS EMPRESARIAIS LTDA/MAT. DE LIMPEZA NF-747")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento05.contains("REPASSE MEDICO/REF CLICK LAUDOS-PAC. 931412.02-HELVERTON VIEIRA D") && complemento02.contains("HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("REPASSE MEDICO/REF CLICK LAUDOS-PAC. 931412.02-HELVERTON VIEIRA D")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("MANUTENCAO DE SOFTWARE - ADM") && nomeOrigem.contains("WDISCOVER SOLUCOES EM INFORMATICA LTDA") && complemento05.contains("WDISCOVER SOLUCOES EM INFORMATICA LTDA/NF 487 - LICENCIMENTO ANUAL 1 PARCELA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALUGUEL DE MAQUINAS - CREDSHOP")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE REF A 01.2024")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento03.contains("VALE TRANSPORTE - ADM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE REF A 01.2024 - ADM")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("TARIFA AVULSA ENVIO PIX") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA AVULSO ENVIO PIX")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TARIFA ENVIO AVULSO PIX") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TARIFA ENVIO PIX AVULSO") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA MENSALID. PACOTE SERVICOS-11/2023") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && complemento04.contains("TRANSF.DOC SANTANDER - RUA GRANDE P/BANCO DO NORDESTE- M&L") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSF.DOC SANTANDER - RUA GRANDE P/BANCO DO NORDESTE- M&L")) {
        conta = "16";
        contaMovimento = "16";
    }
    if (complemento01.contains("05 - MARCUS CENTER") && complemento03.contains("PAGAMENTOS DE JUROS DE TITULOS") && nomeOrigem.contains("1708") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("05 - MARCUS CENTER") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE FUNCS - 02/24")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("03 - RUA GRANDE") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE REF A 02.2024") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("TARIFA MENSAL PACOTE SERV") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS") && nomeOrigem.contains("5952") && nomeOrigem.contains("DARF")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (nomeOrigem.contains("SAFEMED - MEDICINA E SEGURANCA DO TRABALHO LTDA/EMPRESTIMO SAFEMED") && complemento02.contains("EMPRESTIMO ENTRE EMPRESAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("TARIFA ADITIVO DE CONTRATO 14990") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("MAXXCARD ADMINISTRADORA DE CARTOES LTDA/TARIFA MAXXCARD") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("MAXXCARD ADMINISTRADORA DE CARTOES LTDA/TARIFA MAXXCARD")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PREFEITURA DE SAO JOSE DE RIBAMAR/TAXA DE ALVARA SJR-2023") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("SHERWIN - WILLIAMS DO BRASIL INSDUSTRIA E COMERCIO/NF 2242 - CARTAO TINTAS MAIOBAO MUDANCA") && nomeOrigem.contains("SHERWIN - WILLIAMS DO BRASIL INSDUSTRIA E COMERCIO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("06 - TURU") && complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && complemento05.contains("LOJAO DAS TINTAS LTDA/NF 103509 - ESPUMA P/ AR CONDICIONADO") && nomeOrigem.contains("LOJAO DAS TINTAS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "323";
        contaMovimento = "323";
    }
    if (complemento03.contains("PARCELAMENTOS TRIBUTARIOS-PIS-COFINS-IRPJ-CSLL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "651";
        contaMovimento = "651";
    }
    if (nomeOrigem.contains("DARF") && complemento03.contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("5952")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS") && nomeOrigem.contains("F J FRIOS - COMERCIO E SERVICOS DE AR COND.")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (nomePortador.contains("SANTANDER - HORTAS") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA - PACT DE TARIFAS") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("PAGAMENTOS DE JUROS DE TITULOS") && nomeOrigem.contains("5952") && nomeOrigem.contains("DARF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA") && complemento01.contains("05 - MARCUS CENTER")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && complemento01.contains("07 - PATIO NORTE") && nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("06 - TURU") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA ENVIO PIX") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SEFAZ - SECRETARIA DE ESTADO DA FAZENDA/SEFAZ-TAXA ALTER. DE ENDERECO") && complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (complemento02.contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES") && nomeOrigem.contains("SEFAZ - SECRETARIA DE ESTADO DA FAZENDA/SEFAZ-TAXA ALTER. DE ENDERECO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "362";
        contaMovimento = "362";
    }
    if (complemento02.contains("MATERIAIS DE COPA/COZINHA") && nomeOrigem.contains("MUNDO DAS OPCOES 2 CENTRO/CF 62723 - COMPRA DE ESCORREDOR") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("MUNDO DAS OPCOES 2 CENTRO/CF 62723 - COMPRA DE ESCORREDOR")) {
        conta = "325";
        contaMovimento = "325";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NINEX COMERCIO DE PRODUTOS DE SEGURANCA LTDA") && complemento05.contains("NINEX COMERCIO DE PRODUTOS DE SEGURANCA LTDA/NF 23895 - CARTAO SERVICO PAINEL CHAMADA") && complemento02.contains("EQUIPAMENTOS DE INFORMATICA")) {
        conta = "327";
        contaMovimento = "327";
    }
    if (complemento01.contains("05 - MARCUS CENTER") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && nomeOrigem.contains("TARIFA AVULSO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomePortador.contains("BANCO DO NORDESTE- M&L") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "116";
        contaMovimento = "116";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARF") && nomeOrigem.contains("5952") && complemento03.contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TRANSFERENCIA ENTRE CONTAS") && complemento04.contains("TRANSF.DOC SANTANDER - COHAB II P/BANCO DA AMAZONIA - BASA") && nomeOrigem.contains("TRANSF.DOC SANTANDER - COHAB II P/BANCO DA AMAZONIA - BASA")) {
        conta = "7";
        contaMovimento = "7";
    }
    if (complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && complemento01.contains("05 - MARCUS CENTER") && nomeOrigem.contains("TARIFA AVULSA PIX") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && nomeOrigem.contains("TARIFA MENSALID. PACOTE DE SERV. SET 2022")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && nomeOrigem.contains("TARIFACONTRAT. EMPRESTIMO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomeOrigem.contains("TARIFA TED 08/02/2023") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("02 - COHAB I") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("IPVA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MOTO") && complemento02.contains("IPVA E LICENCIAMENTO DE VEICULOS - ADM")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && nomePortador.contains("BANCO DA AMAZONIA - BASA")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (complemento03.contains("13 SALARIO") && nomeOrigem.contains("TERCEIRO") && nomeOrigem.contains("DECIMO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PRO-LABORE GUSTAVO") && nomeOrigem.contains("LUIS GUSTAVO SARDINHA ALMEIDA/PRO LABORE SR. GUSTAVO")) {
        conta = "125";
        contaMovimento = "125";
    }
    if (complemento03.contains("PRO-LABORE RODOLFO") && nomeOrigem.contains("LUIS RODOLFO SARDINHA ALMEIDA/PRO LABORE SR. RODOLFO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "125";
        contaMovimento = "125";
    }
    if (complemento03.contains("VALE TRANSPORTE - TMK") && complemento01.contains("09 - TELEMARKETING") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE REF A 01.2024 - TMK") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento03.contains("PLANO DE SAUDE") && nomeOrigem.contains("SUPERVIDA SOLUCOES EM SAUDE LTDA/REF. SUPERVIDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "565";
        contaMovimento = "565";
    }
    if (nomeOrigem.contains("SUPERVIDA SOLUCOES EM SAUDE LTDA/SUPERVIDA FUNCIONARIOS") && complemento03.contains("PLANO DE SAUDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "565";
        contaMovimento = "565";
    }
    if (complemento01.contains("07 - MEDICAL MAIOBAO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A OUTROS AGENTES FINANCEIROS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento01.contains("07 - MEDICAL MAIOBAO") && nomeOrigem.contains("TARIFA AVULSA ENVIO 12/09/2022") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("TARIFA AVULSO ENVIO PIX") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("04 - COHAB II") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (nomeOrigem.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/01/2023-VALE ALIMENTACAO") && complemento02.contains("REFEICAO/ ALIMENTACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("AMAZONIA") && nomeOrigem.contains("BANCO") && complemento02.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && complemento01.contains("04 - COHAB II") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (nomeOrigem.contains("DARF") && nomeOrigem.contains("1124") && nomeOrigem.contains("PARC") && complemento02.contains("PARCELAMENTOS TRIBUTARIOS-PIS-COFINS-IRPJ-CSLL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "651";
        contaMovimento = "651";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("M A SABOIA ASSISTENCIA MEDICA - ME") && complemento04.contains("M A SABOIA ASSISTENCIA MEDICA - ME/NF 1308 - DRA. MONICA REF 11.2023")) {
        conta = "489";
        contaMovimento = "489";
    }
    if (complemento01.contains("02 - COHAB ELEVADO") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/REF. VALE-TRANSPORTE 01/2024") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (nomeOrigem.contains("TARIFA CREDISHOP - ALUGUEL") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("CORREIOS/TAXA ICMS - MOUSE PCD TMK") && complemento01.contains("03 - RUA GRANDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "312";
        contaMovimento = "312";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/REF. 02/2024-VALE TRANSPORTE") && complemento01.contains("07 - PATIO NORTE") && complemento03.contains("VALE TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento04.contains("TMK") && complemento01.contains("01 - HORTAS") && complemento03.contains("VALE TRANSPORTE - TMK") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/TRANSPORTE REF A 02.2024 - TMK") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "304";
        contaMovimento = "304";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("07 - PATIO NORTE") && nomeOrigem.contains("TARIFA MENSALID. PACOTE SERVICOS-12/2023") && complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (complemento03.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && nomeOrigem.contains("TARIFA MENSALIDADE PACT.SERVICOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("IOF") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && nomeOrigem.contains("ADICIONAL")) {
        conta = "384";
        contaMovimento = "384";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IOF") && nomeOrigem.contains("IMPOSTO") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "384";
        contaMovimento = "384";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REFEICAO/ ALIMENTACAO") && nomeOrigem.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/02/2023 - VALE ALIMENTACAO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("C L BARBOSA DA SILVA & CIA LTDA/NF 1430 - CARTAO COMPRA COMPRESSOR GAS") && nomeOrigem.contains("C L BARBOSA DA SILVA & CIA LTDA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && complemento03.contains("VALE TRANSPORTE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/REF. 01/2024-VALE TRANSPORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/REF. 01/2024 - VALE TRANSPORTE") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("07 - PATIO NORTE")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("04 - COHAB TERMINAL DE INTEGRACAO") && complemento03.contains("VALE TRANSPORTE") && nomeOrigem.contains("SET - SINDICATO DAS EMPRESAS DE TRANSPORTE/REF. 02/2024-VALE TRANSPORTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "272";
        contaMovimento = "272";
    }
    if (complemento01.contains("02 - COHAB ELEVADO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SUPERVIDA SOLUCOES EM SAUDE LTDA/SUPERVIDA") && complemento03.contains("PLANO DE SAUDE")) {
        conta = "269";
        contaMovimento = "269";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("IPVA E LICENCIAMENTO DE VEICULOS - ADM") && complemento01.contains("02 - COHAB ELEVADO") && nomeOrigem.contains("IPVA")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (complemento02.contains("TAXAS E DESPESAS COM CARTAO CREDITO") && complemento01.contains("01 - HORTAS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA CONTRATACAO / ADIANTAMENTO")) {
        conta = "356";
        contaMovimento = "356";
    }
    if (complemento02.contains("IMPOSTOS S/ APLICACAO FINANCEIRA") && nomeOrigem.contains("IR S/ APLICACAO - RESGATE FUNDOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("01 - HORTAS")) {
        conta = "49";
        contaMovimento = "49";
    }
    if (complemento05.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/V. ALIMENTACAO-MARCELO JORGE-01/2023") && nomeOrigem.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/V. ALIMENTACAO-MARCELO JORGE-01/2023") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IOF S/ UTILIZACAO LIMITE")) {
        conta = "384";
        contaMovimento = "384";
    }
    if (complemento01.contains("04 - COHAB II") && nomeOrigem.contains("SEGURO CHEQUE PROTEGIDO") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("MATERIAIS DE COPA/COZINHA") && complemento05.contains("PFM COMERCIAL LTDA/REF. NF 13888-POTES, ORGANIZADOR E JARRA") && nomeOrigem.contains("PFM COMERCIAL LTDA/REF. NF 13888-POTES, ORGANIZADOR E JARRA")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("L. E. CASTRO SANTOS & CIA LTDA - ME/NF 112 DRA LIVIA ELOI 01/2023") && complemento02.contains("HONORARIOS MEDICOS") && nomeOrigem.contains("L. E. CASTRO SANTOS & CIA LTDA - ME")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("ENCARGOS LIMITE DE CRED - JUROS") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (nomeOrigem.contains("ADICIONAL") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IOF") && complemento03.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && complemento01.contains("05 - MARCUS CENTER")) {
        conta = "384";
        contaMovimento = "384";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento05.contains("VALE CONSULTA/VALE SUZIANE - AUTZ SR. GUSTAVO") && complemento02.contains("DESCONTOS CONCEDIDOS") && nomeOrigem.contains("VALE CONSULTA/VALE SUZIANE - AUTZ SR. GUSTAVO")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") && nomeOrigem.contains("JUROS DE EMPRESTIMO/BASA")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TARIFA BANCARIA PAGAMENTO FUNCS NET EMPRESA") && complemento02.contains("TARIFAS, ENCARGOS E MANUTENCAO DE CONTAS BANCARIAS") && complemento05.contains("TARIFA BANCARIA PAGAMENTO FUNCS NET EMPRESA")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PROSEM - PROFISSIONAIS DE SERVICOS MEDICOS LTDA") && complemento02.contains("HONORARIOS MEDICOS") && complemento05.contains("PROSEM - PROFISSIONAIS DE SERVICOS MEDICOS LTDA/NF 1910-DR. PAULO CESAR ARAUJO RIBEIRO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("PROSEM - PROFISSIONAIS DE SERVICOS MEDICOS LTDA") && complemento02.contains("HONORARIOS MEDICOS") && complemento05.contains("PROSEM - PROFISSIONAIS DE SERVICOS MEDICOS LTDA/NF 1909-DR. PAULO CESAR ARAUJO RIBEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (complemento02.contains("HONORARIOS MEDICOS") && complemento05.contains("L. E. CASTRO SANTOS & CIA LTDA - ME/NF 113 DRA LIVIA ELOI  REF. 01 A 15/02") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("L. E. CASTRO SANTOS & CIA LTDA - ME")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (nomeOrigem.contains("SANTANDER (EMPRESTIMOS)/JUROS - EMPRESTIMO SANTANDER 22100") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "354";
        contaMovimento = "354";
    }
    if (nomeOrigem.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/02/2023 - VALE ALIMENTACAO") && complemento05.contains("VR BENEFICIOS E SERVICOS DE PROCESSAMENTO S.A/02/2023 - VALE ALIMENTACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OFTALMOCLINICA")) {
        conta = "506";
        contaMovimento = "506";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BITAL AMBIENTAL")) {
        conta = "607";
        contaMovimento = "607";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITOS&SOARES LTDA")) {
        conta = "426";
        contaMovimento = "426";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA OTOMED")) {
        conta = "509";
        contaMovimento = "509";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OFTALMO CARE")) {
        conta = "505";
        contaMovimento = "505";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMEDICINA LTDA")) {
        conta = "860";
        contaMovimento = "860";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AJUSTE CARTOES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA DE UROLOGIA LTDA")) {
        conta = "678";
        contaMovimento = "678";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO DE DIAGNOSTICO - GASTRODIAGNOSE")) {
        conta = "435";
        contaMovimento = "435";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALUGUEL PREDIAL")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARCELAMENTOS DE IMPOSTOS  E TRIBUTOS  - ADM")) {
        conta = "651";
        contaMovimento = "651";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PLANO DE SAUDE - ADM")) {
        conta = "528";
        contaMovimento = "528";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARCELAMENTOS TRIBUTARIOS-PIS-COFINS-IRPJ-CSLL")) {
        conta = "651";
        contaMovimento = "651";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UROLOGIA")) {
        conta = "678";
        contaMovimento = "678";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLOPROCTOLOGIA")) {
        conta = "470";
        contaMovimento = "470";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OTORRILARINGOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO")) {
        conta = "904";
        contaMovimento = "904";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTEGE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVENCAO")) {
        conta = "516";
        contaMovimento = "516";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OTO4")) {
        conta = "831";
        contaMovimento = "831";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTCOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) {
        conta = "606";
        contaMovimento = "606";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VITALMED") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FALTA NF")) {
        conta = "528";
        contaMovimento = "528";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEPOSITO EM DINHEIRO.") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CAIXA(TESOURARIA)")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITOS&SOARES LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICOS DE ESTERILIZACAO")) {
        conta = "426";
        contaMovimento = "426";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONDOMINIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("07 - PATIO NORTE")) {
        conta = "160";
        contaMovimento = "160";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAIXA PREVIDENCIA/PREVIDENCIA SOCIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PREVIDENCIA SOCIAL - SOCIOS")) {
        conta = "394";
        contaMovimento = "394";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("05 - MARCUS CENTER")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMEDICINA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS")) {
        conta = "860";
        contaMovimento = "860";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBRATEL - INTERNET/EMBRATEL INTERNET") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("INTERNET - ADM")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIGI MANIA COMERCIO ELETRONICO EIRELI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EQUIPAMENTOS DE INFORMATICA")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TELEFONIA FIXA - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBRATEL/EMBRATEL REF A 12.2023")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOOGLE INTERNET LTDA/IMPULSIONAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLICK LAUDOS EM TELEMEDICINA/SUPERVIDA-CLICKLAUDO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA OTOMED") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "509";
        contaMovimento = "509";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECAD/ECAD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "363";
        contaMovimento = "363";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("06 - TURU")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("06 - TURU")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DR SAMPAIO SERVICOS LTDA ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "448";
        contaMovimento = "448";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GCA OTORRINOLARINGOLOGIA LTDA")) {
        conta = "904";
        contaMovimento = "904";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HR NEGOCIOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA - TMK")) {
        conta = "665";
        contaMovimento = "665";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO DE COLOPROCTOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "470";
        contaMovimento = "470";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO DO SONO DO MARANHAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "905";
        contaMovimento = "905";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALENCAR & LOPES LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "420";
        contaMovimento = "420";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("02 - COHAB ELEVADO")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("02 - COHAB ELEVADO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("05 - MARCUS CENTER")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA ALVES DERMATOLOGIA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "895";
        contaMovimento = "895";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOLUCAO: PACTE FAGNA MARIA DE SOUSA - ECO")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUAILIBE MEDICINA OCUPACIONAL EIRELI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "899";
        contaMovimento = "899";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E.D.A ESCOLA DE DESENVOLVIMENTO")) {
        conta = "900";
        contaMovimento = "900";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACEBOOK SERVICOS ONLINE DO BRASIL LTDA/IMPULSIONAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "347";
        contaMovimento = "347";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPANEMA SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "682";
        contaMovimento = "682";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAIM SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "683";
        contaMovimento = "683";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEM VIVER SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "950";
        contaMovimento = "950";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANTANHEDE & FREITAS SS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "432";
        contaMovimento = "432";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLICK LAUDOS EM TELEMEDICINA/CLICK LAUDOS EM MEDICINA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIO DRA FLAVIA MOHANA LTDA")) {
        conta = "893";
        contaMovimento = "893";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("D.C.L MARQUES SERVICOS MEDICOS EIRELI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "611";
        contaMovimento = "611";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIPEREZ - SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "898";
        contaMovimento = "898";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS")) {
        conta = "129";
        contaMovimento = "129";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCISCO CARNEIRO EMPREENDIMENTOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "944";
        contaMovimento = "944";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GALVAO GONCALVES SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "903";
        contaMovimento = "903";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS")) {
        conta = "128";
        contaMovimento = "128";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO MEDICO DE ULTRASSONOGRAFIA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "472";
        contaMovimento = "472";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ISS")) {
        conta = "145";
        contaMovimento = "145";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AMORTIZACAO EMPRESTIMO PRINCIAPL BNB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO NORDESTE- M&L")) {
        conta = "174";
        contaMovimento = "174";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "308";
        contaMovimento = "308";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "317";
        contaMovimento = "317";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("D A B DE SA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "896";
        contaMovimento = "896";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXAMINAR SERVICOS DE NEUROFISIOLOGIA CLINICA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "943";
        contaMovimento = "943";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J M C DE F SANTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "477";
        contaMovimento = "477";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L.F.M. DE ALMEIDA SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "908";
        contaMovimento = "908";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AMORTIZACAO EMPRESTIMO PRINCIPAL BASA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DA AMAZONIA - BASA")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AMORTIZACAO EMPRESTIMO PRINCIPAL  SANTANDER") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO NORDESTE- M&L")) {
        conta = "175";
        contaMovimento = "175";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITO ASSESSORIA E SERVICOS MEDICOS SS ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "426";
        contaMovimento = "426";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C. R. L. NEUENSCHWANDER PENHA - ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "431";
        contaMovimento = "431";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERCARD")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSERMED - CONSULTORIOS E SERVICOS MEDICOS LTDA")) {
        conta = "894";
        contaMovimento = "894";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("D S M SELARES SERVICOS DE PSICOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "897";
        contaMovimento = "897";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I S L DE OLIVEIRA SERVICOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "945";
        contaMovimento = "945";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("07 - PATIO NORTE")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT.HOSPITALAR") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "660";
        contaMovimento = "660";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAUA CARDOSO PAULINO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS")) {
        conta = "892";
        contaMovimento = "892";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIGI MANIA COMERCIO ELETRONICO EIRELI")) {
        conta = "112";
        contaMovimento = "112";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FERIAS E ABONOS PECUNIARIOS")) {
        conta = "122";
        contaMovimento = "122";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J DE R CASTRO VELOSO SERVICOS - ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "476";
        contaMovimento = "476";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT. HOSPITALAR") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "660";
        contaMovimento = "660";
    }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PLANO DE SAUDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSORCIO VITALMED SAFECARE")) {
        conta = "528";
        contaMovimento = "528";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISA M B M S J SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "617";
        contaMovimento = "617";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LARA PARAGUASSU DEMES FRANCA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "909";
        contaMovimento = "909";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL MAQUINA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL DE MAQUINAS - CREDSHOP") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "582";
        contaMovimento = "582";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F J FRIOS - COMERCIO E SERVICOS DE AR COND.") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO NORDESTE- M&L")) {
        conta = "116";
        contaMovimento = "116";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DA AMAZONIA - BASA")) {
        conta = "602";
        contaMovimento = "602";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF S/ UTILIZACAO LIMITE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "384";
        contaMovimento = "384";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENCARGOS LIMITE DE CRED - JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSESSORIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "677";
        contaMovimento = "677";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANTANHEDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) {
        conta = "432";
        contaMovimento = "432";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "433";
        contaMovimento = "433";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLICK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAUDOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELEMEDICINA")) {
        conta = "438";
        contaMovimento = "438";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARQUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS")) {
        conta = "445";
        contaMovimento = "445";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDIOLOGICO")) {
        conta = "467";
        contaMovimento = "467";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS")) {
        conta = "617";
        contaMovimento = "617";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VELOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "941";
        contaMovimento = "941";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPANEMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS")) {
        conta = "682";
        contaMovimento = "682";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NETWORKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOMUNICACOES")) {
        conta = "548";
        contaMovimento = "548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FIBRA OPTICA (LAN TO LAN)") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUATORIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOMUNICACOES")) {
        conta = "336";
        contaMovimento = "336";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NETWORKS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO DE SOFTWARE - ADM")) {
        conta = "548";
        contaMovimento = "548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2172") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COFINS")) {
        conta = "134";
        contaMovimento = "134";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5856")) {
        conta = "134";
        contaMovimento = "134";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8109") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PIS")) {
        conta = "133";
        contaMovimento = "133";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES")) {
        conta = "26";
        contaMovimento = "26";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1124")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FUNCIONARIOS")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SALARIOS")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO MEDICO CARDIOLOGICO S/C LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IANELE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "467";
        contaMovimento = "467";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANUIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO")) {
        conta = "352";
        contaMovimento = "352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CORREIOS / SEDEX - ADM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CF")) {
        conta = "312";
        contaMovimento = "312";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IRRF SOBRE ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3208")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1708") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PARCELAMENTO")) {
        conta = "355";
        contaMovimento = "355";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1708")) {
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5952") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5952") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS")) {
        conta = "143";
        contaMovimento = "143";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DECIMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERCEIRO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13 SALARIO")) {
        conta = "121";
        contaMovimento = "121";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EVENTOS/CONFRATERNIZACOES")) {
        conta = "319";
        contaMovimento = "319";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTCOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FATURA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPRESSORAS E TONERS/CARTUCHOS")) {
        conta = "321";
        contaMovimento = "321";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("B") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRUZ") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO")) {
        conta = "659";
        contaMovimento = "659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA MOVEIS E UTENSILIOS")) {
        conta = "454";
        contaMovimento = "454";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO PREDIAL - PREVENTIVA")) {
        conta = "324";
        contaMovimento = "324";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("B") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRUZ") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "659";
        contaMovimento = "659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REABILITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FISIOTERAPIA")) {
        conta = "439";
        contaMovimento = "439";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXANDRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "568";
        contaMovimento = "568";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPREENDIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FARMACEUTICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMIFARMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "276";
        contaMovimento = "276";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARANHAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "310";
        contaMovimento = "310";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUDICIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COFINS")) {
        conta = "105";
        contaMovimento = "105";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ADIANTAMENTO")) {
        conta = "35";
        contaMovimento = "35";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OFTALMOCLINICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'OFTALMOCLINICA', CONTA MOVIMENTO SERA = '506'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BITAL AMBIENTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BITAL AMBIENTAL', CONTA MOVIMENTO SERA = '607'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITOS&SOARES LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BRITOS&SOARES LTDA', CONTA MOVIMENTO SERA = '426'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA OTOMED")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLINICA OTOMED', CONTA MOVIMENTO SERA = '509'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OFTALMO CARE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'OFTALMO CARE', CONTA MOVIMENTO SERA = '505'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMEDICINA LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELETROMEDICINA LTDA', CONTA MOVIMENTO SERA = '860'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AJUSTE CARTOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AJUSTE CARTOES', CONTA MOVIMENTO SERA = '26'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA DE UROLOGIA LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLINICA DE UROLOGIA LTDA', CONTA MOVIMENTO SERA = '678'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTRO DE DIAGNOSTICO - GASTRODIAGNOSE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CENTRO DE DIAGNOSTICO - GASTRODIAGNOSE', CONTA MOVIMENTO SERA = '435'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALUGUEL PREDIAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ALUGUEL PREDIAL', CONTA MOVIMENTO SERA = '160'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARCELAMENTOS DE IMPOSTOS  E TRIBUTOS  - ADM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PARCELAMENTOS DE IMPOSTOS  E TRIBUTOS  - ADM', CONTA MOVIMENTO SERA = '651'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PLANO DE SAUDE - ADM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PLANO DE SAUDE - ADM', CONTA MOVIMENTO SERA = '528'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARCELAMENTOS TRIBUTARIOS-PIS-COFINS-IRPJ-CSLL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PARCELAMENTOS TRIBUTARIOS-PIS-COFINS-IRPJ-CSLL', CONTA MOVIMENTO SERA = '651'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UROLOGIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLINICA', Fornecedor/Cliente contem 'UROLOGIA', CONTA MOVIMENTO SERA = '678'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLOPROCTOLOGIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSTITUTO', Fornecedor/Cliente contem 'COLOPROCTOLOGIA', CONTA MOVIMENTO SERA = '470'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OTORRILARINGOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'OTORRILARINGOLOGIA', Fornecedor/Cliente contem 'INSTITUTO', CONTA MOVIMENTO SERA = '904'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTEGE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PROTEGE', Fornecedor/Cliente contem 'PREVENCAO', CONTA MOVIMENTO SERA = '516'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OTO4")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLINICA', Fornecedor/Cliente contem 'OTO4', CONTA MOVIMENTO SERA = '831'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTCOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ARTCOM', Fornecedor/Cliente contem 'INFORMATICA', CONTA MOVIMENTO SERA = '606'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VITALMED") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FALTA NF")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'VITALMED', Fornecedor/Cliente nao contem 'FALTA NF', CONTA MOVIMENTO SERA = '528'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEPOSITO EM DINHEIRO.") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CAIXA(TESOURARIA)")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'DEPOSITO EM DINHEIRO.', Portador contem 'CAIXA(TESOURARIA)', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITOS&SOARES LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICOS DE ESTERILIZACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BRITOS&SOARES LTDA', Complemento (03) contem 'SERVICOS DE ESTERILIZACAO', CONTA MOVIMENTO SERA = '426'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONDOMINIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("07 - PATIO NORTE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'CONDOMINIO', Complemento (01) contem '07 - PATIO NORTE', CONTA MOVIMENTO SERA = '160'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAIXA PREVIDENCIA/PREVIDENCIA SOCIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PREVIDENCIA SOCIAL - SOCIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CAIXA PREVIDENCIA/PREVIDENCIA SOCIOS', Complemento (03) contem 'PREVIDENCIA SOCIAL - SOCIOS', CONTA MOVIMENTO SERA = '394'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'DEVOLUCOES A CLIENTES', Complemento (01) contem '03 - RUA GRANDE', CONTA MOVIMENTO SERA = '26'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("05 - MARCUS CENTER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'DEVOLUCOES A CLIENTES', Complemento (01) contem '05 - MARCUS CENTER', CONTA MOVIMENTO SERA = '26'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMEDICINA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO DE MAQUINAS E EQUIPAMENTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELETROMEDICINA LTDA', Complemento (03) contem 'MANUTENCAO DE MAQUINAS E EQUIPAMENTOS', CONTA MOVIMENTO SERA = '860'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBRATEL - INTERNET/EMBRATEL INTERNET") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("INTERNET - ADM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EMBRATEL - INTERNET/EMBRATEL INTERNET', Complemento (03) contem 'INTERNET - ADM', CONTA MOVIMENTO SERA = '336'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIGI MANIA COMERCIO ELETRONICO EIRELI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EQUIPAMENTOS DE INFORMATICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DIGI MANIA COMERCIO ELETRONICO EIRELI', Complemento (03) contem 'EQUIPAMENTOS DE INFORMATICA', CONTA MOVIMENTO SERA = '112'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TELEFONIA FIXA - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBRATEL/EMBRATEL REF A 12.2023")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'TELEFONIA FIXA - ADM', Fornecedor/Cliente contem 'EMBRATEL/EMBRATEL REF A 12.2023', CONTA MOVIMENTO SERA = '336'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOOGLE INTERNET LTDA/IMPULSIONAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GOOGLE INTERNET LTDA/IMPULSIONAMENTO', Complemento (03) contem 'PROPAGANDAS E PATROCINIOS - ADM', CONTA MOVIMENTO SERA = '347'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLICK LAUDOS EM TELEMEDICINA/SUPERVIDA-CLICKLAUDO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLICK LAUDOS EM TELEMEDICINA/SUPERVIDA-CLICKLAUDO', Complemento (03) contem 'EXAMES MEDICOS REALIZADOS POR PARCEIROS', CONTA MOVIMENTO SERA = '438'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA OTOMED") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLINICA OTOMED', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '509'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ECAD/ECAD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ECAD/ECAD', Complemento (03) contem 'ALVARAS/ LICENCIAMENTOS/ REGULARIZACOES', CONTA MOVIMENTO SERA = '363'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("06 - TURU")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AGUA ENCANADA', Complemento (01) contem '06 - TURU', CONTA MOVIMENTO SERA = '308'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("06 - TURU")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ENERGIA ELETRICA', Complemento (01) contem '06 - TURU', CONTA MOVIMENTO SERA = '317'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DR SAMPAIO SERVICOS LTDA ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DR SAMPAIO SERVICOS LTDA ME', Complemento (03) contem 'MATERIAIS E SERVICOS DE LIMPEZA', CONTA MOVIMENTO SERA = '448'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GCA OTORRINOLARINGOLOGIA LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'HONORARIOS MEDICOS', Fornecedor/Cliente contem 'GCA OTORRINOLARINGOLOGIA LTDA', CONTA MOVIMENTO SERA = '904'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HR NEGOCIOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA - TMK")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'HR NEGOCIOS LTDA', Complemento (03) contem 'MATERIAIS E SERVICOS DE LIMPEZA - TMK', CONTA MOVIMENTO SERA = '665'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO DE COLOPROCTOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSTITUTO DE COLOPROCTOLOGIA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '470'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO DO SONO DO MARANHAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSTITUTO DO SONO DO MARANHAO', Complemento (03) contem 'EXAMES MEDICOS REALIZADOS POR PARCEIROS', CONTA MOVIMENTO SERA = '905'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALENCAR & LOPES LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALENCAR & LOPES LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '420'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AGUA ENCANADA', Complemento (01) contem '03 - RUA GRANDE', CONTA MOVIMENTO SERA = '308'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("02 - COHAB ELEVADO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AGUA ENCANADA', Complemento (01) contem '02 - COHAB ELEVADO', CONTA MOVIMENTO SERA = '308'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("02 - COHAB ELEVADO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ENERGIA ELETRICA', Complemento (01) contem '02 - COHAB ELEVADO', CONTA MOVIMENTO SERA = '317'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ENERGIA ELETRICA', Complemento (01) contem '03 - RUA GRANDE', CONTA MOVIMENTO SERA = '317'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("05 - MARCUS CENTER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ENERGIA ELETRICA', Complemento (01) contem '05 - MARCUS CENTER', CONTA MOVIMENTO SERA = '317'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA ALVES DERMATOLOGIA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'COSTA ALVES DERMATOLOGIA LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '895'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOLUCAO: PACTE FAGNA MARIA DE SOUSA - ECO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'DEVOLUCOES A CLIENTES', Fornecedor/Cliente contem 'DEVOLUCAO: PACTE FAGNA MARIA DE SOUSA - ECO', CONTA MOVIMENTO SERA = '26'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUAILIBE MEDICINA OCUPACIONAL EIRELI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DUAILIBE MEDICINA OCUPACIONAL EIRELI', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '899'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E.D.A ESCOLA DE DESENVOLVIMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM', Fornecedor/Cliente contem 'E.D.A ESCOLA DE DESENVOLVIMENTO', CONTA MOVIMENTO SERA = '900'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACEBOOK SERVICOS ONLINE DO BRASIL LTDA/IMPULSIONAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PROPAGANDAS E PATROCINIOS - ADM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FACEBOOK SERVICOS ONLINE DO BRASIL LTDA/IMPULSIONAMENTO', Complemento (03) contem 'PROPAGANDAS E PATROCINIOS - ADM', CONTA MOVIMENTO SERA = '347'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPANEMA SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'IPANEMA SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '682'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAIM SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'KAIM SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '683'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEM VIVER SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BEM VIVER SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '950'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANTANHEDE & FREITAS SS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CANTANHEDE & FREITAS SS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '432'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLICK LAUDOS EM TELEMEDICINA/CLICK LAUDOS EM MEDICINA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLICK LAUDOS EM TELEMEDICINA/CLICK LAUDOS EM MEDICINA', Complemento (03) contem 'EXAMES MEDICOS REALIZADOS POR PARCEIROS', CONTA MOVIMENTO SERA = '438'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIO DRA FLAVIA MOHANA LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'HONORARIOS MEDICOS', Fornecedor/Cliente contem 'CONSULTORIO DRA FLAVIA MOHANA LTDA', CONTA MOVIMENTO SERA = '893'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("D.C.L MARQUES SERVICOS MEDICOS EIRELI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'D.C.L MARQUES SERVICOS MEDICOS EIRELI', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '611'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIPEREZ - SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DIPEREZ - SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '898'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FGTS', Complemento (03) contem 'FGTS', CONTA MOVIMENTO SERA = '129'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCISCO CARNEIRO EMPREENDIMENTOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FRANCISCO CARNEIRO EMPREENDIMENTOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '944'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GALVAO GONCALVES SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GALVAO GONCALVES SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '903'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'INSS', Fornecedor/Cliente contem 'INSS', CONTA MOVIMENTO SERA = '128'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO MEDICO DE ULTRASSONOGRAFIA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSTITUTO MEDICO DE ULTRASSONOGRAFIA LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '472'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ISS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ISS', Complemento (03) contem 'ISS', CONTA MOVIMENTO SERA = '145'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AMORTIZACAO EMPRESTIMO PRINCIAPL BNB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO NORDESTE- M&L")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AMORTIZACAO EMPRESTIMO PRINCIAPL BNB', Portador contem 'BANCO DO NORDESTE- M&L', CONTA MOVIMENTO SERA = '174'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AGUA ENCANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AGUA ENCANADA', Complemento (01) contem '04 - COHAB TERMINAL DE INTEGRACAO', CONTA MOVIMENTO SERA = '308'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ENERGIA ELETRICA', Complemento (01) contem '04 - COHAB TERMINAL DE INTEGRACAO', CONTA MOVIMENTO SERA = '317'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("D A B DE SA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'D A B DE SA LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '896'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXAMINAR SERVICOS DE NEUROFISIOLOGIA CLINICA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EXAMINAR SERVICOS DE NEUROFISIOLOGIA CLINICA LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '943'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J M C DE F SANTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'J M C DE F SANTOS', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '477'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L.F.M. DE ALMEIDA SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'L.F.M. DE ALMEIDA SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '908'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AMORTIZACAO EMPRESTIMO PRINCIPAL BASA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DA AMAZONIA - BASA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AMORTIZACAO EMPRESTIMO PRINCIPAL BASA', Portador contem 'BANCO DA AMAZONIA - BASA', CONTA MOVIMENTO SERA = '602'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("AMORTIZACAO EMPRESTIMO PRINCIPAL  SANTANDER") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO NORDESTE- M&L")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'AMORTIZACAO EMPRESTIMO PRINCIPAL  SANTANDER', Portador contem 'BANCO DO NORDESTE- M&L', CONTA MOVIMENTO SERA = '175'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITO ASSESSORIA E SERVICOS MEDICOS SS ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BRITO ASSESSORIA E SERVICOS MEDICOS SS ME', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '426'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C. R. L. NEUENSCHWANDER PENHA - ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'C. R. L. NEUENSCHWANDER PENHA - ME', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '431'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERCARD")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM', Fornecedor/Cliente contem 'MASTERCARD', CONTA MOVIMENTO SERA = '352'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSERMED - CONSULTORIOS E SERVICOS MEDICOS LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'HONORARIOS MEDICOS', Fornecedor/Cliente contem 'COSERMED - CONSULTORIOS E SERVICOS MEDICOS LTDA', CONTA MOVIMENTO SERA = '894'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("D S M SELARES SERVICOS DE PSICOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'D S M SELARES SERVICOS DE PSICOLOGIA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '897'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I S L DE OLIVEIRA SERVICOS MEDICOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'I S L DE OLIVEIRA SERVICOS MEDICOS', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '945'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("07 - PATIO NORTE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'TAXAS E DESPESAS COM CARTAO CREDITO', Complemento (01) contem '07 - PATIO NORTE', CONTA MOVIMENTO SERA = '352'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT.HOSPITALAR") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT.HOSPITALAR', Complemento (03) contem 'MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)', CONTA MOVIMENTO SERA = '660'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAUA CARDOSO PAULINO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CAUA CARDOSO PAULINO', Complemento (03) contem 'SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS', CONTA MOVIMENTO SERA = '892'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIGI MANIA COMERCIO ELETRONICO EIRELI")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PAGAMENTOS DE JUROS DE TITULOS', Fornecedor/Cliente contem 'DIGI MANIA COMERCIO ELETRONICO EIRELI', CONTA MOVIMENTO SERA = '112'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FERIAS E ABONOS PECUNIARIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FERIAS', Complemento (03) contem 'FERIAS E ABONOS PECUNIARIOS', CONTA MOVIMENTO SERA = '122'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J DE R CASTRO VELOSO SERVICOS - ME") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'J DE R CASTRO VELOSO SERVICOS - ME', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '476'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT. HOSPITALAR") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BIOFORMULA FARMACIA DE MANIPULACAO EIRELI/MAT. HOSPITALAR', Complemento (03) contem 'MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)', CONTA MOVIMENTO SERA = '660'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PLANO DE SAUDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSORCIO VITALMED SAFECARE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PLANO DE SAUDE', Fornecedor/Cliente contem 'CONSORCIO VITALMED SAFECARE', CONTA MOVIMENTO SERA = '528'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISA M B M S J SERVICOS MEDICOS LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ISA M B M S J SERVICOS MEDICOS LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '617'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ISS', Complemento (03) contem 'PAGAMENTOS DE JUROS DE TITULOS', CONTA MOVIMENTO SERA = '355'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("04 - COHAB TERMINAL DE INTEGRACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'TAXAS E DESPESAS COM CARTAO CREDITO', Complemento (01) contem '04 - COHAB TERMINAL DE INTEGRACAO', CONTA MOVIMENTO SERA = '352'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LARA PARAGUASSU DEMES FRANCA LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'LARA PARAGUASSU DEMES FRANCA LTDA', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '909'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL MAQUINA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALUGUEL MAQUINA', Complemento (03) contem 'TAXAS E DESPESAS COM CARTAO CREDITO', CONTA MOVIMENTO SERA = '582'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL DE MAQUINAS - CREDSHOP") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXAS E DESPESAS COM CARTAO CREDITO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALUGUEL DE MAQUINAS - CREDSHOP', Complemento (03) contem 'TAXAS E DESPESAS COM CARTAO CREDITO', CONTA MOVIMENTO SERA = '582'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F J FRIOS - COMERCIO E SERVICOS DE AR COND.") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'F J FRIOS - COMERCIO E SERVICOS DE AR COND.', Complemento (03) contem 'SERVICOS DE TERCEIROS PARA MANUTENCAO DE EQUIPAMENTOS', CONTA MOVIMENTO SERA = '454'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO NORDESTE- M&L")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS', Portador contem 'BANCO DO NORDESTE- M&L', CONTA MOVIMENTO SERA = '116'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DA AMAZONIA - BASA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS', Portador contem 'BANCO DA AMAZONIA - BASA', CONTA MOVIMENTO SERA = '602'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF S/ UTILIZACAO LIMITE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'IOF S/ UTILIZACAO LIMITE', Complemento (03) contem 'PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS', CONTA MOVIMENTO SERA = '384'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENCARGOS LIMITE DE CRED - JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ENCARGOS LIMITE DE CRED - JUROS', Complemento (03) contem 'PAGAMENTOS DE JUROS DE EMPRESTIMOS E ANTECIPACOES A BANCOS', CONTA MOVIMENTO SERA = '352'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSESSORIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BRITO', Fornecedor/Cliente contem 'ASSESSORIA', Fornecedor/Cliente contem 'SERVICOS', CONTA MOVIMENTO SERA = '677'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANTANHEDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CANTANHEDE', Fornecedor/Cliente contem 'FREITAS', Fornecedor/Cliente contem 'LTDA', CONTA MOVIMENTO SERA = '432'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CARVALHO', Fornecedor/Cliente contem 'RODRIGUES', Fornecedor/Cliente contem 'SERVICOS', CONTA MOVIMENTO SERA = '433'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLICK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAUDOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELEMEDICINA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CLICK', Fornecedor/Cliente contem 'LAUDOS', Fornecedor/Cliente contem 'TELEMEDICINA', CONTA MOVIMENTO SERA = '438'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARQUES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MARQUES', Fornecedor/Cliente contem 'SERVICOS', Fornecedor/Cliente contem 'MEDICOS', CONTA MOVIMENTO SERA = '445'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FRIOS', Fornecedor/Cliente contem 'COMERCIO', Fornecedor/Cliente contem 'SERVICOS', CONTA MOVIMENTO SERA = '454'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDIOLOGICO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSTITUTO', Fornecedor/Cliente contem 'MEDICO', Fornecedor/Cliente contem 'CARDIOLOGICO', CONTA MOVIMENTO SERA = '467'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ISA', Fornecedor/Cliente contem 'SERVICOS', Fornecedor/Cliente contem 'MEDICOS', CONTA MOVIMENTO SERA = '617'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VELOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CASTRO', Fornecedor/Cliente contem 'VELOSO', Fornecedor/Cliente contem 'SERVICOS', CONTA MOVIMENTO SERA = '941'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IPANEMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'IPANEMA', Fornecedor/Cliente contem 'SERVICOS', Fornecedor/Cliente contem 'MEDICOS', CONTA MOVIMENTO SERA = '682'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NETWORKS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOMUNICACOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'NETWORKS', Fornecedor/Cliente contem 'L5', Fornecedor/Cliente contem 'TELECOMUNICACOES', CONTA MOVIMENTO SERA = '548'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FIBRA OPTICA (LAN TO LAN)") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUATORIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOMUNICACOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'FIBRA OPTICA (LAN TO LAN)', Fornecedor/Cliente contem 'EQUATORIAL', Fornecedor/Cliente contem 'TELECOMUNICACOES', CONTA MOVIMENTO SERA = '336'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NETWORKS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO DE SOFTWARE - ADM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'L5', Fornecedor/Cliente contem 'NETWORKS', Complemento (03) contem 'MANUTENCAO DE SOFTWARE - ADM', CONTA MOVIMENTO SERA = '548'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2172") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '2172', Complemento (03) contem 'COFINS', CONTA MOVIMENTO SERA = '134'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5856")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'COFINS', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '5856', CONTA MOVIMENTO SERA = '134'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8109") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PIS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '8109', Complemento (03) contem 'PIS', CONTA MOVIMENTO SERA = '133'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCOES A CLIENTES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ESTORNO', Fornecedor/Cliente contem 'PIX', Complemento (03) contem 'DEVOLUCOES A CLIENTES', CONTA MOVIMENTO SERA = '26'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1124")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PAGAMENTOS DE JUROS DE TITULOS', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '1124', CONTA MOVIMENTO SERA = '355'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FUNCIONARIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'SALARIOS', Complemento (04) contem 'ADIANTAMENTO', Complemento (04) contem 'FUNCIONARIOS', CONTA MOVIMENTO SERA = '35'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SALARIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FOLHA', Fornecedor/Cliente contem 'PAGAMENTO', Complemento (03) contem 'SALARIOS', CONTA MOVIMENTO SERA = '121'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSTITUTO MEDICO CARDIOLOGICO S/C LTDA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IANELE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'INSTITUTO MEDICO CARDIOLOGICO S/C LTDA', Complemento (04) contem 'IANELE', Complemento (03) contem 'HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '467'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANUIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'TARIFAS BANCARIAS E MANUTENCAO DE CONTA - ADM', Fornecedor/Cliente contem 'ANUIDADE', Fornecedor/Cliente contem 'CARTAO', CONTA MOVIMENTO SERA = '352'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CORREIOS / SEDEX - ADM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CF")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'CORREIOS / SEDEX - ADM', Complemento (01) contem '03 - RUA GRANDE', Complemento (04) contem 'CF', CONTA MOVIMENTO SERA = '312'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IRRF SOBRE ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3208")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'IRRF SOBRE ALUGUEL', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '3208', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1708") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '1708', Complemento (03) contem 'RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PAGAMENTOS DE JUROS DE TITULOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PARCELAMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'PAGAMENTOS DE JUROS DE TITULOS', Fornecedor/Cliente contem 'INSS', Complemento (04) contem 'PARCELAMENTO', CONTA MOVIMENTO SERA = '355'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1708")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '1708', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5952") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '5952', Complemento (03) contem 'RETENCAO TRIBUTOS S/ HONORARIOS MEDICOS', CONTA MOVIMENTO SERA = '143'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("5952") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem '5952', Complemento (03) contem 'RETENCAO TRIBUTOS S/ SERVICOS DE TERCEIROS', CONTA MOVIMENTO SERA = '143'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DECIMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERCEIRO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13 SALARIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DECIMO', Fornecedor/Cliente contem 'TERCEIRO', Complemento (03) contem '13 SALARIO', CONTA MOVIMENTO SERA = '121'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EVENTOS/CONFRATERNIZACOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'J', Fornecedor/Cliente contem 'GONCALVES', Fornecedor/Cliente contem 'CF', Complemento (03) contem 'EVENTOS/CONFRATERNIZACOES', CONTA MOVIMENTO SERA = '319'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTCOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FATURA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPRESSORAS E TONERS/CARTUCHOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ARTCOM', Fornecedor/Cliente contem 'INFORMATICA', Fornecedor/Cliente contem 'FATURA', Complemento (03) contem 'IMPRESSORAS E TONERS/CARTUCHOS', CONTA MOVIMENTO SERA = '321'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("B") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRUZ") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL DE EXPEDIENTE/CONSUMO INTERNO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'B', Fornecedor/Cliente contem 'M', Fornecedor/Cliente contem 'CRUZ', Complemento (03) contem 'MATERIAL DE EXPEDIENTE/CONSUMO INTERNO', CONTA MOVIMENTO SERA = '659'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA MOVEIS E UTENSILIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'F', Fornecedor/Cliente contem 'J', Fornecedor/Cliente contem 'FRIOS', Complemento (03) contem 'COMPRA MOVEIS E UTENSILIOS', CONTA MOVIMENTO SERA = '454'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO PREDIAL - PREVENTIVA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'J', Fornecedor/Cliente contem 'GONCALVES', Fornecedor/Cliente contem 'CF', Complemento (03) contem 'MANUTENCAO PREDIAL - PREVENTIVA', CONTA MOVIMENTO SERA = '324'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("B") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRUZ") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'B', Fornecedor/Cliente contem 'M', Fornecedor/Cliente contem 'CRUZ', Complemento (03) contem 'MATERIAIS E SERVICOS DE LIMPEZA', CONTA MOVIMENTO SERA = '659'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("EXAMES MEDICOS REALIZADOS POR PARCEIROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REABILITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLINICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FISIOTERAPIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'EXAMES MEDICOS REALIZADOS POR PARCEIROS', Fornecedor/Cliente contem 'REABILITA', Fornecedor/Cliente contem 'CLINICA', Fornecedor/Cliente contem 'FISIOTERAPIA', CONTA MOVIMENTO SERA = '439'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASTRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXANDRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAIS E SERVICOS DE LIMPEZA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'COMERCIAL', Fornecedor/Cliente contem 'CASTRO', Fornecedor/Cliente contem 'ALEXANDRE', Complemento (03) contem 'MATERIAIS E SERVICOS DE LIMPEZA', CONTA MOVIMENTO SERA = '568'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPREENDIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FARMACEUTICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EMPREENDIMENTOS', Fornecedor/Cliente contem 'FARMACEUTICOS', Fornecedor/Cliente contem 'CF', Complemento (03) contem 'MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)', CONTA MOVIMENTO SERA = '276'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMIFARMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'IMIFARMA', Fornecedor/Cliente contem 'PRODUTOS', Fornecedor/Cliente contem 'CF', Complemento (03) contem 'MATERIAL HOSPITALAR (MAT.UTILIZADO PRESTACAO SERV)', CONTA MOVIMENTO SERA = '276'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARANHAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("03 - RUA GRANDE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ASSOCIACOES COMERCIAIS OU DE CLASSE - ADM', Fornecedor/Cliente contem 'COMERCIAL', Fornecedor/Cliente contem 'MARANHAO', Complemento (01) contem '03 - RUA GRANDE', CONTA MOVIMENTO SERA = '310'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUDICIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DEPOSITO', Fornecedor/Cliente contem 'JUDICIAL', Fornecedor/Cliente contem 'PIS', Fornecedor/Cliente contem 'COFINS', CONTA MOVIMENTO SERA = '105'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ADIANTAMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FOLHA', Fornecedor/Cliente contem 'PAGAMENTO', Complemento (03) contem 'SALARIOS', Complemento (04) contem 'ADIANTAMENTO', CONTA MOVIMENTO SERA = '35'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (nomePortador.contains("CAIXA(TESOURARIA)")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (nomePortador.contains("BANCO DO NORDESTE")) {
        conta = "16";
        contaMovimento = "16";
    }
    if (nomePortador.contains("CAIXA ECONOMICA FEDERAL-HORTAS")) {
        conta = "14";
        contaMovimento = "14";
    }
    if (nomePortador.contains("SANTANDER - HORTAS")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomePortador.contains("SANTANDER - MAIOBAO")) {
        conta = "387";
        contaMovimento = "387";
    }
    if (nomePortador.contains("XP INVESTIMENTOS -SUPERCLINICA")) {
        conta = "597";
        contaMovimento = "597";
    }
    if (nomePortador.contains("BRADESCO - HORTAS")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomePortador.contains("SANTANDER - COHAB I")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (nomePortador.contains("SANTANDER - COHAB II")) {
        conta = "12";
        contaMovimento = "12";
    }
    if (nomePortador.contains("SANTANDER - MARCUS CENTER")) {
        conta = "9";
        contaMovimento = "9";
    }
    if (nomePortador.contains("SANTANDER - MARIO ANDREAZZA")) {
        conta = "13";
        contaMovimento = "13";
    }
    if (nomePortador.contains("SANTANDER - RUA GRANDE")) {
        conta = "10";
        contaMovimento = "10";
    }
    if (nomePortador.contains("XP INVESTIMENTOS -SUPERCLINICA")) {
        conta = "750";
        contaMovimento = "750";
    }
    if (nomePortador.contains("VIRTUAL SD - COHAB1")) {
        conta = "574";
        contaMovimento = "574";
    }
    if (nomePortador.contains("BANCO DA AMAZONIA - BASA")) {
        conta = "7";
        contaMovimento = "7";
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA CLASSIFICACAO FORNEC")) {
        retornoClassificacao = "2.1.1";
    }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("435"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 435, HISTORICO = PGTO BOLETO Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("945"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 945, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("926"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 926, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1056"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1056, HISTORICO = RECEBIMENTO REF. CLIENTES DIVERSOS Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1064"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1064, HISTORICO = RECEBIMENTO REF. CLIENTES DIVERSOS Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("899"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 899, HISTORICO = DEVOLVIDO Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("896"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 896, HISTORICO = RECEBIMENTO REF.TEREZA PAULA RIBEIRO Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1022"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1022, HISTORICO = PGTO Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("116"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 116, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("950"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 950, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("660"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 660, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("892"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 892, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("678"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 678, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("568"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 568, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("893"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 893, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("894"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 894, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("895"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 895, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("611"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 611, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("897"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 897, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("898"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 898, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("900"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 900, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("860"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 860, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("943"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 943, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("944"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 944, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("903"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 903, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("904"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 904, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("665"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 665, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("905"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 905, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("682"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 682, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("145"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 145, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("145"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 145, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("683"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 683, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("908"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 908, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("909"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 909, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("910"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 910, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("912"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 912, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("911"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 911, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("684"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 684, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("935"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 935, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("935"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 935, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("928"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 928, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("503"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 503, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("916"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 916, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("919"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 919, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("672"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 672, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("917"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 917, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("922"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 922, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("992"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 992, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("923"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 923, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1006"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1006, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("690"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 690, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("924"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 924, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("668"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 668, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("675"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 675, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("891"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 891, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("925"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 925, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("712"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 712, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("890"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 890, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1013"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1013, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1020"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1020, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1020"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1020, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("661"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 661, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("946"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 946, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("311"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 311, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("931"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 931, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("907"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 907, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("846"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 846, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("920"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 920, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("727"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 727, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("306"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 306, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("441"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 441, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1021"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1021, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1023"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1023, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1024"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1024, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1025"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1025, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("562"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 562, HISTORICO = Complemento (04) Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1049"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1049, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("906"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 906, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("334"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 334, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1065"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1065, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("533"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 533, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1038"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1038, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1066"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1066, HISTORICO = Fornecedor/Cliente Complemento (03) Complemento (01)";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("435"))  historico = "PGTO BOLETO" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("945"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:84";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("926"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:28";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1056"))  historico = "RECEBIMENTO REF. CLIENTES DIVERSOS" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1064"))  historico = "RECEBIMENTO REF. CLIENTES DIVERSOS" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("899"))  historico = "DEVOLVIDO" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:33";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("896"))  historico = "RECEBIMENTO REF.TEREZA PAULA RIBEIRO" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1022"))  historico = "PGTO" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("116"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("950"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("660"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("892"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("678"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("568"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("893"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("894"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("895"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("611"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("897"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("898"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("900"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("860"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("943"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("944"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("903"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("904"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("665"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("905"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("682"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("145"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("145"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("683"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("908"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("909"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("910"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("912"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("911"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("684"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("935"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("935"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("928"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("503"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("916"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("919"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("672"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("917"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("922"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("992"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("923"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1006"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("690"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("924"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("668"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("675"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("891"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("925"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("712"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("890"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1013"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1020"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1020"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("661"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("946"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("311"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("931"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("907"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("846"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("920"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("727"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("306"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("441"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1021"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1023"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1024"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1025"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("562"))  historico = "" + " " + complemento04 + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1049"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("906"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("334"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1065"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("533"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1038"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1066"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("HORTAS")) {
        retornaCentroCusto = "2";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("COHAB") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ELEVADO")) {
        retornaCentroCusto = "3";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("RUA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GRANDE")) {
        retornaCentroCusto = "4";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("COHAB") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERMINAL")) {
        retornaCentroCusto = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MARCUS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CENTER")) {
        retornaCentroCusto = "6";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TURU")) {
        retornaCentroCusto = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PATIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NORTE")) {
        retornaCentroCusto = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ADMINISTRATIVO")) {
        retornaCentroCusto = "9";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEMARKETING")) {
        retornaCentroCusto = "10";
    }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(complemento04).contains("/NF") && !StringUtil.removeSpecialCharsToUC(complemento04).contains("-NF") && !StringUtil.removeSpecialCharsToUC(complemento04).contains("NF-") && parametro.equals("documento")) lote = ""; //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("documento")) lote = cutString(lote,"/NF"); //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("documento")) lote = cutString(lote,"NF-"); //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("documento")) lote = cutString(lote,0," "); //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,0,"/NF"); //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,0,"-NF"); //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,0,"NF-"); //ROT-2024-02118323
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("documento")) lote = cutString(lote,0,"-"); //ROT-2024-02118323

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
	
    return mapaVariavel;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
 
    return true;
}


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
  
    return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readFrancesinhagrupoAilosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
 }


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	  return true;
}


public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}



public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


		
		/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


		
		/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


				
		/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


	
/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


		
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}



/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
 }


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
      
    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  

    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	
    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
			   
   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   

   return mapaVariavel;
}


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}



public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
          
	return mapaVariavel;
}						
           
        


 /*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
        public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
           
				 return mapaVariavel;
            }


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   


   return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}
 


public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  
  return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
   
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


public boolean readExtratSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

 

	return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}



/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

     
    return true;
}


public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
     
    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}








/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
	
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

