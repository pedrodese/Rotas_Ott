{import: io_contabil.Database};
        {import: io_contabil.RegrasSemCartoes};
        {import: io_contabil.Util};
        {import: io_contabil.RunExtratosECartoes};
//TEMPLATE 16.05.2017
public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    SysProperties propsEmp = SysProperties.getInstance();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();

    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
    propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String empresa = getNomeEmpresa();
    String codEmpresa = props.get(empresa + "_COD_EMPRESA");
    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");

    logger.logInfo("nme EMPRESA == "+nomeEmpresa+" | ROT == "+roteiroCRM.optString("contabilidade"));

    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

    String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
    if (mantemArquivo == null) mantemArquivo = "";

    String tipoProduto = "";
    try {
        tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
    } catch (Exception xx) {tipoProduto = "OIC_PACOTE";}


    if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
    if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
    if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";


    String backupDirName = dirName + "/Processado";

    boolean apagaExtrato        = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    String tipoEmail            = "";

    HashMap mapaVariavel		= new HashMap();
    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();
    HashMap mapaFornecedor 		= new HashMap();
    HashMap mapaPartPlano 		= new HashMap();
    HashMap mapaDesconto		= new HashMap();
    HashMap mapaAjuste			= new HashMap();

    HashMap mapaTransacao		= new HashMap();

    String cruzaExtrato    	= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";

    boolean geraFiscal = false;
    String loteFiscal  = "";

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida   = "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote				= "";
    boolean enviouEmail 	= false;
    boolean primeiraVezDuplicata = true;

    int transacaoOficial = 0;

    String tipoPlanilha = "";
    String dataAuxiliarMovimento = "";

    try {

        String extencao = "";
        for(int extArquivo = 0; extArquivo < 56; extArquivo++){

            if(extArquivo == 0) extencao = ".ofx,.OFX";
            if(extArquivo == 1) extencao = ".ofx,.OFX";
            if(extArquivo == 2) extencao = ".ofx,.OFX";
            if(extArquivo == 3) extencao = ".ofx,.OFX";
            if(extArquivo == 4) extencao = ".ofx,.OFX";
            if(extArquivo == 5) extencao = ".ofx,.OFX";
            if(extArquivo == 6) extencao = ".ofx,.OFX";
            if(extArquivo == 7) extencao = ".ofx,.OFX";
            if(extArquivo == 8) extencao = ".ofx,.OFX";
            if(extArquivo == 9) extencao = ".csv,.CSV";
            if(extArquivo == 10) extencao = ".csv,.CSV";
            if(extArquivo == 11) extencao = ".csv,.CSV";
            if(extArquivo == 12) extencao = ".csv,.CSV";
            if(extArquivo == 13) extencao = ".csv,.CSV";
            if(extArquivo == 14) extencao = ".csv,.CSV";
            if(extArquivo == 15) extencao = ".csv,.CSV";
            if(extArquivo == 16) extencao = ".csv,.CSV";
            if(extArquivo == 17) extencao = ".csv,.CSV";
            if(extArquivo == 18) extencao = ".xlsx,.XLSX";
            if(extArquivo == 19) extencao = ".xlsx,.XLSX";
            if(extArquivo == 20) extencao = ".xlsx,.XLSX";
            if(extArquivo == 21) extencao = ".txt,.TXT";
            if(extArquivo == 22) extencao = ".txt,.TXT";
            if(extArquivo == 23) extencao = ".txt,.TXT";
            if(extArquivo == 24) extencao = ".pdf,.PDF";
            if(extArquivo == 25) extencao = ".pdf,.PDF";
            if(extArquivo == 26) extencao = ".pdf,.PDF";
            if(extArquivo == 27) extencao = ".pdf,.PDF";
            if(extArquivo == 28) extencao = ".pdf,.PDF";
            if(extArquivo == 29) extencao = ".pdf,.PDF";
            if(extArquivo == 30) extencao = ".pdf,.PDF";
            if(extArquivo == 31) extencao = ".pdf,.PDF";
            if(extArquivo == 32) extencao = ".pdf,.PDF";
            if(extArquivo == 33) extencao = ".pdf,.PDF";
            if(extArquivo == 34) extencao = ".pdf,.PDF";
            if(extArquivo == 35) extencao = ".pdf,.PDF";
            if(extArquivo == 35) extencao = ".pdf,.PDF";
            if(extArquivo == 36) extencao = ".pdf,.PDF";
            if(extArquivo == 37) extencao = ".pdf,.PDF";
            if(extArquivo == 38) extencao = ".pdf,.PDF";
            if(extArquivo == 39) extencao = ".pdf,.PDF";
            if(extArquivo == 40) extencao = ".pdf,.PDF";
            if(extArquivo == 41) extencao = ".pdf,.PDF";
            if(extArquivo == 42) extencao = ".pdf,.PDF";
            if(extArquivo == 43) extencao = ".pdf,.PDF";
            if(extArquivo == 44) extencao = ".pdf,.PDF";
            if(extArquivo == 45) extencao = ".pdf,.PDF";
            if(extArquivo == 46) extencao = ".pdf,.PDF";
            if(extArquivo == 47) extencao = ".csv,.CSV";
            if(extArquivo == 48) extencao = ".csv,.CSV";
            if(extArquivo == 49) extencao = ".csv,.CSV";
            if(extArquivo == 50) extencao = ".csv,.CSV";
            if(extArquivo == 51) extencao = ".csv,.CSV";
            if(extArquivo == 52) extencao = ".csv,.CSV";
            if(extArquivo == 53) extencao = ".csv,.CSV";
            if(extArquivo == 54) extencao = ".csv,.CSV";
            if(extArquivo == 55) extencao = ".csv,.CSV";

            // logger.logInfo("PASSANDO POR AQUI1 " + extArquivo);

            for (int porAba = 0; porAba < 60; porAba++) {
                // logger.logInfo("ENTROUUUU");
                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRM.optString("Abas_Especificas");
                abasEspecificas 		= abasEspecificas.replace(",",";");
                if(!extencao.contains(".XLSX")) abasEspecificas = "";
                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    // logger.logInfo("ABAS ESP == "+abasEspecificas+" | POR ABA == "+porAba);
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba)) && extencao.contains(".XLSX")) apagaArquivo = null;
                }

                if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;

                FilesLoader fileLoader = new FilesLoader(dirName, extencao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                fileLoader.setMaxFiles(30); //Alterando o limite de arquivos
                fileLoader.loadFiles();

                // logger.logInfo("LEU ABAS A MAIS == dirName == "+dirName+" | extencao == "+extencao+" | porAba == "+porAba);

                int contadorMemFiles = 0;

                for (MemoryFile memFile: fileLoader.getMemFiles()) {
                    contadorMemFiles++;

                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;

                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;



                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred


                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData = "";
                    boolean zerar			= true;
                    boolean tratarComoDesconto = false;


                    if(extencao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extencao.contains(".csv,.CSV")) {
                        String nomeArquivoDuplicata = StringUtil.removeSpecialCharsToUC(memFile.getFilename());

                        if (nomeArquivoDuplicata.contains("QUESTOR") || nomeArquivoDuplicata.contains("EXPORTACAO") || nomeArquivoDuplicata.contains("DUPLICATA")) {
                            memFile.setFieldSeparator(",");
                        } else {
                            memFile.setFieldSeparator(";");
                        }
                    }


                    nomeArquivo = memFile.getFilename();
                    // logger.logInfo("MEMORY FILE INSIDE " + contadorMemFiles  + " | "+ nomeArquivo);

                    int transacaoPis = 0;
                    int transacaoCofins = 0;
                    int transacaoInicial = 0;
                    try {
                        String arquivoFiltro = nomeArquivo.toUpperCase();
                        if (arquivoFiltro.contains("FILTRO_")) arquivoFiltro = cutString(arquivoFiltro, 21);
                        try {
                            transacaoInicial = Integer.parseInt(arquivoFiltro.substring(0, arquivoFiltro.indexOf("_")));
                        } catch (Exception e) {}

                        if (arquivoFiltro.contains("PIS_") && arquivoFiltro.contains("COFINS_")) {
                            try {
                                transacaoPis = Integer.parseInt(arquivoFiltro.substring(0, arquivoFiltro.indexOf("PIS_")));
                                transacaoCofins = Integer.parseInt(arquivoFiltro.substring(arquivoFiltro.indexOf("PIS_")+4, arquivoFiltro.indexOf("COFINS_")));
                            } catch (Exception e) {
                                logger.logInfo("CATCH PISCOFINS " + e.getMessage());
                            }
                        }
                    }
                    catch (Exception xx) {
                        transacaoInicial = 0;
                    }
                    if(transacaoOficial == 0)transacaoOficial=transacaoInicial;

                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRM.optString("Cruza_Extrato_com_Extrato").toUpperCase();

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";


                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    //########################################################################

                    // COLOCAR AQUI funcao para carregar variaveis do cliente
                    // CNPJ, EMAIL, contas fixas, etc.


                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================
                    double guardaVD1 = 0.0;
                    StringBuilder restoArquivo = new StringBuilder();

                    double vliss  = 0;
                    double vlcsrf = 0;
                    double vlirrf = 0;
                    double vlinss = 0;

                    int cont2			= 0;
                    double valorPort	= 0;
                    String dataDaFolha	= "";
                    boolean isOutros	= false;
                    String codCcOrigem5	= "";
                    double valorAux		= 0;
                    int ivalorAux		= 0;

                    double valorDocumento1 = 0;
                    double valorDocumento2 = 0;
                    double valorDocumento3 = 0;
                    double valorDocumento4 = 0;
                    double valorDocumento5 = 0;
                    double valorDocumento6 = 0;
                    double valorDocumento7 = 0;
                    double valorDocumento8 = 0;

                    double auxValorPagamento = 0;

                    boolean segundaLinha  = false;

                    String auxNomePort = "" ;
                    String auxComplemento01 = "";
                    double auxComplemento03 = 0;

                    String keyTr = "";
                    String chaveValorDocumento2 = "";
                    double valorAnterior = 0;

                    StringBuilder cabecalhoPlanilha = new StringBuilder();
                    int  	      contadorCabecalho = 0;
                    int  	      contadorVerbas = 0;

                    ttMovimentoPadrao ttMov2      = new ttMovimentoPadrao();


                    JSONObject objetoParametro = new JSONObject();

                    if (tipoPlanilha.equals("MOVIMENTO")) {
                        logger.logInfo("GIR " + getIndiceRoteiro("dataMovimento"));
                        try {inomeOrigem     = getIndiceRoteiro("fornecedor");}		 catch (Exception xx) {inomeOrigem = -1;}
                        try {idataMovimento  = getIndiceRoteiro("dataMovimento");} 	 catch (Exception xx) {idataMovimento = -1;}
                        try {inomePortador   = getIndiceRoteiro("portador");} 		 catch (Exception xx) {inomePortador = -1;}
                        try {idocumento      = getIndiceRoteiro("documentoNF");} 	 catch (Exception xx) {idocumento = -1;}
                        try {ivalorDocumento = getIndiceRoteiro("valorDocumento");}  catch (Exception xx) {ivalorDocumento = -1;}
                        try {ivalorJuros     = getIndiceRoteiro("valorJuros");} 	 catch (Exception xx) {ivalorJuros = -1;}
                        try {ivalorDesconto  = getIndiceRoteiro("valorDesconto");} 	 catch (Exception xx) {ivalorDesconto = -1;}
                        try {ivalorMulta     = getIndiceRoteiro("valorMulta");} 	 catch (Exception xx) {ivalorMulta = -1;}
                        try {icodCcOrigem    = getIndiceRoteiro("centroCusto");} 	 catch (Exception xx) {icodCcOrigem = -1;}
                        try {ivalorPagamento = getIndiceRoteiro("valorPagamento");}  catch (Exception xx) {ivalorPagamento = -1;}
                        try {icomplemento01  = getIndiceRoteiro("complemento01");}   catch (Exception xx) {icomplemento01 = -1;}
                        try {icomplemento02  = getIndiceRoteiro("complemento02");}   catch (Exception xx) {icomplemento02 = -1;}
                        try {icomplemento03  = getIndiceRoteiro("complemento03");}   catch (Exception xx) {icomplemento03 = -1;}
                        try {icomplemento04  = getIndiceRoteiro("complemento04");}   catch (Exception xx) {icomplemento04 = -1;}
                        try {icomplemento05  = getIndiceRoteiro("complemento05");}   catch (Exception xx) {icomplemento05 = -1;}
                        try {icomplemento06  = getIndiceRoteiro("complemento06");}   catch (Exception xx) {icomplemento06 = -1;}
                        icpfCnpj        = -1;

                    }
                    // logger.logInfo("AQUI STOQUE");

                    boolean depoisTotal = false;

                    jStatus = new JSONObject();
                    putStatus(dirName, "", jStatus, logger);

                    try{
                        while (memFile.hasNextLine()) {

                            try {
                                String line = memFile.nextLine();
                                line = StringUtil.removeSpecialCharsToUC(line);
                                cont++;

                                // logger.logInfo("Line -> "+line);

                                contadorCabecalho++;
                                if (contadorCabecalho<15) {
                                    cabecalhoPlanilha.append(line).append(" ");
                                }
                                else {
                                    cabecalhoPlanilha = new StringBuilder();
                                }

                                // logger.logInfo("EXT " + extencao);

                                if (extencao.equals(".csv,.CSV") && !line.contains(";")) {
                                    try { memFile = setSeparadorVirgula(memFile, line, logger);
                                    } catch (Exception ex) { logger.logInfo(ex.getMessage()); }
                                }
                                ////////////////////////////////////////////////////////////////////////////////
                                ///////////////////////////////////////////////////////////// INICIO DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////
                                if((line.contains("DEVOLUCAO IRRF") || line.contains("DEV IRRF MENSAL") || line.contains("AJUSTE SALDO DEVEDOR")) && !nomeArquivo.contains("RESTANTE")){
                                    restoArquivo.append(line).append("\r\n");
                                    continue;
                                }

                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
                                //LEITURA PADRAO ARQUIVOS .OFX
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                if (nomeArquivo.toUpperCase().contains(".OFX")) {
                                    tipoPlanilha = "EXTRATO-OFX";
                                    JSONObject jDados = new JSONObject();
                                    jDados.put("CODEMPRESA", codEmpresa);
                                    jDados.put("TIPOLANCAMENTO", tipoLancamento);
                                    jDados.put("NOMEEMPRESA",    nomeEmpresa);
                                    jDados.put("NOMEARQUIVO",    nomeArquivo);
                                    readOFXDefault(memFile, jDados, dbIOCont, logger);
                                    break;
                                } // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
                                // ----------------------------------------------------------------------------------------------------------

                                // logger.logInfo("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha);
                                // if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
                                if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0) { // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

                                    JSONObject variaveis = new JSONObject();
                                    variaveis.put("line", 			line);
                                    variaveis.put("anoData", 		anoData);
                                    variaveis.put("dirName", 		dirName);
                                    // variaveis.put("jStatus", 		jStatus);
                                    variaveis.put("extensao", 		extencao);
                                    variaveis.put("codEmpresa", 	codEmpresa);
                                    variaveis.put("nomeArquivo", 	nomeArquivo);
                                    variaveis.put("nomeEmpresa", 	nomeEmpresa);
                                    variaveis.put("nomePortador", 	nomePortador);
                                    variaveis.put("tipoPlanilha", 	tipoPlanilha);
                                    variaveis.put("complemento01", 	complemento01);
                                    variaveis.put("complemento02", 	complemento02);
                                    variaveis.put("nomePortador2", 	nomePortador2);
                                    variaveis.put("tipoLancamento", tipoLancamento);
                                    variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());
                                    variaveis.put("arquivoCompleto",  memFile.getLines().toString());

                                    if(extencao.contains(".pdf,.PDF")) memFile.setFieldSeparator("\\|");
                                    // if (codEmpresa.contains("104")) {
                                    // roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
                                    // }

                                    String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);

                                    // logger.logInfo("retorna padroes -> " + retornaPadroes);


                                    // logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);

                                    JSONObject objRetorno = new JSONObject(retornaPadroes);
                                    if (objRetorno.has("tipoRetorno")) {
                                        anoData        = objRetorno.optString("anoData");
                                        retornaPadroes = objRetorno.optString("tipoRetorno");
                                        nomePortador   = objRetorno.optString("nomePortador").trim();
                                        complemento01  = objRetorno.optString("complemento01").trim();
                                        nomePortador2  = objRetorno.optString("nomePortador2").trim();
                                        // tipoPlanilha  = objRetorno.optString("tipoPlanilha").trim();
                                    }

                                    // logger.logInfo("NP23 " + nomePortador + " | " + nomePortador2);

                                    // logger.logInfo("NP2 ==== "+nomePortador2);
                                    if (retornaPadroes.equals("continue")) continue;
                                    if (retornaPadroes.equals("break"))   {
                                        // logger.logInfo("AQQQQQ");
                                        // jStatus = new JSONObject();
                                        // putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
                                }

                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                //                      LEITURA PADRAO DE DUPLICATAS
                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").equals("BAIXAR") && memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").equals("CHAVE DUPLICATA") && memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").equals("RAZAO SOCIAL")) {
                                    tipoPlanilha = "DUPLICATA";
                                    if(primeiraVezDuplicata) {
                                        limparIODuplicata(codEmpresa, dbIOCont, logger);
                                    }
                                    JSONObject jIndices = new  JSONObject();

                                    jIndices.put("IBAIXAR", 0);
                                    jIndices.put("ICODIGOFORNECEDOR", 1);
                                    jIndices.put("INOMEORIGEM", 2);
                                    jIndices.put("ICHAVEDUPLICATA", 3);
                                    jIndices.put("IDUPLICATA", 4);
                                    jIndices.put("ISERIE", 5);
                                    jIndices.put("IPARCELA", 6);
                                    jIndices.put("IVENCIMENTO", 7);
                                    jIndices.put("IVALORPARCELA", 8);
                                    jIndices.put("ISITUACAO", 10);
                                    jIndices.put("IVALORJUROS", -1);
                                    jIndices.put("IVALORDESCONTO", -1);
                                    jIndices.put("IVALORMULTA", -1);

                                    jIndices.put("CODEMPRESA", codEmpresa);

                                    primeiraVezDuplicata = inserirIODuplicata(jIndices, memFile, dbIOCont, logger);
                                    primeiraVezDuplicata = false;
                                    break;
                                } // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
                                // ----------------------------------------------------------------------------------------------------------

                                ////////////////////////////////////////////////////////////////////////////////
                                //////////////////////////////////////////////////////////////// FIM DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////

                                // logger.logInfo("TPIN " + nomeArquivo + " -- " + tipoPlanilha + " -- " + line);

                                if (tipoPlanilha.equals("")) continue;

                                if(nomeArquivo.toUpperCase().contains("PISCOFINS")){
                                    tipoPlanilha = "PISCOFINS";
                                    if (dataAuxiliarMovimento.equals("")) {
                                        dataAuxiliarMovimento = cutString(nomeArquivo, nomeArquivo.length()-13, nomeArquivo.length()-5);
                                        // logger.logInfo("DAM " + dataAuxiliarMovimento);
                                    }
                                }

                                if(nomeArquivo.toUpperCase().contains("FOLHA")){
                                    tipoPlanilha = "FOLHA_DE_PAGAMENTO";
                                }
                                if(nomeArquivo.toUpperCase().contains("ACERTO") && nomeArquivo.toUpperCase().contains("VERBA")){
                                    tipoPlanilha = "VERBAS";
                                }
                                if(line.contains("NUMTRANSENT")  && line.contains("CODFILIAL") && line.contains("DTENT")
                                        && line.contains("ESPECIE")&& line.contains("MODELO")){
                                    tipoPlanilha = "SERVICO";
                                }
                                if(line.contains("CODFILIALNF") && line.contains("TIPODESCARGA") && line.contains("DTENT")
                                        && line.contains("ESPECIE") && line.contains("MODELO")){
                                    tipoPlanilha = "AAAOUTRASENTRADAS";
                                }

                                if (line.startsWith("PAGAMENTO PESSOA FISICA")) {
                                    tipoPlanilha = "PESSOA_FISICA";
                                    naoLeMais = true;
                                }

                                if (line.startsWith("RELACAO DO INSS")) {
                                    tipoPlanilha = "INSS";
                                }

                                if (memFile.getStringFieldRemoveEspCharsUpper(2).contains("DESCRICAO") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("REFERENCIA") && memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR")) {
                                    tipoPlanilha = "PRO_LABORE";
                                }

                                if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("PRO LABORE") && tipoPlanilha.equals("MOVIMENTO")) {
                                    tipoPlanilha = "PRO_LABORE";
                                }

                                if (line.contains("CAD WTR") && line.contains("CELULAR") ) {
                                    tipoPlanilha = "COMISSOES";
                                }

                                if(memFile.getStringFieldRemoveEspCharsUpper(2).contains("BANCO")) auxNomePort = memFile.getStringFieldRemoveEspCharsUpper(2);
                                if(memFile.getStringFieldRemoveEspCharsUpper(2).contains("CONTRATO")) auxComplemento01 = memFile.getStringFieldRemoveEspCharsUpper(2);

                                if (line.contains("PARCELAS") && line.contains("VENCIMENTO") && line.contains("PRINCIPAL") && line.contains("JUROS PAGO")){
                                    tipoPlanilha = "ENDIVIDAMENTO";
                                }

                                if (line.startsWith("PROVISAO") && tipoPlanilha.equals("MOVIMENTO")) {
                                    tipoPlanilha = "PROVISAO";
                                    naoLeMais = true;
                                }

                                if (nomeArquivo.toUpperCase().contains("ACORDO") && nomeArquivo.toUpperCase().contains("COMERCIAL")){
                                    tipoPlanilha = "ACORDO_COMERCIAL";
                                }

                                if (line.contains("FILIAL") && line.contains("NF") && line.contains("DATA") && line.contains("CLIENTE") && line.contains("PRODUTO") &&
                                        line.contains("CFOP") && line.contains("VALOR TOTAL")) {
                                    tipoPlanilha = "BRINDES";
                                }

                                if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("PERIODO:") && !tipoPlanilha.equals("PESSOA_FISICA") && !tipoPlanilha.equals("PRO_LABORE") && !tipoPlanilha.equals("PROVISAO")) {
                                    try {
                                        Date data00 = memFile.getDateField(1);
                                        dataDaFolha = DateUtil.dateToString(data00, "dd/MM/yyyy");
                                    } catch (Exception dt1) {
                                        try {
                                            Date data00 = memFile.getDateField(1, "dd/MM/yyyy");
                                            dataDaFolha = DateUtil.dateToString(data00, "dd/MM/yyyy");
                                        } catch (Exception dt2) {dataDaFolha = "";}
                                    }
                                    continue;
                                }

                                if(nomeArquivo.toUpperCase().contains(".XLSX") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("RESUMO DOS EVENTOS DOS COLABORADORES")){
                                    tipoPlanilha = "FOLHA SINTETICA";
                                    continue;
                                }

                                // PEGA O COLABORADOR DA PLANILHA DE PRO LABORE
                                if (memFile.getStringFieldRemoveEspCharsUpper(2).equals("COLABORADOR:")) {
                                    complemento01 = memFile.getStringFieldRemoveEspCharsUpper(3);
                                    continue;
                                }
                                // logger.logInfo("TIPOP1 -> " + tipoPlanilha);


                                if(tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")){
                                    if(line.startsWith("C3") && !line.contains("FOLHA")) {
                                        // logger.logInfo("AQ1");
                                        continue;
                                    }
                                    // colocado validacao por valor pois estava ignorando a proxima linha depois do DEV IRRF MENSAL
                                    String auxValorDoc1 = cutString(line, 62, 71);
                                    double valorDocumentoTeste = Double.parseDouble(auxValorDoc1);
                                    if(segundaLinha && valorDocumentoTeste == valorAnterior){
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(chave + "-CTB");
                                        if(ttMov2!= null){
                                            ttMov2.nomePortador = cutString(line, 16, 24);
                                            // logger.logInfo("OTT -> " + " |TTMOV2.NP=" + ttMov2.nomePortador + " |TTMOV2.NO=" + ttMov2.nomeOrigem);
                                        }
                                        mapaVariavel.put(chave + "-CTB", ttMov2);
                                        segundaLinha = false;
                                        // logger.logInfo("AQ2");
                                        continue;
                                    }
                                    //ssssss

                                }
                                //logger.logInfo("OTIS -> " + " |TP=" + tipoPlanilha + " | " + idataMovimento);

								/*if(tipoPlanilha.contains("VERBAS")){
									// if(line.startsWith("C3") && !line.contains("FOLHA")) {
										// logger.logInfo("AQ1");
										// continue;
									// }
									// colocado validacao por valor pois estava ignorando a proxima linha depois do DEV IRRF MENSAL
									// String auxValorDoc1 = cutString(line, 62, 71);
									// double valorPagAux = memFile.getDoubleField(4);
									if(segundaLinha && memFile.getStringFieldRemoveEspCharsUpper(4).equals("")){
										ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(chave + "-CTB");
										if(ttMov2!= null){
											try{ttMov2.valorDocumento = Math.abs(memFile.getDoubleField(5));}
                                            catch (Exception vlrd) { valorDocumento = 0; }
											// logger.logInfo("OTT -> " + " |TTMOV2.NP=" + ttMov2.nomePortador + " |TTMOV2.NO=" + ttMov2.nomeOrigem);
										}
										mapaVariavel.put(chave + "-CTB", ttMov2);
										segundaLinha = false;
										// logger.logInfo("AQ2");
										continue;
									}
									//ssssss

								}*/



                                if(tipoPlanilha.equals("PROVISAO")) {

                                    nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","");
                                    if(line.startsWith("PROVISAO")) complemento01 = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");

                                    if (line.startsWith("TOTAL EMPRESA:")) {
                                        naoLeMais = false;
                                        continue;
                                    }
                                    complemento02 = complemento01;
                                    complemento03 = complemento01;



                                    if(memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("PERIODO")) {
                                        try {
                                            Date dt			= memFile.getDateField(3);
                                            dataMovimento	= DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            dataLote		= DateUtil.dateToString(dt, "yyyy-MM");
                                        } catch (Exception dt1) {
                                            try {
                                                Date dt 		= memFile.getDateField(3, "dd/MM/yyyy");
                                                dataMovimento 	= DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                dataLote 		= DateUtil.dateToString(dt, "yyyy-MM");
                                            } catch (Exception dt2) {
                                                try {
                                                    String dataString = memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","");
                                                    Date dt  		= DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                                                    dataMovimento 	= DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                    dataLote 		= DateUtil.dateToString(dt, "yyyy-MM");
                                                } catch (Exception dt2) { }
                                            }
                                        }
                                        //dataMovimento eh o ultimo dia do mes
                                        dataMovimento = getLastDayOfMonth(dataMovimento,true);
                                        continue;
                                    }
                                    // logger.logInfo("OTT -> PASSOU LEITURA DE DATA COL 0 CONTAINS PERIODO");
                                    if (naoLeMais) continue;

                                    //SOMA O VALOR DA COLUNA D COM A COLUNA M
                                    try{
                                        valorDocumento = Math.abs(memFile.getDoubleField(3));
                                        if (complemento01.contains("FERIA")) {
                                            valorPort = Math.abs(memFile.getDoubleField(11));    // ferias
                                        }
                                        else {
                                            valorPort = Math.abs(memFile.getDoubleField(12));    // 13 terceiro

                                        }
                                    }
                                    catch (Exception vlrd) { valorDocumento = 0; }

                                    if(valorDocumento == 0) continue;
                                    if(line.startsWith("TOTAL")) continue;
                                }
                                // logger.logInfo("OTT -> PASSOU TRY CATCH SOMA DE VALOR");
                                if(tipoPlanilha.equals("FOLHA SINTETICA")){

                                    if(line.contains("RESUMO DOS EVENTOS DOS COLABORADORES")) cont2++;
                                    //if(line.contains("RESUMO DOS EVENTOS DOS CONTRIBUINTES INDIVIDUAIS")) naoLeMais = true;
                                    //if(line.contains("TOTAL DOS COLABORADORES")) naoLeMais = true;
                                    if(line.contains("TOTAL") && line.contains("BASES")) naoLeMais = true;

                                    if(line.startsWith("LOCAL:")) continue;

                                    if (naoLeMais) continue;

                                    if(!dataDaFolha.equals("")) {
                                        dataMovimento = getLastDayOfMonth(dataDaFolha,true);
                                        Date dt0	  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                        dataLote	  = DateUtil.dateToString(dt0, "yyyy-MM");
                                    }


                                    if(dataMovimento.equals(""))continue;

                                    inomeOrigem     = 0;	//cod_descricao
                                    inomePortador   = 11;	//cod_descricao
                                    idocumento      = -1;
                                    ivalorDocumento = 3;
                                    int ivalorPort	= 14;	//ctbport
                                    icomplemento01  = 1;
                                    icomplemento02  = 0;
                                    int ieventos	= 10;

                                    nomeOrigem		= "";
                                    complemento06	= "";	//nomeOrigem sem codigo
                                    complemento10	= "";	//nomePortador sem codigo
                                    nomePortador	= "";
                                    complemento02	= "DEBITO";	//credito ou debito - alterado na ttMov3
                                    valorDocumento	= 0;
                                    valorPort		= 0;

                                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1).replaceAll("\"","");
                                    complemento01   = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");

                                    nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador+1).replaceAll("\"","");

                                    complemento06	= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                    complemento09	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");


                                    try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                    catch (Exception vlrd) { valorDocumento = 0; }

                                    try{valorPort = Math.abs(memFile.getDoubleField(ivalorPort));}
                                    catch (Exception vlrd) { valorPort = 0; }

                                    valorDesconto = 0;

                                    if (complemento09.equals("302")) valorDesconto = 621.03;

                                    if (valorDocumento == 0 && valorPort == 0) continue;

                                }
                                // logger.logInfo("OTT -> INICIANDO INSS");
                                if(tipoPlanilha.equals("INSS")){

                                    if (line.startsWith("CODIGO:")) {
                                        complemento01 = line;
                                        naoLeMais = true;
                                        continue;
                                    }
                                    if (memFile.getStringFieldRemoveEspCharsUpper(2).contains("COMPETENCIA:")) {
                                        String dataCompetencia = memFile.getStringFieldRemoveEspCharsUpper(3);
                                        if (dataCompetencia.contains("/")) dataMovimento = "01/" + dataCompetencia.replaceAll(" ","");
                                        dataMovimento = getLastDayOfMonth(dataMovimento, true);
                                        Date dt0	  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                        dataLote	  = DateUtil.dateToString(dt0, "yyyy-MM");
                                        continue;
                                    }

                                    if(dataMovimento.equals("")) continue;

                                    if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("COLABORADORES") &&
                                            memFile.getStringFieldRemoveEspCharsUpper(1).contains("DIRETORES")) {
                                        naoLeMais = false;
                                        continue;
                                    }
                                    if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL LIQUIDO:")) {
                                        naoLeMais = true;
                                        continue;
                                    }

                                    if (naoLeMais) continue;

                                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","");

                                    try{valorDocumento1 = Math.abs(memFile.getDoubleField(1));}
                                    catch (Exception vlrd) { valorDocumento1 = 0; }
                                    try{valorDocumento2 = Math.abs(memFile.getDoubleField(2));}
                                    catch (Exception vlrd) { valorDocumento2 = 0; }
                                    try{valorDocumento3 = Math.abs(memFile.getDoubleField(3));}
                                    catch (Exception vlrd) { valorDocumento3 = 0; }
                                    try{valorDocumento4 = Math.abs(memFile.getDoubleField(4));}
                                    catch (Exception vlrd) { valorDocumento4 = 0; }
                                    try{valorDocumento5 = Math.abs(memFile.getDoubleField(5));}
                                    catch (Exception vlrd) { valorDocumento5 = 0; }
                                    try{valorDocumento6 = Math.abs(memFile.getDoubleField(6));}
                                    catch (Exception vlrd) { valorDocumento6 = 0; }
                                    try{valorDocumento7 = Math.abs(memFile.getDoubleField(7));}
                                    catch (Exception vlrd) { valorDocumento7 = 0; }
                                    try{valorDocumento8 = Math.abs(memFile.getDoubleField(8));}
                                    catch (Exception vlrd) { valorDocumento8 = 0; }

                                    nomePortador = "INSS";
                                    complemento03 = "";
                                    complemento04 = "";
                                    complemento05 = "";
                                    complemento06 = "";
                                    complemento07 = "";
                                    complemento08 = "";
                                    complemento09 = "";
                                    complemento10 = "";

                                }
                                // logger.logInfo("OTT -> INICIANDO PROLABORE");
                                if(tipoPlanilha.equals("PRO_LABORE")){

                                    if (!memFile.getStringFieldRemoveEspCharsUpper(7).contains("INSS") &&
                                            !memFile.getStringFieldRemoveEspCharsUpper(7).contains("IRRF")) continue;

                                    String dataString = "";
                                    if (nomeArquivo.contains("filtro")) {
                                        dataString = nomeArquivo.substring(nomeArquivo.indexOf("filtro_")+7);
                                        dataString = dataString.substring(0, dataString.indexOf("-"));
                                    }

                                    try {
                                        Date dt  = DateUtil.stringToDate(dataString, "ddMMyy");
                                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                    } catch (Exception dt2) { continue;}

                                    if (dataMovimento.equals("")) continue;

                                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","");
                                    complemento02	= memFile.getStringFieldRemoveEspCharsUpper(7).replaceAll("\"","");

                                    try{valorDocumento1 = Math.abs(memFile.getDoubleField(4));}
                                    catch (Exception vlrd) { valorDocumento1 = 0; }
                                    try{valorDocumento2 = Math.abs(memFile.getDoubleField(9));}
                                    catch (Exception vlrd) { valorDocumento2 = 0; }

                                    nomePortador = "PRO_LABORE";
                                    complemento03 = "";
                                    complemento04 = "";
                                    complemento05 = "";
                                    complemento06 = "";
                                    complemento07 = "";
                                    complemento08 = "";
                                    complemento09 = "";
                                    complemento10 = "";

                                }
                                // logger.logInfo("OTT -> INICIANDO PESSOA_FISICA");
                                if(tipoPlanilha.equals("PESSOA_FISICA")){

                                    if (line.startsWith("TOTAL GERAL DA EMPRESA")) {
                                        naoLeMais = false;
                                        complemento01 = "";
                                        continue;
                                    }

                                    if (line.startsWith("TERCEIRO:")) {
                                        complemento01 = memFile.getStringFieldRemoveEspCharsUpper(3);
                                        continue;
                                    }
                                    if (line.startsWith("FILIAL:")) {
                                        complemento02   = memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","");
                                        continue;
                                    }


                                    if (naoLeMais   && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("VALOR ISS:")) continue;
                                    if (!naoLeMais  &&  memFile.getStringFieldRemoveEspCharsUpper(0).equals("VALOR ISS:")) continue;


                                    String dataString = "";
                                    if (nomeArquivo.contains("filtro")) {
                                        dataString = nomeArquivo.substring(nomeArquivo.indexOf("filtro_")+7);
                                        dataString = dataString.substring(0, dataString.indexOf("-"));
                                    }

                                    try {
                                        Date dt  = DateUtil.stringToDate(dataString, "ddMMyy");
                                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                    } catch (Exception dt2) { continue;}

                                    if (dataMovimento.equals("")) continue;

                                    dataMovimento   = getLastDayOfMonth(dataMovimento, true);
                                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","");
                                    complemento05	= memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","");


                                    try{valorDocumento1 = Math.abs(memFile.getDoubleField(1));}
                                    catch (Exception vlrd) { valorDocumento1 = 0; }
                                    try{valorDocumento2 = Math.abs(memFile.getDoubleField(3));}
                                    catch (Exception vlrd) { valorDocumento2 = 0; }

                                    if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("VALOR ISS:")) valorDocumento2 = 0;

                                    if (valorDocumento1 == 0 && valorDocumento2 == 0) continue;

                                    nomePortador = "PESSOA_FISICA";
                                    complemento03 = "";
                                    complemento04 = "";
                                    complemento06 = "";
                                    complemento07 = "";
                                    complemento08 = "";
                                    complemento09 = "";
                                    complemento10 = "";

                                }
                                // logger.logInfo("OTT -> INICIANDO COMISSOES");
                                if(tipoPlanilha.equals("COMISSOES")){

                                    String dataString = nomeArquivo.substring(nomeArquivo.indexOf("filtro_")+7);
                                    dataString = dataString.substring(0, dataString.indexOf("-"));

                                    try {
                                        Date dt  = DateUtil.stringToDate(dataString, "ddMMyy");
                                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                    } catch (Exception dt2) { continue;}

                                    if (dataMovimento.equals("")) continue;

                                    dataMovimento   = getLastDayOfMonth(dataMovimento, true);
                                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","");
                                    complemento01   = memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","");

                                    if(nomeOrigem.equals("")) continue;

                                    try{valorDocumento1 = Math.abs(memFile.getDoubleField(17));}
                                    catch (Exception vlrd) { valorDocumento1 = 0; }

                                    nomePortador = "COMISSOES";
                                    complemento03 = "";
                                    complemento04 = "";
                                    complemento05 = "";
                                    complemento06 = "";
                                    complemento07 = "";
                                    complemento08 = "";
                                    complemento09 = "";
                                    complemento10 = "";

                                }
                                // logger.logInfo("OTT -> INICIANDO MOVIMENTO");
                                logger.logInfo("OTT -> " + " |TP= " + tipoPlanilha);
                                if (tipoPlanilha.contains("MOVIMENTO")) {

                                    /////////////////////////////
                                    // VALIDACAO POR CABECALHO //
                                    /////////////////////////////
                                    // logger.logInfo("CBECS " + StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase() + " | "
                                    // + StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase() + " | "
                                    // + StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase());

                                    if(line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase()) &&
                                            // line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase()) &&
                                            line.contains(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase()) &&
                                            roteiroCRM.optString("fornecedor").length() > 4 /*&&
									   !roteiroCRM.optString("valorDocumento").replaceAll("[0-9]","").equals("")*/) {

                                        for (int i = 0; i < memFile.getFieldsSize(); i++) {
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals("")) continue;
                                            //if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("dataMovimento")).toUpperCase())) idataMovimento = i;
                                            // gui -> 04/07/2024 - 2407-044652 - comentado acima e adicionado a baixo pois ele trocava o indice da data durante o processamento.
                                            idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("fornecedor")).toUpperCase())) inomeOrigem = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDocumento")).toUpperCase())) ivalorDocumento = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorPagamento")).toUpperCase())) ivalorPagamento = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorJuros")).toUpperCase())) ivalorJuros = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorDesconto")).toUpperCase())) ivalorDesconto = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("valorMulta")).toUpperCase())) ivalorMulta = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("centroCusto")).toUpperCase())) icodCcOrigem = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("portador")).toUpperCase())) inomePortador = i;


                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("documentoNF")).toUpperCase())) idocumento = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento01")).toUpperCase())) icomplemento01 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento02")).toUpperCase())) icomplemento02 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento03")).toUpperCase())) icomplemento03 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento04")).toUpperCase())) icomplemento04 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento05")).toUpperCase())) icomplemento05 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento06")).toUpperCase())) icomplemento06 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento07")).toUpperCase())) icomplemento07 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento08")).toUpperCase())) icomplemento08 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento09")).toUpperCase())) icomplemento09 = i;
                                            if (memFile.getStringFieldRemoveEspCharsUpper(i).equals(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento010")).toUpperCase())) icomplemento10 = i;
                                        }
                                    }


                                    if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(")) {
                                        if(idataMovimento >= 0) {

                                            if (memFile.getStringField(idataMovimento).equals("")) continue;

                                            logger.logInfo("COLUNA DA DATA " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

                                            try {
                                                Date dt = memFile.getDateField(idataMovimento);
                                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            } catch (Exception dt1) {
                                                try {
                                                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                                                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                                } catch (Exception dt2) {
                                                    try {
                                                        dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                                        Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                                    } catch (Exception dt2) {
                                                        try{
                                                            dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);

                                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                                        }catch(Exception e){
                                                            // dataMovimento   = "";
                                                            // dataLote        = "";
                                                            continue;
                                                        }
                                                    }
                                                }
                                            }

                                            if (memFile.getStringField(idataMovimento).contains("//")) {
                                                try{
                                                    dataMovimento     = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("//", "/").replaceAll("/", ""), "ddMMyyyy", "dd/MM/yyyy");
                                                    logger.logInfo("dt: " + dataMovimento);
                                                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                                }catch(Exception e){
                                                    // dataMovimento   = "";
                                                    // dataLote        = "";
                                                    continue;
                                                }
                                                // dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("//", "");
                                                // logger.logInfo("DATINGA " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("//", "/").replaceAll("/", ""));
                                            }
                                        }

                                        // logger.logInfo("DATA DO MOVIMENTO " + dataMovimento);

                                        /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                        /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

                                        complemento01	= "";
                                        complemento02	= "";
                                        complemento03	= "";
                                        complemento04	= "";
                                        complemento05	= "";

                                        complemento06	= "";
                                        complemento07	= "";
                                        complemento08	= "";
                                        complemento09	= "";
                                        complemento10	= "";

                                        cpfCnpj			= "";

                                        nomeOrigem		= "";
                                        documento		= "";
                                        parcelaDoc      = 1;
                                        nomePortador	= "";
                                        historico		= "";

                                        valorDocumento	= 0;
                                        valorJuros		= 0;
                                        valorDesconto	= 0;
                                        valorMulta		= 0;
                                        valorPagamento	= 0;

                                        if(icomplemento01 >=0)	complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                        complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
                                        if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                        if(icomplemento04 >=0)	complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
                                        if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                        if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                        if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                        if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                        if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                        if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                        if(inomeOrigem >=0)		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                        if(idocumento >=0)		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                        if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
                                        if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


                                        if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

                                        // JSONObject histobj = new JSONObject();

                                        // histobj.put("complemento02", complemento02);

                                        // complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);

                                        if(ivalorDocumento >=0){
                                            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                            catch (Exception vlrd) { valorDocumento = 0; }
                                        }
                                        // if (!dataMovimento.equals("") && valorDocumento != 0)
                                        logger.logInfo("TEMVAL " + dataMovimento + " | " + valorDocumento + " | " + complemento04 + " | " + icomplemento04 + " | " + idataMovimento + " | " + ivalorDocumento);

                                        if (valorDocumento == 0) continue;

                                        if(ivalorJuros >=0){
                                            try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                            catch (Exception vlrj) { valorJuros = 0;}
                                        }
                                        if(ivalorDesconto >=0){
                                            try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                            catch(Exception vlrd) {valorDesconto = 0;}
                                        }
                                        if(ivalorMulta >=0){
                                            try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                            catch(Exception vlrm) {valorMulta = 0;}
                                        }

                                        if(ivalorPagamento >=0){
                                            try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                            catch(Exception vlrp) {valorPagamento = 0;}
                                        }
                                        //---~---~---~---~---~---~-

                                        if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                            if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                            if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                        }

                                        //if (valorMulta > 0) { valorDocumento = valorDocumento - valorMulta;}

                                        if (nomeOrigem.contains("FLAMBOYANT") && valorMulta > 0) {
                                            valorDocumento = valorDocumento - valorMulta;
                                            valorMulta = 0;
                                        }
                                    }

                                    if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
                                        // logger.logInfo("OTT -> TESTE" );
                                        dataMovimento = getDateTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro);
                                        if (dataMovimento.equals("")) continue;

                                        try {
                                            Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                        } catch (Exception xx) { continue;}
                                        // logger.logInfo("OTT -> " + tipoPlanilha);

                                        complemento01 = getStringTXT(roteiroCRM.optString("complemento01").toUpperCase(), line, objetoParametro);
                                        complemento02 = getStringTXT(roteiroCRM.optString("complemento02").toUpperCase(), line, objetoParametro);
                                        complemento03 = getStringTXT(roteiroCRM.optString("complemento03").toUpperCase(), line, objetoParametro);
                                        complemento04 = getStringTXT(roteiroCRM.optString("complemento04").toUpperCase(), line, objetoParametro);
                                        complemento05 = getStringTXT(roteiroCRM.optString("complemento05").toUpperCase(), line, objetoParametro);
                                        complemento06 = getStringTXT(roteiroCRM.optString("complemento06").toUpperCase(), line, objetoParametro);
                                        complemento07 = getStringTXT(roteiroCRM.optString("complemento07").toUpperCase(), line, objetoParametro);
                                        complemento08 = getStringTXT(roteiroCRM.optString("complemento08").toUpperCase(), line, objetoParametro);
                                        complemento09 = getStringTXT(roteiroCRM.optString("complemento09").toUpperCase(), line, objetoParametro);
                                        complemento10 = getStringTXT(roteiroCRM.optString("complemento10").toUpperCase(), line, objetoParametro);

                                        nomePortador  = getStringTXT(roteiroCRM.optString("portador").toUpperCase(), line, objetoParametro);
                                        documento     = getStringTXT(roteiroCRM.optString("documentoNF").toUpperCase(), line, objetoParametro);
                                        codCcOrigem   = getStringTXT(roteiroCRM.optString("centroCusto").toUpperCase(), line, objetoParametro);
                                        nomeOrigem    = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);


                                        valorDocumento = getDoubleTXT(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
                                        valorJuros	   = getDoubleTXT(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
                                        valorDesconto  = getDoubleTXT(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
                                        valorMulta 	   = getDoubleTXT(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
                                        valorPagamento = getDoubleTXT(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    }
                                    // logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento);

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //##########################################################

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;

                                    logger.logInfo("TESTCP4 " + complemento04);
                                    if (complemento04.equals("")) continue;
                                    // if (complemento01.contains("JUROS") && complemento01.contains("MORA")) continue;
                                    // if (complemento01.contains("DESCONTO")) continue;

                                    documento = removerNotacaoCientificaExcel(documento);


                                }


                                if (tipoPlanilha.contains("VERBAS")) {
                                    logger.logInfo("ENTROU VERBAS");
                                    ivalorDocumento = -1;
                                    inomeOrigem     = 3;
                                    //idataMovimento  = 8;
                                    idataMovimento = 9;
                                    inomePortador   = -1;
                                    icomplemento01  = 8;
                                    idocumento 		= 10;
                                    icomplemento03  = 9;
                                    ivalorJuros		= 7;
                                    // ivalorPagamento = 6;
                                    icomplemento04  = 1;

                                    if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(")) {

                                        if(idataMovimento >= 0 ) {
                                            logger.logInfo("mf idt -> " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
                                            // if (memFile.getStringField(idataMovimento).equals("")) continue;
                                            // try {
                                            // Date dt = memFile.getDateField(idataMovimento);
                                            // dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            // dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            // } catch (Exception dt1) {
                                            // try {
                                            // Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                                            // dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            // dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            // } catch (Exception dt2) {
                                            // try {
                                            // dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                            // Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                            // dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            // dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            // } catch (Exception dt2) { continue;}
                                            // }
                                            // }
                                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                                            if (!dataString.equals("")) {
                                                String dataMovimentoAux	  = getCampoDate(dataString);
                                                if (dataMovimentoAux.contains("/")) {
                                                    dataMovimento     = getCampoDate(dataString);
                                                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                                                }
                                                if (!dataString.equals("")) {
                                                    if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                                                        String pattern = "";
                                                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                                                pattern = "yyyy-MM-dd hh:mm:ss";
                                                            } else {
                                                                pattern = "yyyy-MM-dd";
                                                            }
                                                            dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                                                        } else {
                                                            try {
                                                                pattern = "ddddd";
                                                                dataString = cutString(dataString, 0, 5);
                                                                Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                                                int datanum = Integer.parseInt(dataString);
                                                                Calendar calSerial = Calendar.getInstance();
                                                                calSerial.setTime(dt);
                                                                calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                                                dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                                            } catch (Exception dt2) {dataMovimento = "";}
                                                        }
                                                        if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                                    }
                                                }
                                            }
                                        }

                                        /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                        /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.


                                        complemento01	= "";
                                        complemento02	= "";
                                        complemento03	= "";
                                        // complemento04	= "";
                                        complemento05	= "";

                                        complemento06	= "";
                                        complemento07	= "";
                                        complemento08	= "";
                                        complemento09	= "";
                                        // complemento10	= "";

                                        cpfCnpj			= "";

                                        // nomeOrigem		= "";
                                        documento		= "";
                                        parcelaDoc      = 1;
                                        nomePortador	= "";
                                        historico		= "";

                                        valorDocumento	= 0;
                                        valorJuros		= 0;
                                        valorDesconto	= 0;
                                        valorMulta		= 0;
                                        valorPagamento	= 0;


                                        contadorVerbas = 0;
                                        if(icomplemento01 >=0)	complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                        // if(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).contains("CONTRATO")){
                                        // complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);
                                        // continue;
                                        // }


                                        // complemento01 = cutString(auxComplemento01, ":");
                                        if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                                        if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                        if(icomplemento04 >=0 && !memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).equals("")){
                                            complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
                                        }
                                        if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                        if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                        if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                        if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                        if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                        if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                        if(inomeOrigem >=0 && !memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("")){
                                            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                        }
                                        if(idocumento >=0 )documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

                                        // if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
                                        // if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("BANCO")){
                                        // nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
                                        // continue;
                                        // }
                                        // nomePortador = auxNomePort;


                                        if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


                                        if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

                                        logger.logInfo("MF vd1 -> " + memFile.getStringFieldRemoveEspCharsUpper(4) + " MFvd2 -> " + memFile.getStringFieldRemoveEspCharsUpper(5));
                                        try{valorDocumento1 = Math.abs(memFile.getDoubleField(4));}
                                        catch (Exception vlrd) { valorDocumento1 = 0; }
                                        try{valorDocumento2 = Math.abs(memFile.getDoubleField(6));}
                                        catch (Exception vlrd) { valorDocumento2 = 0; }
                                        try{valorDocumento3 = Math.abs(memFile.getDoubleField(ivalorJuros));}
                                        catch (Exception vlrd) { valorDocumento2 = 0; }


                                        // if(valorDocumento1 == 0){
                                        // logger.logInfo("CHAVE -> " + chave);
                                        // ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(chave + "-CTB");
                                        // if(ttMov2!= null){
                                        // ttMov2.contador = 2;
                                        // }
                                        // mapaVariavel.put(chave + "-CTB", ttMov2);


                                        // ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(chaveValorDocumento2 + "-CTB");
                                        // if(ttMov2!= null){
                                        // ttMov2.contador = 2;
                                        // }
                                        // mapaVariavel.put(chaveValorDocumento2 + "-CTB", ttMov2);

                                        // }
                                        logger.logInfo("DT -> " + dataMovimento + " VD1 -> " + valorDocumento1 + " Vd2 -> " + valorDocumento2 + " CHAVE -> " + chave);


                                        if (valorDocumento1 == 0 && valorDocumento2 == 0) continue;

                                        if (valorDocumento1 == valorDocumento2){
                                            valorDocumento2 = 0;
                                            contadorVerbas = 1;
                                        }

                                        // if(ivalorDocumento >=0){
                                        // try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                        // catch (Exception vlrd) { valorDocumento = 0; }
                                        // }


                                        // if(ivalorJuros >=0){
                                        // try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                        // catch (Exception vlrj) { valorJuros = 0;}
                                        // }
                                        // if(ivalorDesconto >=0){
                                        // try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                        // catch(Exception vlrd) {valorDesconto = 0;}
                                        // }
                                        if(ivalorMulta >=0){
                                            try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                            catch(Exception vlrm) {valorMulta = 0;}
                                        }

                                        // if(ivalorPagamento >=0){
                                        // try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        // catch(Exception vlrp) {valorPagamento = 0;}
                                        // }
                                        //---~---~---~---~---~---~-

                                        // if(ivalorDocumento < 0 && valorDocumento == 0){
                                        // if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        // else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                        // }
                                        // if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
                                        // if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        // if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                        // }


                                        // if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                        // if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                        // if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                        // }

                                        // logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento + " |C04=" + complemento04);


                                        //if (valorMulta > 0) { valorDocumento = valorDocumento - valorMulta;}
                                    }

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //########################################################## SERGIO
                                    if(valorDocumento2 != 0) {
                                        // String chaveDesconto  = dataMovimento + "-" + documento + "-DESCONTO";
                                        String chaveAjuste  = dataMovimento + "-" + complemento04;
                                        ttAjuste ttA    = (ttAjuste)mapaAjuste.get(chaveAjuste);
                                        // logger.logInfo("CDD " + chaveDesconto + " | " + valorDocumento + " | " + tipoPlanilha);
                                        if (ttA == null) {
                                            ttA  = new ttAjuste();
                                            ttA.complemento04  = complemento04;
                                            ttA.valorAjuste  = valorDocumento2;
                                            ttA.valorExtra = valorDocumento3;
                                            ttA.valorLido  = 0;
                                        } else {
                                            ttA.valorAjuste += valorDocumento2;
                                        }
                                        mapaAjuste.put(chaveAjuste,ttA);
                                    }

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;

                                    documento = removerNotacaoCientificaExcel(documento);
                                }


                                if (tipoPlanilha.contains("ENDIVIDAMENTO")) {
                                    ivalorDocumento = 2;
                                    inomeOrigem     = 0;
                                    idataMovimento  = 1;
                                    inomePortador   = 2;
                                    icomplemento01  = 2;
                                    icomplemento03  = 0;
                                    ivalorJuros		= 4;
                                    ivalorPagamento = 5;
                                    icomplemento04  = 5;

                                    if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(")) {

                                        if(idataMovimento >= 0) {

                                            if (memFile.getStringField(idataMovimento).equals("")) continue;
                                            try {
                                                Date dt = memFile.getDateField(idataMovimento);
                                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            } catch (Exception dt1) {
                                                try {
                                                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                                                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                                } catch (Exception dt2) {
                                                    try {
                                                        dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                                        Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                                    } catch (Exception dt2) { continue;}
                                                }
                                            }
                                        }

                                        /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                        /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

                                        complemento01	= "";
                                        complemento02	= "";
                                        complemento03	= "";
                                        complemento04	= "";
                                        complemento05	= "";

                                        complemento06	= "";
                                        complemento07	= "";
                                        complemento08	= "";
                                        complemento09	= "";
                                        complemento10	= "";

                                        cpfCnpj			= "";

                                        nomeOrigem		= "";
                                        documento		= "";
                                        parcelaDoc      = 1;
                                        nomePortador	= "";
                                        historico		= "";

                                        valorDocumento	= 0;
                                        valorJuros		= 0;
                                        valorDesconto	= 0;
                                        valorMulta		= 0;
                                        valorPagamento	= 0;

                                        // if(icomplemento01 >=0)	complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                        // if(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).contains("CONTRATO")){
                                        // complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);
                                        // continue;
                                        // }


                                        complemento01 = cutString(auxComplemento01, ":");
                                        if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                                        if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                        if(icomplemento04 >=0)	complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
                                        if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                        if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                        if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                        if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                        if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                        if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                        if(inomeOrigem >=0)		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                        if(idocumento >=0)		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                        // if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
                                        // if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("BANCO")){
                                        // nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
                                        // continue;
                                        // }
                                        nomePortador = auxNomePort;


                                        if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


                                        if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

                                        if(ivalorDocumento >=0){
                                            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                            catch (Exception vlrd) { valorDocumento = 0; }
                                        }
                                        if (valorDocumento == 0) continue;

                                        if(ivalorJuros >=0){
                                            try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                            catch (Exception vlrj) { valorJuros = 0;}
                                        }
                                        if(ivalorDesconto >=0){
                                            try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                            catch(Exception vlrd) {valorDesconto = 0;}
                                        }
                                        if(ivalorMulta >=0){
                                            try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                            catch(Exception vlrm) {valorMulta = 0;}
                                        }

                                        if(ivalorPagamento >=0){
                                            try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                            catch(Exception vlrp) {valorPagamento = 0;}
                                        }
                                        //---~---~---~---~---~---~-

                                        if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                            if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                            if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                        }

                                        //logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento + " |C04=" + complemento04);


                                        //if (valorMulta > 0) { valorDocumento = valorDocumento - valorMulta;}
                                    }

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //##########################################################

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;

                                    documento = removerNotacaoCientificaExcel(documento);
                                }

                                if (tipoPlanilha.contains("BRINDES")) {

                                    ivalorDocumento = 6;
                                    // inomeOrigem     = 10;
                                    inomeOrigem     = 3;
                                    idataMovimento  = 2;
                                    // inomePortador   = 8;
                                    idocumento      = 1;
                                    icomplemento01  = 0;
                                    // icomplemento03  = 0;
                                    // icomplemento04  = 10;
                                    // icomplemento05  = 7;


                                    if(idataMovimento >= 0) {

                                        if (memFile.getStringField(idataMovimento).equals("")) continue;

                                        try{
                                            dataMovimento     = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), "dd/MM/yyyy");
                                            dataLote          = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }catch(Exception e){
                                            logger.logInfo("ERRO AO CAPTURAR DATA - BRINDES");
                                        }

                                    }

                                    /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                    /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

                                    complemento01	= "";
                                    complemento02	= "";
                                    complemento03	= "";
                                    complemento04	= "";
                                    complemento05	= "";

                                    complemento06	= "";
                                    complemento07	= "";
                                    complemento08	= "";
                                    complemento09	= "";
                                    complemento10	= "";

                                    cpfCnpj			= "";

                                    nomeOrigem		= "";
                                    documento		= "";
                                    parcelaDoc      = 1;
                                    nomePortador	= "";
                                    historico		= "";

                                    valorDocumento	= 0;
                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    if(icomplemento01 >=0)	complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                    if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                                    if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                    if(icomplemento04 >=0)	complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");

                                    complemento02 = tipoPlanilha;

                                    if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                    if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                    if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                    if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                    if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                    if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                    if(inomeOrigem >=0)		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                    if(idocumento >=0)		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                    // logger.logInfo("OTT -> " + memFile.getStringFieldRemoveEspCharsUpper(8));


                                    if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");

                                    if(inomePortador >=0)		nomePortador		= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
                                    /*if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("MARKETING")
										|| (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("SERVICO")
										&& memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("PROF"))){
											nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador) + " " + nomeOrigem;
									}*/

                                    if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


                                    if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }
                                    if (valorDocumento == 0) continue;

                                    if(ivalorJuros >=0){
                                        try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }
                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }
                                    if(ivalorMulta >=0){
                                        try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }
                                    //---~---~---~---~---~---~-

                                    if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                        if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                        if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                    }

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //##########################################################

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;
                                    documento = removerNotacaoCientificaExcel(documento);


                                }

                                if (tipoPlanilha.contains("SERVICO")) {

                                    ivalorDocumento = 15;
                                    // inomeOrigem     = 10;
                                    inomeOrigem     = 7;
                                    idataMovimento  = 2;
                                    inomePortador   = 8;
                                    idocumento      = 9;
                                    icomplemento01  = 1;
                                    icomplemento03  = 0;
                                    icomplemento04  = 10;
                                    icomplemento05  = 7;


                                    if(idataMovimento >= 0) {

                                        if (memFile.getStringField(idataMovimento).equals("")) continue;
                                        try {
                                            Date dt = memFile.getDateField(idataMovimento);
                                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                        } catch (Exception dt1) {
                                            try {
                                                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            } catch (Exception dt2) {
                                                try {
                                                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                                    Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                                } catch (Exception dt2) { continue;}
                                            }
                                        }
                                    }

                                    /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                    /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

                                    complemento01	= "";
                                    complemento02	= "";
                                    complemento03	= "";
                                    complemento04	= "";
                                    complemento05	= "";

                                    complemento06	= "";
                                    complemento07	= "";
                                    complemento08	= "";
                                    complemento09	= "";
                                    complemento10	= "";

                                    cpfCnpj			= "";

                                    nomeOrigem		= "";
                                    documento		= "";
                                    parcelaDoc      = 1;
                                    nomePortador	= "";
                                    historico		= "";

                                    valorDocumento	= 0;
                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    if(icomplemento01 >=0)	complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                    if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                                    if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                    if(icomplemento04 >=0)	complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
                                    //complemento04 = tipoPlanilha;
                                    if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                    if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                    if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                    if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                    if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                    if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                    if(inomeOrigem >=0)		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                    if(idocumento >=0)		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                    // logger.logInfo("OTT -> " + memFile.getStringFieldRemoveEspCharsUpper(8));


                                    if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");

                                    if(inomePortador >=0)		nomePortador		= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");
                                    if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("MARKETING")
                                            || (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("SERVICO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("PROF"))){
                                        nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador) + " " + nomeOrigem;
                                    }

                                    if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


                                    if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }
                                    if (valorDocumento == 0) continue;

                                    try{vliss = Math.abs(memFile.getDoubleField(16));}
                                    catch (Exception vlrd) { vliss = 0; }

                                    try{vlcsrf = Math.abs(memFile.getDoubleField(17));}
                                    catch (Exception vlrd) { vlcsrf = 0; }

                                    try{vlirrf = Math.abs(memFile.getDoubleField(18));}
                                    catch (Exception vlrd) { vlirrf = 0; }

                                    try{vlinss = Math.abs(memFile.getDoubleField(19));}
                                    catch (Exception vlrd) { vlinss = 0; }

                                    if(ivalorJuros >=0){
                                        try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }
                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }
                                    if(ivalorMulta >=0){
                                        try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }
                                    //---~---~---~---~---~---~-

                                    if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                        if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                        if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                    }

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //##########################################################

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;
                                    documento = removerNotacaoCientificaExcel(documento);


                                }

                                if (tipoPlanilha.contains("AAAOUTRASENTRADAS")) {

                                    ivalorDocumento = 10;
                                    inomeOrigem     = 8;
                                    idataMovimento  = 2;
                                    inomePortador   = -1;
                                    idocumento      = 6;
                                    icomplemento01  = 0;
                                    icomplemento02  = 11;
                                    icomplemento03  = 12;
                                    icomplemento04  = 20;
                                    icomplemento05  = 22;

                                    if(idataMovimento >= 0) {

                                        if (memFile.getStringField(idataMovimento).equals("")) continue;
                                        try {
                                            Date dt = memFile.getDateField(idataMovimento);
                                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                        } catch (Exception dt1) {
                                            try {
                                                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                            } catch (Exception dt2) {
                                                try {
                                                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                                    Date dt  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                                                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                                } catch (Exception dt2) { continue;}
                                            }
                                        }
                                    }

                                    /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                    /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

                                    complemento01	= "";
                                    complemento02	= "";
                                    complemento03	= "";
                                    complemento04	= "";
                                    complemento05	= "";

                                    complemento06	= "";
                                    complemento07	= "";
                                    complemento08	= "";
                                    complemento09	= "";
                                    complemento10	= "";

                                    cpfCnpj			= "";

                                    nomeOrigem		= "";
                                    documento		= "";
                                    parcelaDoc      = 1;
                                    nomePortador	= "";
                                    historico		= "";

                                    valorDocumento	= 0;
                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    if(icomplemento01 >=0)	complemento01	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).replaceAll("\"","");
                                    if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                                    if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                    if(icomplemento04 >=0)	complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
                                    if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                    if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                    complemento06 = tipoPlanilha;
                                    if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                    if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                    if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                    if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                    if(inomeOrigem >=0)		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                    if(idocumento >=0)		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                    // logger.logInfo("OTT -> " + memFile.getStringFieldRemoveEspCharsUpper(8));


                                    if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");

                                   /* if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("MARKETING")
										|| (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("SERVICO")
										&& memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("PROF"))){
											nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador) + " " + nomeOrigem;
									}*/

                                    if(icodCcOrigem >=0)	codCcOrigem		= memFile.getStringFieldRemoveEspCharsUpper(icodCcOrigem).replaceAll("\"","");


                                    if(icpfCnpj >=0)		cpfCnpj 		= memFile.getStringFieldRemoveEspCharsUpper(icpfCnpj).replaceAll("\"","");

                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }
                                    if (valorDocumento == 0) continue;

                                    /*try{vliss = Math.abs(memFile.getDoubleField(16));}
                                    catch (Exception vlrd) { vliss = 0; }

                                    try{vlcsrf = Math.abs(memFile.getDoubleField(17));}
                                    catch (Exception vlrd) { vlcsrf = 0; }

                                    try{vlirrf = Math.abs(memFile.getDoubleField(18));}
                                    catch (Exception vlrd) { vlirrf = 0; }

                                    try{vlinss = Math.abs(memFile.getDoubleField(19));}
                                    catch (Exception vlrd) { vlinss = 0; }*/

                                    if(ivalorJuros >=0){
                                        try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }
                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }
                                    if(ivalorMulta >=0){
                                        try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }
                                    //---~---~---~---~---~---~-

                                    if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                        if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                        if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                    }

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //##########################################################

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;
                                    documento = removerNotacaoCientificaExcel(documento);


                                }

                                if (tipoPlanilha.contains("ACORDO_COMERCIAL")) {

                                    ivalorDocumento = 5;
                                    inomeOrigem     = 1;
                                    idataMovimento  = 6;
                                    inomePortador   = -1;
                                    idocumento      = 7;
                                    icomplemento02  = 5;
                                    icomplemento03  = -1;
                                    icomplemento04  = -1;
                                    icomplemento05  = -1;


                                    if(idataMovimento >= 0) {

                                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                                        if (!dataString.equals("")) {
                                            String dataMovimentoAux	  = getCampoDate(dataString);
                                            if (dataMovimentoAux.contains("/")) {
                                                dataMovimento     = getCampoDate(dataString);
                                                dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                                            }
                                            if (!dataString.equals("") && dataMovimento.equals("")) {
                                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                                                    String pattern = "";
                                                    if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                                            pattern = "yyyy-MM-dd hh:mm:ss";
                                                        } else {
                                                            pattern = "yyyy-MM-dd";
                                                        }
                                                        dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                                                    } else {
                                                        try {
                                                            pattern = "ddddd";
                                                            dataString = cutString(dataString, 0, 5);
                                                            Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                                            int datanum = Integer.parseInt(dataString);
                                                            Calendar calSerial = Calendar.getInstance();
                                                            calSerial.setTime(dt);
                                                            calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                                            dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                                        } catch (Exception dt2) {dataMovimento = "";}
                                                    }
                                                    if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                                }
                                            }
                                        }
                                    }

                                    if(dataMovimento.equals("")) continue;

                                    /// QUANDO PLANILHA TIVER MAIS DE UMA LINHA PARE LER, JOGAR O cont++ neste ponto aqui (retirando do inicio do Line
                                    /// E somar apenas quando for a linha primeira. Quando fizer isto, colocar para inicializar os campos conforme abaixo.

                                    complemento02	= "";
                                    complemento03	= "";
                                    complemento04	= "";
                                    complemento05	= "";

                                    complemento06	= "";
                                    complemento07	= "";
                                    complemento08	= "";
                                    complemento09	= "";
                                    complemento10	= "";

                                    cpfCnpj			= "";
                                    codCcOrigem     = "";

                                    nomeOrigem		= "";
                                    documento		= "";
                                    parcelaDoc      = 1;
                                    nomePortador	= "";
                                    historico		= "";

                                    valorDocumento	= 0;
                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    if(icomplemento02 >=0)	complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                                    if(icomplemento03 >=0)	complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
                                    if(icomplemento04 >=0)	complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","");
                                    if(icomplemento05 >=0)	complemento05	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento05).replaceAll("\"","");

                                    if(icomplemento06 >=0)	complemento06	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento06).replaceAll("\"","");
                                    if(icomplemento07 >=0)	complemento07	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento07).replaceAll("\"","");
                                    if(icomplemento08 >=0)	complemento08	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento08).replaceAll("\"","");
                                    if(icomplemento09 >=0)	complemento09	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento09).replaceAll("\"","");
                                    if(icomplemento10 >=0)	complemento10	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento10).replaceAll("\"","");

                                    if(inomeOrigem >=0)		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                                    if(idocumento >=0)		documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
                                    // logger.logInfo("OTT -> " + memFile.getStringFieldRemoveEspCharsUpper(8));


                                    if(inomePortador >=0)	nomePortador	= memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replaceAll("\"","");

                                   /* if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("MARKETING")
										|| (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("SERVICO")
										&& memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("PROF"))){
											nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador) + " " + nomeOrigem;
									}*/

                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }
                                    if (valorDocumento == 0) continue;

                                    if(ivalorJuros >=0){
                                        try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }
                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }
                                    if(ivalorMulta >=0){
                                        try{valorMulta = memFile.getDoubleField(ivalorMulta);}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }
                                    //---~---~---~---~---~---~-

                                    if(ivalorPagamento >=0 && ivalorJuros < 0 && ivalorDesconto < 0){
                                        if(valorPagamento > valorDocumento) valorJuros = valorPagamento - valorDocumento;
                                        if(valorPagamento < valorDocumento) valorDesconto = valorDocumento - valorPagamento;
                                    }

                                    if(dataMovimento.length() > 9){
                                        mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                        anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                        mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                        mesRef	= mesRef - 1;
                                        if (mesRef	== 0) {
                                            mesRef	= 12;
                                            anoRef	= anoRef - 1;
                                        }
                                        mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    }
                                    //---~---~---~---~---~---~-

                                    if (nomeOrigem.equals("")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                    nomeOrigem = nomeOrigem.trim();
                                    if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();

                                    nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").trim();

                                    //##########################################################

                                    valorTotalDoc   += valorDocumento;
                                    valorTotalJuros += valorJuros;
                                    valorTotalDesc  += valorDesconto;
                                    documento = removerNotacaoCientificaExcel(documento);

                                    logger.logInfo("VALOR -> "+valorDocumento+" | DT = "+dataMovimento);

                                }

                                if(tipoPlanilha.contains("PISCOFINS")){

                                    if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL DE DEBITOS")) {
                                        depoisTotal = true;
                                        continue;
                                    }

                                  /*if(!memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").equals("")) {
                                        try {
                                            Date dt			= memFile.getDateField(1);
                                            dataMovimento	= DateUtil.dateToString(dt, "dd/MM/yyyy");
                                            dataLote		= DateUtil.dateToString(dt, "yyyy-MM");
                                            //dataMovimento eh o ultimo dia do mes
                                            dataMovimento = getLastDayOfMonth(dataMovimento,true);
                                            continue;
                                        } catch (Exception dt1) {
                                            try {
                                                Date dt 		= memFile.getDateField(1, "dd/MM/yyyy");
                                                dataMovimento 	= DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                dataLote 		= DateUtil.dateToString(dt, "yyyy-MM");
                                                //dataMovimento eh o ultimo dia do mes
                                                dataMovimento = getLastDayOfMonth(dataMovimento,true);
                                                continue;
                                            } catch (Exception dt2) {
                                                try {
                                                    String dataString = memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","");
                                                    Date dt  		= DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                                                    dataMovimento 	= DateUtil.dateToString(dt, "dd/MM/yyyy");
                                                    dataLote 		= DateUtil.dateToString(dt, "yyyy-MM");
                                                    //dataMovimento eh o ultimo dia do mes
                                                    dataMovimento = getLastDayOfMonth(dataMovimento,true);
                                                    continue;
                                                } catch (Exception dt2) { }
                                            }
                                        }

                                    }*/

                                    try {
                                        dataMovimento = getCampoDate(dataAuxiliarMovimento, "ddMMyyyy", "dd/MM/yyyy");
                                        dataLote 	  = getCampoDate(dataAuxiliarMovimento, "", "yyyy-MM");
                                    } catch (Exception e) {}

                                    // logger.logInfo("DATS " + dataMovimento);

                                    if (dataMovimento.equals("")) continue;

                                    nomeOrigem	= memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","");


                                    try{valorDocumento1 = Math.abs(memFile.getDoubleField(2));}
                                    catch (Exception vlrd) { valorDocumento1 = 0; }
                                    try{valorDocumento2 = Math.abs(memFile.getDoubleField(3));}
                                    catch (Exception vlrd) { valorDocumento2 = 0; }

                                    // logger.logInfo("VALORES " + valorDocumento1 + " | " + valorDocumento2);


                                    nomePortador  = "";
                                    complemento03 = "";
                                    complemento04 = "";
                                    complemento05 = "";
                                    complemento06 = "";
                                    complemento07 = "";
                                    complemento08 = "";
                                    complemento09 = "";
                                    complemento10 = "";



                                    if (depoisTotal) {
                                        complemento02 = "CREDITO";
                                        complemento03 = "CREDITO";
                                        nomePortador = memFile.getStringFieldRemoveEspCharsUpper(0);
                                    } else {
                                        complemento02 = "DEBITOS";
                                        complemento03 = "DEBITOS";
                                    }

                                    complemento01 = memFile.getStringFieldRemoveEspCharsUpper(4);
                                    complemento02 = memFile.getStringFieldRemoveEspCharsUpper(5);
                                    complemento03 = memFile.getStringFieldRemoveEspCharsUpper(6);
                                    DecimalFormat df = new DecimalFormat("#,##0.00");
                                    // complemento04 = memFile.getStringFieldRemoveEspCharsUpper(7);
                                    complemento04 = String.valueOf(df.format(memFile.getDoubleField(3)));
                                    complemento06 = String.valueOf(df.format(memFile.getDoubleField(2)));
                                    // complemento06 = memFile.getStringFieldRemoveEspCharsUpper(2);

                                }

                                //--------------------------------------------------------------------------------



                                if(tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")){

                                    if(line.length() < 60) continue;

                                    // logger.logInfo("D -> " + cutString(line, 24, 26) + "| M > " + cutString(line, 26, 28 ) + "| A > " + cutString(line, 28, 32));
                                    String dataString = cutString(line, 24, 26) + "/" + cutString(line, 26, 28) + "/" + cutString(line, 28, 32);
                                    if (!dataString.equals("") && dataString.contains("/")) {
                                        String dataMovimentoAux	  = getCampoDate(dataString);
                                        if (dataMovimentoAux.contains("/")) {
                                            dataMovimento     = getCampoDate(dataString);
                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                            // continue;
                                        }
                                    }
                                    // dataMovimento = "01/04/2023";

                                    // logger.logInfo("DSS " + dataString);
                                    // dataLote = "2023-04";

                                    if(nomeArquivo.contains("FOLHA 13")){
                                        dataMovimento = "20/"+cutString(dataMovimento,dataMovimento.indexOf("/"),dataMovimento.length());
                                    }

                                    // nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
                                    // nomePortador = cutString(line, 17, 24) + " " + cutString(line, 32, 34).trim();
                                    // nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
                                    nomeOrigem = cutString(line, 16, 24);
                                    complemento01 = cutString(line, 32, 34);
                                    // nomePortador = cutString(line, 16, 24)  + complemento01;

                                    documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);


                                    // complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);

                                    // complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
                                    if(cutString(line, 82, 90).contains("EVENTO")) complemento02 = cutString(line, 95, 200).trim();
                                    // complemento02 = complemento02.replaceAll("DEV IRRF DEV IRRF MENSAL", "DEVOLUCAO IRRF");
                                    // logger.logInfo("OTT -> " + cutString(line, 83, 89));
                                    complemento03 	= cutString(line, "CR:", " ");
                                    // complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

                                    complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
                                    cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
                                    codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


                                    String auxValorDoc = cutString(line, 57, 71);
                                    valorDocumento = Double.parseDouble(auxValorDoc);
                                    // valorDocumento = getDoubleTXT2020(cutString(line, 62, 71), line, objetoParametro);
                                    valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
                                    valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
                                    valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
                                    valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    // logger.logInfo("AVD " + auxValorDoc + " | " + valorDocumento);

                                    if (tipoLancamento.equals("PAGAR"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-CREDITO";



                                    // if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
                                    // if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                    // else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    // }
                                    // if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
                                    // if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                    // if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    // }
                                    // logger.logInfo("OTT -> " + " |VD=" + valorDocumento + " |DM=" + dataMovimento + " |NO=" + nomeOrigem + " |NP=" + nomePortador + " |C01=" + complemento01 + " |C02=" + complemento02 + " |C03=" + complemento03 + " |C04=" + complemento04 + " |C05=" + complemento05 + " |C06=" + complemento06);
                                    valorDocumento = Math.abs(valorDocumento);
                                    // logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento);
                                    // }
                                }

                                // logger.logInfo("TP -> "+tipoPlanilha+" - DM "+idataMovimento+" -> "+dataMovimento+" - VD "+ivalorDocumento+" -> "+valorDocumento);
                                if(tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")){
                                    if (complemento04.equals("") && complemento01.contains("D")) {
                                        keyTr = "Linha" + String.valueOf(cont);
                                    }
                                    if (complemento04.equals("") && valorDocumento != valorAnterior){
                                        // logger.logInfo("CP1 " + complemento01);
                                        if (complemento01.contains("C")) continue;
                                    }
                                    valorAnterior = valorDocumento;
                                }
                                if(!tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")){
                                    keyTr = complemento04;
                                    if (complemento04.equals("")) keyTr = "Linha" + String.valueOf(cont);
                                }


                                //if (tipoPlanilha.contains("SERVICO")) keyTr = "Linha" + String.valueOf(porAba) + String.valueOf(cont); #COMENTADO POR CONTA DO CHAMADO 2309-016186
                                // logger.logInfo("TRANSACAO == "+transacaoOficial);
                                ttTransacao ttTr      = (ttTransacao)mapaTransacao.get(keyTr);
                                if (ttTr == null) {
                                    if (!tipoPlanilha.contains("PISCOFINS") && !tipoPlanilha.contains("SERVICO")
                                            && !tipoPlanilha.contains("OUTRASENTRADAS")) transacaoOficial++;
                                    ttTr = new ttTransacao();
                                    ttTr.transacao         = Integer.toString(transacaoOficial);
                                    ttTr.bordero           = complemento03;
                                }
                                // logger.logInfo("2 TRANSACAO == "+transacaoOficial);
                                // COLOCAMOS O CR NO QUE, MAS PRECISAMOS DEIXAR EM ORDEM
                                //COLOCAR LOG EM CLASSIFICACAO
                                if(tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")){
                                    ttTr = new ttTransacao();
                                    complemento03 = complemento03.replaceAll("\\.", "").trim();

                                    ttTr.transacao = complemento03;
                                    ttTr.bordero   = complemento03;
                                    // logger.logInfo("AUXCOMPLEMENTO03 -> " + auxComplemento03);
                                }

                                mapaTransacao.put(keyTr,ttTr);
                                complemento10 = "TR:" + String.valueOf(ttTr.transacao) + "#";
                                if(tipoPlanilha.contains("ACORDO_COMERCIAL") || tipoPlanilha.contains("BRINDES")) complemento10 = "";//ser? removido caso a contadora solicite a transacao
                                // if(tipoPlanilha.contains("SERVICO")) complemento10 = "TR:" + cutString(nomeArquivo.toUpperCase(), "SERVICO_", ".XLSX") + "#";
                                // if (tipoPlanilha.contains("PISCOFINS")) complemento10 = "TR:" + String.valueOf(transacaoOficial) + "#";

                                // if(tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")) complemento10 = String.valueOf(ttTr.centresultado);
                                if (tipoPlanilha.contains("PISCOFINS")) complemento10 = "TR:" + String.valueOf(transacaoPis) + "#";
                                if (!complemento04.equals("") && !tipoPlanilha.contains("SERVICO") && !tipoPlanilha.contains("PISCOFINS") && !tipoPlanilha.contains("VERBAS")) complemento10 = complemento10 + " DOC:" + complemento04 + "#";
                                // logger.logInfo("CP10 == "+nomeArquivo.toUpperCase());

                                JSONObject histobj = new JSONObject();

                                histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
                                histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
                                histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
                                histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
                                histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
                                histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
                                histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
                                histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);

                                // #DOCUMENTACAO
                                // trata lancamento como desconto (de outro lancamento)
                                tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoDesconto) {

                                    // String chaveDesconto  = dataMovimento + "-" + documento + "-DESCONTO";
                                    String chaveDesconto  = dataMovimento + "-" + complemento04 + "-DESCONTO";
                                    ttDesconto ttD    = (ttDesconto)mapaDesconto.get(chaveDesconto);
                                    logger.logInfo("CDD " + chaveDesconto + " | " + valorDocumento + " | " + tipoPlanilha);

                                    if(valorDocumento == 0) continue;

                                    if (ttD == null) {
                                        ttD  = new ttDesconto();
                                        ttD.documento  = documento;
                                        ttD.valorDesc  = valorDocumento;
                                        ttD.valorLido  = 0;
                                    } else {
                                        logger.logInfo("TVDDSC " + ttD.valorDesc);
                                        ttD.valorDesc += valorDocumento;
                                    }
                                    mapaDesconto.put(chaveDesconto,ttD);
                                    complemento07 = "DESCONTO";
                                    logger.logInfo("DOCS " + tipoPlanilha);
                                    if (!tipoPlanilha.equals("MOVIMENTO")) continue;
                                }


                                String contLinhaTexto = String.valueOf(cont);
                                contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

                                if(tipoPlanilha.contains("VERBAS")){
                                    if(!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")){
                                        classificacao = complemento04 + dataMovimento.replace("/","").trim() + consolidaClass;
                                    }
                                }else{
                                    classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
                                }
                                
                                lote = nomeEmpresa + "_" + codEmpresa + "_" + nomeArquivo  + "_" + dataLote + "_" + tipoLancamento;
                                chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;

                                if(tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")){
                                    classificacao         = complemento03+ dataMovimento.replace("/","").trim() + consolidaClass;
                                    chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto + "-" + complemento03;
                                }


                                if (complemento01.startsWith("RETENCAO COFINS PJ") || complemento01.startsWith("RETENCAO CSLL PJ")|| complemento01.startsWith("RETENCAO PIS/PASEP PJ")){
                                    chave = lote + "-" + String.valueOf(porAba) + "-" + "RETENCAO PCC 4,5%" + documento + "-" + dataMovimento;
                                } else {
                                    chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;

                                }

                                // if (complemento01.contains("VERBA FORNECEDORES") ||  complemento01.contains("COMPRA MERCADORIA")) chave = dataMovimento + "-" + String.valueOf(porAba) + "-" + nomeOrigem + "--" + documento + "-" + complemento04 + "-" + complemento05 + "-" + complemento06;
                                //logger.logInfo("CPSS " + complemento01 + " | " + dataMovimento + " | " + valorDocumento + " | " + documento);

                                if (complemento01.startsWith("IMPOSTOS ESTADUAIS PARCELADOS") || complemento01.startsWith("JUROS S/PARCELAMENTO IMP. ESTADUAL")){
                                    chave = lote + "-" + String.valueOf(porAba) + "-" + "IMPOSTOS" + documento + "-" + dataMovimento;
                                }

                                nomeOrigem = stringNormalizer(nomeOrigem, true);

                                if(chave.length() > 200)  chave = chave.substring(0, 200);
                                String key = chave  + "-CTB";

                                histobj = new JSONObject();

                                histobj.put("complemento02", complemento02);
                                histobj.put("tipoPlanilha", tipoPlanilha);

                                // logger.logInfo("CPX" + complemento02);
                                // logger.logInfo("CP2 " + complemento02);
                                if (!tipoPlanilha.contains("FOLHA_DE_PAGAMENTO") && !tipoPlanilha.contains("AAAOUTRASENTRADAS") && !tipoPlanilha.contains("PISCOFINS") && !tipoPlanilha.contains("ACORDO_COMERCIAL")) complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);

                                // logger.logInfo("CP21 " + complemento02);

                                int restoLinha = 0;
                                restoLinha = (cont % 100);
                                if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);

                                // logger.logInfo("CP22 " + complemento02);
                                // logger.logInfo(" tp stq -> " + tipoPlanilha + " | " + complemento02 + " | "  + roteiroCRM.optString("complemento02"));
                                if (tipoPlanilha.contains("PROVISAO")) {
                                    ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                    if (ttMov2 == null) {
                                        ttMov2 = new ttMovimentoPadrao();
                                        ttMov2.lote              = lote;
                                        ttMov2.documento         = documento;
                                        ttMov2.codEmpresa        = codEmpresa;
                                        ttMov2.nomeEmpresa       = nomeEmpresa;
                                        ttMov2.dataMovimento     = dataMovimento;
                                        ttMov2.tipoMovimento     = "CTB";
                                        ttMov2.tipoLancamento    = tipoLancamento;
                                        ttMov2.historico         = historico;
                                        ttMov2.contaJuros        = contaJuros;
                                        ttMov2.contaMulta        = contaMulta;
                                        ttMov2.contaDesconto     = contaDesconto;
                                        ttMov2.nomePortador      = nomePortador;
                                        ttMov2.centroCusto       = codCcOrigem;
                                        ttMov2.nomeOrigem        = nomeOrigem;
                                        ttMov2.cpfCnpj           = cpfCnpj;
                                        ttMov2.chave             = chave + "-CTB";
                                        ttMov2.classificacao     = classificacao;
                                        ttMov2.codFilial         = codFilial;
                                        ttMov2.complemento01     = complemento01;
                                        ttMov2.complemento02     = complemento02 + " COLUNA D";
                                        ttMov2.complemento03     = complemento03;
                                        ttMov2.complemento04     = complemento04;
                                        ttMov2.complemento05     = complemento05;
                                        ttMov2.complemento06     = complemento06;
                                        ttMov2.complemento07     = complemento07;
                                        ttMov2.complemento08     = complemento08;
                                        ttMov2.complemento09     = complemento09;
                                        ttMov2.complemento10     = complemento10;
                                        ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                        ttMov2.tipoPlanilha      = tipoPlanilha;
                                        ttMov2.chaveExtrato      = chaveExtrato;
                                        ttMov2.debitoCredito     = debitoCredito;
                                        ttMov2.historicoMulta    = "";
                                        ttMov2.historicoJuros    = "";
                                        ttMov2.historicoDesconto = "";
                                        ttMov2.contaDebito       = "";
                                        ttMov2.contaCredito      = "";
                                        ttMov2.naturezaContabil  = "";
                                        ttMov2.contador 		 = 0;
                                        ttMov2.parcelaDoc        = parcelaDoc;
                                        ttMov2.abaPlanilha       = String.valueOf(porAba);
                                    }
                                    ///  -------------------------------------------------------------------------------------------------------
                                    ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                    ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                    ///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
                                    ///  -------------------------------------------------------------------------------------------------------

                                    ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                    mapaVariavel.put(key,ttMov2);
                                }

                                if (tipoPlanilha.contains("PROVISAO") && valorPort > 0) {

                                    chave = chave + "colunaL";

                                    key = chave  + "-CTB";
                                    ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                    if (ttMov2 == null) {
                                        ttMov2 = new ttMovimentoPadrao();
                                        ttMov2.lote              = lote;
                                        ttMov2.documento         = documento;
                                        ttMov2.codEmpresa        = codEmpresa;
                                        ttMov2.nomeEmpresa       = nomeEmpresa;
                                        ttMov2.dataMovimento     = dataMovimento;
                                        ttMov2.tipoMovimento     = "CTB";
                                        ttMov2.tipoLancamento    = tipoLancamento;
                                        ttMov2.historico         = historico;
                                        ttMov2.contaJuros        = contaJuros;
                                        ttMov2.contaMulta        = contaMulta;
                                        ttMov2.contaDesconto     = contaDesconto;
                                        ttMov2.nomePortador      = nomePortador;
                                        ttMov2.centroCusto       = codCcOrigem;
                                        ttMov2.nomeOrigem        = nomeOrigem;
                                        ttMov2.cpfCnpj           = cpfCnpj;
                                        ttMov2.chave             = chave + "-CTB";
                                        ttMov2.classificacao     = classificacao;
                                        ttMov2.codFilial         = codFilial;
                                        ttMov2.complemento01     = complemento01;
                                        ttMov2.complemento02     = complemento02 + " COLUNA M";
                                        ttMov2.complemento03     = complemento03;
                                        ttMov2.complemento04     = complemento04;
                                        ttMov2.complemento05     = complemento05;
                                        ttMov2.complemento06     = complemento06;
                                        ttMov2.complemento07     = complemento07;
                                        ttMov2.complemento08     = complemento08;
                                        ttMov2.complemento09     = complemento09;
                                        ttMov2.complemento10     = complemento10;
                                        ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                        ttMov2.tipoPlanilha      = tipoPlanilha;
                                        ttMov2.chaveExtrato      = chaveExtrato;
                                        ttMov2.debitoCredito     = debitoCredito;
                                        ttMov2.historicoMulta    = "";
                                        ttMov2.historicoJuros    = "";
                                        ttMov2.historicoDesconto = "";
                                        ttMov2.contaDebito       = "";
                                        ttMov2.contaCredito      = "";
                                        ttMov2.naturezaContabil  = "";
                                        ttMov2.contador 		 = 0;
                                        ttMov2.parcelaDoc        = parcelaDoc;
                                        ttMov2.abaPlanilha       = String.valueOf(porAba);
                                    }




                                    ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorPort;
                                    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                    mapaVariavel.put(key,ttMov2);
                                }


                                if (tipoPlanilha.contains("MOVIMENTO") || tipoPlanilha.contains("AAAOUTRASENTRADAS") || tipoPlanilha.contains("ACORDO_COMERCIAL")) {
                                    ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                    if (ttMov2 == null) {
                                        ttMov2 = new ttMovimentoPadrao();
                                        ttMov2.lote              = lote;
                                        ttMov2.documento         = documento;
                                        ttMov2.codEmpresa        = codEmpresa;
                                        ttMov2.nomeEmpresa       = nomeEmpresa;
                                        ttMov2.dataMovimento     = dataMovimento;
                                        ttMov2.tipoMovimento     = "CTB";
                                        ttMov2.tipoLancamento    = tipoLancamento;
                                        ttMov2.historico         = historico;
                                        ttMov2.contaJuros        = contaJuros;
                                        ttMov2.contaMulta        = contaMulta;
                                        ttMov2.contaDesconto     = contaDesconto;
                                        ttMov2.nomePortador      = nomePortador;
                                        ttMov2.centroCusto       = codCcOrigem;
                                        ttMov2.nomeOrigem        = nomeOrigem;
                                        ttMov2.cpfCnpj           = cpfCnpj;
                                        ttMov2.chave             = chave + "-CTB";
                                        ttMov2.classificacao     = classificacao;
                                        ttMov2.codFilial         = codFilial;
                                        ttMov2.complemento01     = complemento01;
                                        ttMov2.complemento02     = complemento02;
                                        ttMov2.complemento03     = complemento03;
                                        ttMov2.complemento04     = complemento04;
                                        ttMov2.complemento05     = complemento05;
                                        ttMov2.complemento06     = complemento06;
                                        ttMov2.complemento07     = complemento07;
                                        ttMov2.complemento08     = complemento08;
                                        ttMov2.complemento09     = complemento09;
                                        ttMov2.complemento10     = complemento10;
                                        ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                        ttMov2.tipoPlanilha      = tipoPlanilha;
                                        ttMov2.chaveExtrato      = chaveExtrato;
                                        ttMov2.debitoCredito     = debitoCredito;
                                        ttMov2.historicoMulta    = "";
                                        ttMov2.historicoJuros    = "";
                                        ttMov2.historicoDesconto = "";
                                        ttMov2.contaDebito       = "";
                                        ttMov2.contaCredito      = "";
                                        ttMov2.naturezaContabil  = "";
                                        ttMov2.contador 		 = 0;
                                        ttMov2.parcelaDoc        = parcelaDoc;
                                        ttMov2.abaPlanilha       = String.valueOf(porAba);
                                    }

                                    ///  -------------------------------------------------------------------------------------------------------
                                    ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                    ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                    ///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
                                    ///  -------------------------------------------------------------------------------------------------------
                                    //  ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    //    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    //    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    //    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;


                                    if (complemento01.contains("VERBA FORNECEDORES") && !tipoPlanilha.contains("ACORDO_COMERCIAL")) {
                                        ttMov2.complemento01 = ttMov2.complemento01 + "-" + complemento01;
                                    }
                                    //logger.logInfo("SASLVANDO O MOVIMENTO " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
                                    // else {
                                    ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;
                                    // }

                                    // logger.logInfo("CPSS " + ttMov2.complemento02 + " | " + complemento02);
                                    mapaVariavel.put(key,ttMov2);
                                }

                                if (tipoPlanilha.contains("BRINDES")) {
                                    ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                    if (ttMov2 == null) {
                                        ttMov2 = new ttMovimentoPadrao();
                                        ttMov2.lote              = lote;
                                        ttMov2.documento         = documento;
                                        ttMov2.codEmpresa        = codEmpresa;
                                        ttMov2.nomeEmpresa       = nomeEmpresa;
                                        ttMov2.dataMovimento     = dataMovimento;
                                        ttMov2.tipoMovimento     = "CTB";
                                        ttMov2.tipoLancamento    = tipoLancamento;
                                        ttMov2.historico         = historico;
                                        ttMov2.contaJuros        = contaJuros;
                                        ttMov2.contaMulta        = contaMulta;
                                        ttMov2.contaDesconto     = contaDesconto;
                                        ttMov2.nomePortador      = nomePortador;
                                        ttMov2.centroCusto       = codCcOrigem;
                                        ttMov2.nomeOrigem        = nomeOrigem;
                                        ttMov2.cpfCnpj           = cpfCnpj;
                                        ttMov2.chave             = chave + "-CTB";
                                        ttMov2.classificacao     = classificacao;
                                        ttMov2.codFilial         = codFilial;
                                        ttMov2.complemento01     = complemento01;
                                        ttMov2.complemento02     = complemento02;
                                        ttMov2.complemento03     = complemento03;
                                        ttMov2.complemento04     = complemento04;
                                        ttMov2.complemento05     = complemento05;
                                        ttMov2.complemento06     = complemento06;
                                        ttMov2.complemento07     = complemento07;
                                        ttMov2.complemento08     = complemento08;
                                        ttMov2.complemento09     = complemento09;
                                        ttMov2.complemento10     = complemento10;
                                        ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                        ttMov2.tipoPlanilha      = tipoPlanilha;
                                        ttMov2.chaveExtrato      = chaveExtrato;
                                        ttMov2.debitoCredito     = debitoCredito;
                                        ttMov2.historicoMulta    = "";
                                        ttMov2.historicoJuros    = "";
                                        ttMov2.historicoDesconto = "";
                                        ttMov2.contaDebito       = "";
                                        ttMov2.contaCredito      = "";
                                        ttMov2.naturezaContabil  = "";
                                        ttMov2.contador 		 = 0;
                                        ttMov2.parcelaDoc        = parcelaDoc;
                                        ttMov2.abaPlanilha       = String.valueOf(porAba);
                                    }

                                    ///  -------------------------------------------------------------------------------------------------------
                                    ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                    ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                    ///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
                                    ///  -------------------------------------------------------------------------------------------------------
                                    //  ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    //    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    //    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    //    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                    logger.logInfo("SASLVANDO O BRINDES " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
                                    // else {
                                    ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;
                                    // }

                                    // logger.logInfo("CPSS " + ttMov2.complemento02 + " | " + complemento02);
                                    mapaVariavel.put(key,ttMov2);
                                }

                                if (tipoPlanilha.contains("ENDIVIDAMENTO")) {
                                    ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                    if (ttMov2 == null) {
                                        ttMov2 = new ttMovimentoPadrao();
                                        ttMov2.lote              = lote;
                                        ttMov2.documento         = documento;
                                        ttMov2.codEmpresa        = codEmpresa;
                                        ttMov2.nomeEmpresa       = nomeEmpresa;
                                        ttMov2.dataMovimento     = dataMovimento;
                                        ttMov2.tipoMovimento     = "CTB";
                                        ttMov2.tipoLancamento    = tipoLancamento;
                                        ttMov2.historico         = historico;
                                        ttMov2.contaJuros        = contaJuros;
                                        ttMov2.contaMulta        = contaMulta;
                                        ttMov2.contaDesconto     = contaDesconto;
                                        ttMov2.nomePortador      = nomePortador;
                                        ttMov2.centroCusto       = codCcOrigem;
                                        ttMov2.nomeOrigem        = nomeOrigem;
                                        ttMov2.cpfCnpj           = cpfCnpj;
                                        ttMov2.chave             = chave + "-CTB";
                                        ttMov2.classificacao     = classificacao;
                                        ttMov2.codFilial         = codFilial;
                                        ttMov2.complemento01     = complemento01;
                                        ttMov2.complemento02     = complemento02;
                                        ttMov2.complemento03     = complemento03;
                                        ttMov2.complemento04     = complemento04;
                                        ttMov2.complemento05     = complemento05;
                                        ttMov2.complemento06     = complemento06;
                                        ttMov2.complemento07     = complemento07;
                                        ttMov2.complemento08     = complemento08;
                                        ttMov2.complemento09     = complemento09;
                                        ttMov2.complemento10     = complemento10;
                                        ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                        ttMov2.tipoPlanilha      = tipoPlanilha;
                                        ttMov2.chaveExtrato      = chaveExtrato;
                                        ttMov2.debitoCredito     = debitoCredito;
                                        ttMov2.historicoMulta    = "";
                                        ttMov2.historicoJuros    = "";
                                        ttMov2.historicoDesconto = "";
                                        ttMov2.contaDebito       = "";
                                        ttMov2.contaCredito      = "";
                                        ttMov2.naturezaContabil  = "";
                                        ttMov2.contador 		 = 0;
                                        ttMov2.parcelaDoc        = parcelaDoc;
                                        ttMov2.abaPlanilha       = String.valueOf(porAba);
                                    }

                                    ///  -------------------------------------------------------------------------------------------------------
                                    ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                    ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                    ///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
                                    ///  -------------------------------------------------------------------------------------------------------
                                    //  ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    //    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    //    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    //    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                    ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                    ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                    ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                    ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                    mapaVariavel.put(key,ttMov2);
                                }


                                // if (tipoPlanilha.contains("ENDIVIDAMENTO")) {
                                // cont++;
                                // contLinhaTexto = String.valueOf(cont);
                                // contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                // consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

                                // classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

                                // chave = lote + "-" + String.valueOf(porAba) + "-EXTRA-JUROS-" + contLinhaTexto;
                                // key = chave  + "-CTB";
                                // ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                // try{ttTemp.valorDocumento = memFile.getDoubleField(3);}
                                // catch (Exception vlrd) { ttTemp.valorDocumento = 0; }


                                // if(ttTemp.valorDocumento > 0 ){
                                // mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "PROVISAO_JUROS", classificacao);

                                // }
                                // }



                                if (tipoPlanilha.contains("COMISSOES")) {
                                    if (valorDocumento1 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COMISSOES" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem;
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "COMISSOES";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento1;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                }

                                if (tipoPlanilha.contains("PESSOA_FISICA")) {
                                    if (valorDocumento1 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLUNAA" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem;
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = complemento02;
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = "";
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento1;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                    if (valorDocumento2 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLUNAB" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = complemento05;
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = complemento02;
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = "COFINS";
                                            ttMov2.complemento06     = tipoPlanilha;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento2;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                }

                                if (tipoPlanilha.contains("PRO_LABORE")) {
                                    if (valorDocumento1 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLUNAA" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = "PRO-LABORE";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento1;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                    if (valorDocumento2 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLUNAB" + contLinhaTexto;
                                        key =  chave;


                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = complemento02;
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento2;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                }

                                if (tipoPlanilha.contains("INSS")) {
                                    if (valorDocumento1 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLABORADORES" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " COLABORADORES";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "COLABORADORES";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento1;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                    if (valorDocumento2 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-DIRETORES" + contLinhaTexto;
                                        key =  chave;


                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " DIRETORES";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "DIRETORES";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento2;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    if (valorDocumento3 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-TERCEIROS-" + contLinhaTexto;
                                        key =  chave;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " TERCEIROS";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "TERCEIROS";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento3;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    if (valorDocumento4 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COOPERATIVAS-" + contLinhaTexto;
                                        key =  chave;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " COOPERATIVAS";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "COOPERATIVAS";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento4;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    if (valorDocumento5 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-PRODUCAO-" + contLinhaTexto;
                                        key =  chave;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " PRODUCAO";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "PRODUCAO";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento5;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    if (valorDocumento6 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-RETENCAO-" + contLinhaTexto;
                                        key =  chave;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " RETENCAO";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "RETENCAO";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento6;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    if (valorDocumento7 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COMPENSACAO-" + contLinhaTexto;
                                        key =  chave;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " COMPENSACAO";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "COMPENSACAO";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento7;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    if (valorDocumento8 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-TOTAL-" + contLinhaTexto;
                                        key =  chave;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = "";
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem + " TOTAL";
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = "TOTAL";
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento8;
                                        ttMov2.valorDesconto    = 0;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = 0;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                }

                                if (tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")) {

                                    // if (line.contains("INSS") && line.contains("200.002.002.002"))

                                    // logger.logInfo("LENDO VALORES " + valorDocumento + "<<>>" + nomeOrigem + "<<>>" +
                                    // key + "<<>>" + valorDocumento);



                                    if(valorDocumento > 0 && !nomeOrigem.equals("")){
                                        segundaLinha = true;
                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = documento;
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = historico;
                                            ttMov2.contaJuros        = contaJuros;
                                            ttMov2.contaMulta        = contaMulta;
                                            ttMov2.contaDesconto     = contaDesconto;
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = codCcOrigem;
                                            ttMov2.nomeOrigem        = nomeOrigem;
                                            ttMov2.cpfCnpj           = cpfCnpj;
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = codFilial;
                                            ttMov2.complemento01     = complemento06;
                                            ttMov2.complemento02     = complemento02;
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = complemento05;
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = chaveExtrato;
                                            ttMov2.debitoCredito     = debitoCredito;
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "";
                                            ttMov2.contador 		 = 0;
                                            ttMov2.parcelaDoc        = parcelaDoc;

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMov2.complemnto02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                        ttMov2.valorDesconto    = ttMov2.valorDesconto   + 0;
                                        ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                        ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                        // if(complemento01.contains("C"))
                                        // ttMov2.tipoMovimento = "CTBPORT";
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                    // if(valorPort > 0 && !nomePortador.equals("")){

                                    // key = chave  + "-CTB2";

                                    // ttMovimentoPadrao ttMov3     = (ttMovimentoPadrao)mapaVariavel.get(key);

                                    // if (ttMov3 == null) {
                                    // ttMov3 = new ttMovimentoPadrao();
                                    // ttMov3.lote              = lote;
                                    // ttMov3.documento         = documento;
                                    // ttMov3.codEmpresa        = codEmpresa;
                                    // ttMov3.nomeEmpresa       = nomeEmpresa;
                                    // ttMov3.dataMovimento     = dataMovimento;
                                    // ttMov3.tipoMovimento     = "CTB";
                                    // ttMov3.tipoLancamento    = tipoLancamento;
                                    // ttMov3.historico         = historico;
                                    // ttMov3.contaJuros        = contaJuros;
                                    // ttMov3.contaMulta        = contaMulta;
                                    // ttMov3.contaDesconto     = contaDesconto;
                                    // ttMov3.nomePortador      = nomePortador;
                                    // ttMov3.centroCusto       = codCcOrigem;
                                    // ttMov3.nomeOrigem        = nomePortador;		//alterado
                                    // ttMov3.cpfCnpj           = cpfCnpj;
                                    // ttMov3.chave             = chave + "-CTB2";
                                    // ttMov3.classificacao     = classificacao;
                                    // ttMov3.codFilial         = codFilial;
                                    // ttMov3.complemento01     = complemento09;
                                    // ttMov3.complemento02     = "CREDITO";
                                    // ttMov3.complemento03     = complemento03;
                                    // ttMov3.complemento04     = complemento04;
                                    // ttMov3.complemento05     = complemento05;
                                    // ttMov3.complemento06     = complemento10;		//alterado
                                    // ttMov3.complemento07     = complemento07;
                                    // ttMov3.complemento08     = complemento08;
                                    // ttMov3.complemento09     = complemento09;
                                    // ttMov3.complemento10     = complemento10;
                                    // ttMov3.nomeArquivo       = nomeArquivo.toUpperCase();
                                    // ttMov3.tipoPlanilha      = tipoPlanilha;
                                    // ttMov3.chaveExtrato      = chaveExtrato;
                                    // ttMov3.debitoCredito     = debitoCredito;
                                    // ttMov3.historicoMulta    = "";
                                    // ttMov3.historicoJuros    = "";
                                    // ttMov3.historicoDesconto = "";
                                    // ttMov3.contaDebito       = "";
                                    // ttMov3.contaCredito      = "";
                                    // ttMov3.naturezaContabil  = "";
                                    // ttMov3.contador 		 = 0;
                                    // ttMov3.parcelaDoc        = parcelaDoc;
                                    // }

                                    // /  -------------------------------------------------------------------------------------------------------
                                    // /	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                    // /  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                    // /  if (!complemento02.equals("")) ttMov3.complemnto02 = complemento02;
                                    // /  -------------------------------------------------------------------------------------------------------

                                    // ttMov3.valorDocumento   = ttMov3.valorDocumento	+ valorPort;
                                    // ttMov3.valorDesconto    = ttMov3.valorDesconto	+ valorDesconto;
                                    // ttMov3.valorMulta       = ttMov3.valorMulta		+ valorMulta;
                                    // ttMov3.valorJuros       = ttMov3.valorJuros		+ valorJuros;

                                    // mapaVariavel.put(key,ttMov3);
                                    // }
                                }


                                if (tipoPlanilha.contains("VERBAS")) {
                                    logger.logInfo("VD VALOR 1 -> " + valorDocumento1 + " VD valor 2 -> " + valorDocumento2);
                                    if (valorDocumento1 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLUNAA" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = documento;
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem;
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = complemento02;
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = "PRINCIPAL";
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = contadorVerbas;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento1;
                                        ttMov2.valorDesconto    = ttMov2.valorDesconto + valorDesconto;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = ttMov2.valorJuros + valorJuros;
                                        mapaVariavel.put(key,ttMov2);
                                    }
                                    if (valorDocumento2 > 0) {
                                        chave = lote + "-" + String.valueOf(porAba) + "-COLUNAB" + contLinhaTexto;
                                        key =  chave;

                                        ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMov2 == null) {
                                            ttMov2 = new ttMovimentoPadrao();
                                            ttMov2.lote              = lote;
                                            ttMov2.documento         = documento;
                                            ttMov2.codEmpresa        = codEmpresa;
                                            ttMov2.nomeEmpresa       = nomeEmpresa;
                                            ttMov2.dataMovimento     = dataMovimento;
                                            ttMov2.tipoMovimento     = "CTB";
                                            ttMov2.tipoLancamento    = tipoLancamento;
                                            ttMov2.historico         = "";
                                            ttMov2.contaJuros        = "";
                                            ttMov2.contaMulta        = "";
                                            ttMov2.contaDesconto     = "";
                                            ttMov2.nomePortador      = nomePortador;
                                            ttMov2.centroCusto       = "";
                                            ttMov2.nomeOrigem        = nomeOrigem;
                                            ttMov2.cpfCnpj           = "";
                                            ttMov2.chave             = chave + "-CTB";
                                            ttMov2.classificacao     = classificacao;
                                            ttMov2.codFilial         = "";
                                            ttMov2.complemento01     = complemento01;
                                            ttMov2.complemento02     = complemento02;
                                            ttMov2.complemento03     = complemento03;
                                            ttMov2.complemento04     = complemento04;
                                            ttMov2.complemento05     = "CRED";
                                            ttMov2.complemento06     = complemento06;
                                            ttMov2.complemento07     = complemento07;
                                            ttMov2.complemento08     = complemento08;
                                            ttMov2.complemento09     = complemento09;
                                            ttMov2.complemento10     = complemento10;
                                            ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMov2.tipoPlanilha      = tipoPlanilha;
                                            ttMov2.chaveExtrato      = "";
                                            ttMov2.debitoCredito     = "";
                                            ttMov2.historicoMulta    = "";
                                            ttMov2.historicoJuros    = "";
                                            ttMov2.historicoDesconto = "";
                                            ttMov2.contaDebito       = "";
                                            ttMov2.contaCredito      = "";
                                            ttMov2.naturezaContabil  = "D";
                                            ttMov2.contador 		 = contadorVerbas;
                                            ttMov2.parcelaDoc        = parcelaDoc;
                                            ttMov2.abaPlanilha       = String.valueOf(porAba);
                                        }

                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento2;
                                        ttMov2.valorDesconto    = ttMov2.valorDesconto + valorDesconto;
                                        ttMov2.valorMulta       = 0;
                                        ttMov2.valorJuros       = ttMov2.valorJuros + valorJuros;
                                        mapaVariavel.put(key,ttMov2);
                                    }

                                }



                                if(tipoPlanilha.contains("SERVICO")){


                                    if(vliss>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-ISS";

                                        ttMovimentoPadrao ttMovIss      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovIss == null) {
                                            ttMovIss = new ttMovimentoPadrao();
                                            ttMovIss.lote              = lote;
                                            ttMovIss.codEmpresa        = codEmpresa;
                                            ttMovIss.nomeEmpresa       = nomeEmpresa;
                                            ttMovIss.dataMovimento     = dataMovimento;
                                            ttMovIss.tipoMovimento     = "CTBPORT";
                                            ttMovIss.tipoLancamento    = tipoLancamento;
                                            ttMovIss.historico         = historico;
                                            ttMovIss.contaJuros        = contaJuros;
                                            ttMovIss.contaMulta        = contaMulta;
                                            ttMovIss.contaDesconto     = contaDesconto;
                                            ttMovIss.centroCusto       = codCcOrigem;
                                            ttMovIss.cpfCnpj           = cpfCnpj;
                                            ttMovIss.chave             = chave + "-ISS";
                                            ttMovIss.classificacao     = classificacao;
                                            ttMovIss.codFilial         = codFilial;
                                            ttMovIss.complemento07     = complemento07;
                                            ttMovIss.complemento08     = complemento08;
                                            ttMovIss.complemento09     = complemento09;
                                            ttMovIss.complemento10     = complemento10;
                                            ttMovIss.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovIss.tipoPlanilha      = tipoPlanilha;
                                            ttMovIss.chaveExtrato      = chaveExtrato;
                                            ttMovIss.debitoCredito     = debitoCredito;
                                            ttMovIss.historicoMulta    = "";
                                            ttMovIss.historicoJuros    = "";
                                            ttMovIss.historicoDesconto = "";
                                            ttMovIss.contaDebito       = "";
                                            ttMovIss.contaCredito      = "";
                                            ttMovIss.naturezaContabil  = "";
                                            ttMovIss.contador 		   = 4;
                                            ttMovIss.parcelaDoc        = parcelaDoc;
                                            ttMovIss.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovIss.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovIss.nomeOrigem    = (ttMovIss.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovIss.documento	  = (ttMovIss.documento + " " + documento).trim();
                                        ttMovIss.nomePortador  = (ttMovIss.nomePortador  + " " + nomePortador).trim()  + "-ISS";
                                        ttMovIss.complemento01 = (ttMovIss.complemento01 + " " + complemento01).trim();
                                        ttMovIss.complemento02 = "VLISS";
                                        ttMovIss.complemento03 = (ttMovIss.complemento03 + " " + complemento03).trim();
                                        ttMovIss.complemento04 = (ttMovIss.complemento04 + " " + complemento04).trim();
                                        ttMovIss.complemento05 = (ttMovIss.complemento05 + " " + complemento05).trim();
                                        ttMovIss.complemento06 = (ttMovIss.complemento06 + " " + complemento06).trim();

                                        ttMovIss.valorDocumento   = ttMovIss.valorDocumento  + vliss;
                                        ttMovIss.valorDesconto    = ttMovIss.valorDesconto   + valorDesconto;
                                        ttMovIss.valorMulta       = ttMovIss.valorMulta      + valorMulta;
                                        ttMovIss.valorJuros       = ttMovIss.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovIss);
                                    }
                                    if(vlcsrf>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-CSRF";

                                        ttMovimentoPadrao ttMovCsrf      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovCsrf == null) {
                                            ttMovCsrf = new ttMovimentoPadrao();
                                            ttMovCsrf.lote              = lote;
                                            ttMovCsrf.codEmpresa        = codEmpresa;
                                            ttMovCsrf.nomeEmpresa       = nomeEmpresa;
                                            ttMovCsrf.dataMovimento     = dataMovimento;
                                            ttMovCsrf.tipoMovimento     = "CTBPORT";
                                            ttMovCsrf.tipoLancamento    = tipoLancamento;
                                            ttMovCsrf.historico         = historico;
                                            ttMovCsrf.contaJuros        = contaJuros;
                                            ttMovCsrf.contaMulta        = contaMulta;
                                            ttMovCsrf.contaDesconto     = contaDesconto;
                                            ttMovCsrf.centroCusto       = codCcOrigem;
                                            ttMovCsrf.cpfCnpj           = cpfCnpj;
                                            ttMovCsrf.chave             = chave + "-CSRF";
                                            ttMovCsrf.classificacao     = classificacao;
                                            ttMovCsrf.codFilial         = codFilial;
                                            ttMovCsrf.complemento07     = complemento07;
                                            ttMovCsrf.complemento08     = complemento08;
                                            ttMovCsrf.complemento09     = complemento09;
                                            ttMovCsrf.complemento10     = complemento10;
                                            ttMovCsrf.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovCsrf.tipoPlanilha      = tipoPlanilha;
                                            ttMovCsrf.chaveExtrato      = chaveExtrato;
                                            ttMovCsrf.debitoCredito     = debitoCredito;
                                            ttMovCsrf.historicoMulta    = "";
                                            ttMovCsrf.historicoJuros    = "";
                                            ttMovCsrf.historicoDesconto = "";
                                            ttMovCsrf.contaDebito       = "";
                                            ttMovCsrf.contaCredito      = "";
                                            ttMovCsrf.naturezaContabil  = "";
                                            ttMovCsrf.contador 		    = 4;
                                            ttMovCsrf.parcelaDoc        = parcelaDoc;
                                            ttMovCsrf.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovCsrf.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovCsrf.nomeOrigem    = (ttMovCsrf.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovCsrf.documento	  = (ttMovCsrf.documento + " " + documento).trim();
                                        ttMovCsrf.nomePortador  = (ttMovCsrf.nomePortador  + " " + nomePortador).trim() + "-CSRF";
                                        ttMovCsrf.complemento01 = (ttMovCsrf.complemento01 + " " + complemento01).trim();
                                        ttMovCsrf.complemento02 = "VLCSRF";
                                        ttMovCsrf.complemento03 = (ttMovCsrf.complemento03 + " " + complemento03).trim();
                                        ttMovCsrf.complemento04 = (ttMovCsrf.complemento04 + " " + complemento04).trim();
                                        ttMovCsrf.complemento05 = (ttMovCsrf.complemento05 + " " + complemento05).trim();
                                        ttMovCsrf.complemento06 = (ttMovCsrf.complemento06 + " " + complemento06).trim();

                                        ttMovCsrf.valorDocumento   = ttMovCsrf.valorDocumento  + vlcsrf;
                                        ttMovCsrf.valorDesconto    = ttMovCsrf.valorDesconto   + valorDesconto;
                                        ttMovCsrf.valorMulta       = ttMovCsrf.valorMulta      + valorMulta;
                                        ttMovCsrf.valorJuros       = ttMovCsrf.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovCsrf);
                                    }
                                    if(vlirrf>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-IRRF";

                                        ttMovimentoPadrao ttMovIrrf      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovIrrf == null) {
                                            ttMovIrrf = new ttMovimentoPadrao();
                                            ttMovIrrf.lote              = lote;
                                            ttMovIrrf.codEmpresa        = codEmpresa;
                                            ttMovIrrf.nomeEmpresa       = nomeEmpresa;
                                            ttMovIrrf.dataMovimento     = dataMovimento;
                                            ttMovIrrf.tipoMovimento     = "CTBPORT";
                                            ttMovIrrf.tipoLancamento    = tipoLancamento;
                                            ttMovIrrf.historico         = historico;
                                            ttMovIrrf.contaJuros        = contaJuros;
                                            ttMovIrrf.contaMulta        = contaMulta;
                                            ttMovIrrf.contaDesconto     = contaDesconto;
                                            ttMovIrrf.centroCusto       = codCcOrigem;
                                            ttMovIrrf.cpfCnpj           = cpfCnpj;
                                            ttMovIrrf.chave             = chave + "-IRRF";
                                            ttMovIrrf.classificacao     = classificacao;
                                            ttMovIrrf.codFilial         = codFilial;
                                            ttMovIrrf.complemento07     = complemento07;
                                            ttMovIrrf.complemento08     = complemento08;
                                            ttMovIrrf.complemento09     = complemento09;
                                            ttMovIrrf.complemento10     = complemento10;
                                            ttMovIrrf.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovIrrf.tipoPlanilha      = tipoPlanilha;
                                            ttMovIrrf.chaveExtrato      = chaveExtrato;
                                            ttMovIrrf.debitoCredito     = debitoCredito;
                                            ttMovIrrf.historicoMulta    = "";
                                            ttMovIrrf.historicoJuros    = "";
                                            ttMovIrrf.historicoDesconto = "";
                                            ttMovIrrf.contaDebito       = "";
                                            ttMovIrrf.contaCredito      = "";
                                            ttMovIrrf.naturezaContabil  = "";
                                            ttMovIrrf.contador 		    = 4;
                                            ttMovIrrf.parcelaDoc        = parcelaDoc;
                                            ttMovIrrf.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovIrrf.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovIrrf.nomeOrigem    = (ttMovIrrf.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovIrrf.documento	  = (ttMovIrrf.documento + " " + documento).trim();
                                        ttMovIrrf.nomePortador  = (ttMovIrrf.nomePortador  + " " + nomePortador).trim()+ "-IRRF";
                                        ttMovIrrf.complemento01 = (ttMovIrrf.complemento01 + " " + complemento01).trim();
                                        ttMovIrrf.complemento02 = "VLIRRF";
                                        ttMovIrrf.complemento03 = (ttMovIrrf.complemento03 + " " + complemento03).trim();
                                        ttMovIrrf.complemento04 = (ttMovIrrf.complemento04 + " " + complemento04).trim();
                                        ttMovIrrf.complemento05 = (ttMovIrrf.complemento05 + " " + complemento05).trim();
                                        ttMovIrrf.complemento06 = (ttMovIrrf.complemento06 + " " + complemento06).trim();

                                        ttMovIrrf.valorDocumento   = ttMovIrrf.valorDocumento  + vlirrf;
                                        ttMovIrrf.valorDesconto    = ttMovIrrf.valorDesconto   + valorDesconto;
                                        ttMovIrrf.valorMulta       = ttMovIrrf.valorMulta      + valorMulta;
                                        ttMovIrrf.valorJuros       = ttMovIrrf.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovIrrf);
                                    }
                                    if(vlinss>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-INSS";

                                        ttMovimentoPadrao ttMovInss      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovInss == null) {
                                            ttMovInss = new ttMovimentoPadrao();
                                            ttMovInss.lote              = lote;
                                            ttMovInss.codEmpresa        = codEmpresa;
                                            ttMovInss.nomeEmpresa       = nomeEmpresa;
                                            ttMovInss.dataMovimento     = dataMovimento;
                                            ttMovInss.tipoMovimento     = "CTBPORT";
                                            ttMovInss.tipoLancamento    = tipoLancamento;
                                            ttMovInss.historico         = historico;
                                            ttMovInss.contaJuros        = contaJuros;
                                            ttMovInss.contaMulta        = contaMulta;
                                            ttMovInss.contaDesconto     = contaDesconto;
                                            ttMovInss.centroCusto       = codCcOrigem;
                                            ttMovInss.cpfCnpj           = cpfCnpj;
                                            ttMovInss.chave             = chave + "-INSS";
                                            ttMovInss.classificacao     = classificacao;
                                            ttMovInss.codFilial         = codFilial;
                                            ttMovInss.complemento07     = complemento07;
                                            ttMovInss.complemento08     = complemento08;
                                            ttMovInss.complemento09     = complemento09;
                                            ttMovInss.complemento10     = complemento10;
                                            ttMovInss.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovInss.tipoPlanilha      = tipoPlanilha;
                                            ttMovInss.chaveExtrato      = chaveExtrato;
                                            ttMovInss.debitoCredito     = debitoCredito;
                                            ttMovInss.historicoMulta    = "";
                                            ttMovInss.historicoJuros    = "";
                                            ttMovInss.historicoDesconto = "";
                                            ttMovInss.contaDebito       = "";
                                            ttMovInss.contaCredito      = "";
                                            ttMovInss.naturezaContabil  = "";
                                            ttMovInss.contador 		    = 4;
                                            ttMovInss.parcelaDoc        = parcelaDoc;
                                            ttMovInss.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovInss.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovInss.nomeOrigem    = (ttMovInss.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovInss.documento	  = (ttMovInss.documento + " " + documento).trim();
                                        ttMovInss.nomePortador  = (ttMovInss.nomePortador  + " " + nomePortador).trim() + "-INSS";
                                        ttMovInss.complemento01 = (ttMovInss.complemento01 + " " + complemento01).trim();
                                        ttMovInss.complemento02 = "VLINSS";
                                        ttMovInss.complemento03 = (ttMovInss.complemento03 + " " + complemento03).trim();
                                        ttMovInss.complemento04 = (ttMovInss.complemento04 + " " + complemento04).trim();
                                        ttMovInss.complemento05 = (ttMovInss.complemento05 + " " + complemento05).trim();
                                        ttMovInss.complemento06 = (ttMovInss.complemento06 + " " + complemento06).trim();

                                        ttMovInss.valorDocumento   = ttMovInss.valorDocumento  + vlinss;
                                        ttMovInss.valorDesconto    = ttMovInss.valorDesconto   + valorDesconto;
                                        ttMovInss.valorMulta       = ttMovInss.valorMulta      + valorMulta;
                                        ttMovInss.valorJuros       = ttMovInss.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovInss);
                                    }
                                    if(valorDocumento>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-DOCUMENTO";

                                        ttMovimentoPadrao ttMovDocumentoImposto      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovDocumentoImposto == null) {
                                            ttMovDocumentoImposto = new ttMovimentoPadrao();
                                            ttMovDocumentoImposto.lote              = lote;
                                            ttMovDocumentoImposto.codEmpresa        = codEmpresa;
                                            ttMovDocumentoImposto.nomeEmpresa       = nomeEmpresa;
                                            ttMovDocumentoImposto.dataMovimento     = dataMovimento;
                                            ttMovDocumentoImposto.tipoMovimento     = "CTB";
                                            ttMovDocumentoImposto.tipoLancamento    = tipoLancamento;
                                            ttMovDocumentoImposto.historico         = historico;
                                            ttMovDocumentoImposto.contaJuros        = contaJuros;
                                            ttMovDocumentoImposto.contaMulta        = contaMulta;
                                            ttMovDocumentoImposto.contaDesconto     = contaDesconto;
                                            ttMovDocumentoImposto.centroCusto       = codCcOrigem;
                                            ttMovDocumentoImposto.cpfCnpj           = cpfCnpj;
                                            ttMovDocumentoImposto.chave             = chave + "-DOCUMENTO";
                                            ttMovDocumentoImposto.classificacao     = classificacao;
                                            ttMovDocumentoImposto.codFilial         = codFilial;
                                            ttMovDocumentoImposto.complemento07     = complemento07;
                                            ttMovDocumentoImposto.complemento08     = complemento08;
                                            ttMovDocumentoImposto.complemento09     = complemento09;
                                            ttMovDocumentoImposto.complemento10     = complemento10;
                                            ttMovDocumentoImposto.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovDocumentoImposto.tipoPlanilha      = tipoPlanilha;
                                            ttMovDocumentoImposto.chaveExtrato      = chaveExtrato;
                                            ttMovDocumentoImposto.debitoCredito     = debitoCredito;
                                            ttMovDocumentoImposto.historicoMulta    = "";
                                            ttMovDocumentoImposto.historicoJuros    = "";
                                            ttMovDocumentoImposto.historicoDesconto = "";
                                            ttMovDocumentoImposto.contaDebito       = "";
                                            ttMovDocumentoImposto.contaCredito      = "";
                                            ttMovDocumentoImposto.naturezaContabil  = "";
                                            ttMovDocumentoImposto.contador 		    = 4;
                                            ttMovDocumentoImposto.parcelaDoc        = parcelaDoc;
                                            ttMovDocumentoImposto.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovDocumentoImposto.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovDocumentoImposto.nomeOrigem    = (ttMovDocumentoImposto.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovDocumentoImposto.documento	  = (ttMovDocumentoImposto.documento + " " + documento).trim();
                                        ttMovDocumentoImposto.nomePortador  = (ttMovDocumentoImposto.nomePortador  + " " + nomePortador).trim()+ "-DOCUMENTO";
                                        ttMovDocumentoImposto.complemento01 = (ttMovDocumentoImposto.complemento01 + " " + complemento01).trim();
                                        ttMovDocumentoImposto.complemento02 = (ttMovDocumentoImposto.complemento02 + " " + complemento02).trim();
                                        ttMovDocumentoImposto.complemento03 = (ttMovDocumentoImposto.complemento03 + " " + complemento03).trim();
                                        ttMovDocumentoImposto.complemento04 = (ttMovDocumentoImposto.complemento04 + " " + complemento04).trim();
                                        ttMovDocumentoImposto.complemento05 = (ttMovDocumentoImposto.complemento05 + " " + complemento05).trim();
                                        ttMovDocumentoImposto.complemento06 = (ttMovDocumentoImposto.complemento06 + " " + complemento06).trim();
                                        ttMovDocumentoImposto.complemento08 = "FORNECEDOR";

                                        ttMovDocumentoImposto.valorDocumento   = ttMovDocumentoImposto.valorDocumento  + valorDocumento - (vliss+vlcsrf+vlinss+vlirrf);
                                        ttMovDocumentoImposto.valorDesconto    = ttMovDocumentoImposto.valorDesconto   + valorDesconto;
                                        ttMovDocumentoImposto.valorMulta       = ttMovDocumentoImposto.valorMulta      + valorMulta;
                                        ttMovDocumentoImposto.valorJuros       = ttMovDocumentoImposto.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovDocumentoImposto);
                                    }
                                    if(valorDocumento>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-PORT";

                                        ttMovimentoPadrao ttMovDocumento = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovDocumento == null) {
                                            ttMovDocumento = new ttMovimentoPadrao();
                                            ttMovDocumento.lote              = lote;
                                            ttMovDocumento.codEmpresa        = codEmpresa;
                                            ttMovDocumento.nomeEmpresa       = nomeEmpresa;
                                            ttMovDocumento.dataMovimento     = dataMovimento;
                                            ttMovDocumento.tipoMovimento     = "CTBPORT";
                                            ttMovDocumento.tipoLancamento    = tipoLancamento;
                                            ttMovDocumento.historico         = historico;
                                            ttMovDocumento.contaJuros        = contaJuros;
                                            ttMovDocumento.contaMulta        = contaMulta;
                                            ttMovDocumento.contaDesconto     = contaDesconto;
                                            ttMovDocumento.centroCusto       = codCcOrigem;
                                            ttMovDocumento.cpfCnpj           = cpfCnpj;
                                            ttMovDocumento.chave             = chave + "-PORT";
                                            ttMovDocumento.classificacao     = classificacao;
                                            ttMovDocumento.codFilial         = codFilial;
                                            ttMovDocumento.complemento07     = complemento07;
                                            ttMovDocumento.complemento08     = complemento08;
                                            ttMovDocumento.complemento09     = complemento09;
                                            ttMovDocumento.complemento10     = complemento10;
                                            ttMovDocumento.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovDocumento.tipoPlanilha      = tipoPlanilha;
                                            ttMovDocumento.chaveExtrato      = chaveExtrato;
                                            ttMovDocumento.debitoCredito     = debitoCredito;
                                            ttMovDocumento.historicoMulta    = "";
                                            ttMovDocumento.historicoJuros    = "";
                                            ttMovDocumento.historicoDesconto = "";
                                            ttMovDocumento.contaDebito       = "";
                                            ttMovDocumento.contaCredito      = "";
                                            ttMovDocumento.naturezaContabil  = "";
                                            ttMovDocumento.contador 		 = 4;
                                            ttMovDocumento.parcelaDoc        = parcelaDoc;
                                            ttMovDocumento.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovDocumento.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovDocumento.nomeOrigem    = (ttMovDocumento.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovDocumento.documento	  = (ttMovDocumento.documento + " " + documento).trim();
                                        ttMovDocumento.nomePortador  = (ttMovDocumento.nomePortador  + " " + nomePortador).trim();
                                        ttMovDocumento.complemento01 = (ttMovDocumento.complemento01 + " " + complemento01).trim();
                                        ttMovDocumento.complemento02 = (ttMovDocumento.complemento02 + " " + complemento02).trim();
                                        ttMovDocumento.complemento03 = (ttMovDocumento.complemento03 + " " + complemento03).trim();
                                        ttMovDocumento.complemento04 = (ttMovDocumento.complemento04 + " " + complemento04).trim();
                                        ttMovDocumento.complemento05 = (ttMovDocumento.complemento05 + " " + complemento05).trim();
                                        ttMovDocumento.complemento06 = (ttMovDocumento.complemento06 + " " + complemento06).trim();

                                        ttMovDocumento.valorDocumento   = ttMovDocumento.valorDocumento  + valorDocumento;
                                        ttMovDocumento.valorDesconto    = ttMovDocumento.valorDesconto   + valorDesconto;
                                        ttMovDocumento.valorMulta       = ttMovDocumento.valorMulta      + valorMulta;
                                        ttMovDocumento.valorJuros       = ttMovDocumento.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovDocumento);
                                    }
                                }

                                if(tipoPlanilha.contains("PISCOFINS")) {

                                    if(valorDocumento1>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-PIS";


                                        ttMovimentoPadrao ttMovIss      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovIss == null) {
                                            ttMovIss = new ttMovimentoPadrao();
                                            ttMovIss.lote              = lote;
                                            ttMovIss.codEmpresa        = codEmpresa;
                                            ttMovIss.nomeEmpresa       = nomeEmpresa;
                                            ttMovIss.dataMovimento     = dataMovimento;
                                            ttMovIss.tipoMovimento     = "CTB";
                                            if (!depoisTotal) {
                                                ttMovIss.tipoMovimento     = "CTB";
                                            } else {
                                                ttMovIss.tipoMovimento     = "CTBPORT";
                                            }
                                            ttMovIss.tipoLancamento    = tipoLancamento;
                                            ttMovIss.historico         = historico;
                                            ttMovIss.contaJuros        = contaJuros;
                                            ttMovIss.contaMulta        = contaMulta;
                                            ttMovIss.contaDesconto     = contaDesconto;
                                            ttMovIss.centroCusto       = codCcOrigem;
                                            ttMovIss.cpfCnpj           = cpfCnpj;
                                            ttMovIss.chave             = chave + "-P?S";
                                            ttMovIss.classificacao     = classificacao;
                                            ttMovIss.codFilial         = codFilial;
                                            ttMovIss.complemento06	   = tipoPlanilha;
                                            ttMovIss.complemento07     = complemento07;
                                            ttMovIss.complemento08     = complemento08;
                                            ttMovIss.complemento09     = complemento09;
                                            ttMovIss.complemento10     = complemento10;
                                            ttMovIss.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovIss.tipoPlanilha      = tipoPlanilha;
                                            ttMovIss.chaveExtrato      = chaveExtrato;
                                            ttMovIss.debitoCredito     = debitoCredito;
                                            ttMovIss.historicoMulta    = "";
                                            ttMovIss.historicoJuros    = "";
                                            ttMovIss.historicoDesconto = "";
                                            ttMovIss.contaDebito       = "";
                                            ttMovIss.contaCredito      = "";
                                            ttMovIss.naturezaContabil  = "";
                                            ttMovIss.contador 		   = 4;
                                            ttMovIss.parcelaDoc        = parcelaDoc;
                                            ttMovIss.abaPlanilha       = String.valueOf(porAba);

                                        }

                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovIss.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovIss.nomeOrigem    = (ttMovIss.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovIss.documento	  = (ttMovIss.documento + " " + documento).trim();
                                        ttMovIss.nomePortador  = (ttMovIss.nomePortador  + " " + nomePortador).trim();
                                        ttMovIss.complemento01 = (ttMovIss.complemento01 + " " + complemento01).trim();
                                        ttMovIss.complemento02 = complemento02 + " PIS";
                                        ttMovIss.complemento03 = memFile.getStringField(2);
                                        // ttMovIss.complemento04 = (ttMovIss.complemento04 + " " + complemento04).trim();
                                        ttMovIss.complemento04 = complemento04.trim();
                                        ttMovIss.complemento05 = (ttMovIss.complemento05 + " " + complemento05).trim();
                                        // ttMovIss.complemento06 = (ttMovIss.complemento06 + " " + complemento06).trim();
                                        ttMovIss.complemento06 = complemento06.trim();

                                        ttMovIss.valorDocumento   = ttMovIss.valorDocumento  + valorDocumento1;
                                        ttMovIss.valorDesconto    = ttMovIss.valorDesconto   + 0;
                                        ttMovIss.valorMulta       = ttMovIss.valorMulta      + 0;
                                        ttMovIss.valorJuros       = ttMovIss.valorJuros      + 0;

                                        mapaVariavel.put(key,ttMovIss);
                                    }
                                    if(valorDocumento2>0){
                                        if(chave.length() > 200)  chave = chave.substring(0, 200);
                                        key = chave  + "-COFINS";


                                        // complemento10 = "DOC:" + String.valueOf(transacaoCofins) + "#";
                                        complemento10 = "TR:" + String.valueOf(transacaoCofins) + "#";


                                        ttMovimentoPadrao ttMovCsrf      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                        if (ttMovCsrf == null) {
                                            ttMovCsrf = new ttMovimentoPadrao();
                                            ttMovCsrf.lote              = lote;
                                            ttMovCsrf.codEmpresa        = codEmpresa;
                                            ttMovCsrf.nomeEmpresa       = nomeEmpresa;
                                            ttMovCsrf.dataMovimento     = dataMovimento;
                                            ttMovCsrf.tipoMovimento     = "CTBPORT";
                                            if (!depoisTotal) {
                                                ttMovCsrf.tipoMovimento     = "CTB";
                                            } else {
                                                ttMovCsrf.tipoMovimento     = "CTBPORT";
                                            }
                                            ttMovCsrf.tipoLancamento    = tipoLancamento;
                                            ttMovCsrf.historico         = historico;
                                            ttMovCsrf.contaJuros        = contaJuros;
                                            ttMovCsrf.contaMulta        = contaMulta;
                                            ttMovCsrf.contaDesconto     = contaDesconto;
                                            ttMovCsrf.centroCusto       = codCcOrigem;
                                            ttMovCsrf.cpfCnpj           = cpfCnpj;
                                            ttMovCsrf.chave             = chave + "-COFINS";
                                            ttMovCsrf.classificacao     = classificacao;
                                            ttMovCsrf.codFilial         = codFilial;
                                            ttMovCsrf.complemento05     = "COFINS";
                                            ttMovCsrf.complemento06     = tipoPlanilha;
                                            ttMovCsrf.complemento07     = complemento07;
                                            ttMovCsrf.complemento08     = complemento08;
                                            ttMovCsrf.complemento09     = complemento09;
                                            ttMovCsrf.complemento10     = complemento10;
                                            ttMovCsrf.nomeArquivo       = nomeArquivo.toUpperCase();
                                            ttMovCsrf.tipoPlanilha      = tipoPlanilha;
                                            ttMovCsrf.chaveExtrato      = chaveExtrato;
                                            ttMovCsrf.debitoCredito     = debitoCredito;
                                            ttMovCsrf.historicoMulta    = "";
                                            ttMovCsrf.historicoJuros    = "";
                                            ttMovCsrf.historicoDesconto = "";
                                            ttMovCsrf.contaDebito       = "";
                                            ttMovCsrf.contaCredito      = "";
                                            ttMovCsrf.naturezaContabil  = "";
                                            ttMovCsrf.contador 		    = 4;
                                            ttMovCsrf.parcelaDoc        = parcelaDoc;
                                            ttMovCsrf.abaPlanilha       = String.valueOf(porAba);

                                        }



                                        ///  -------------------------------------------------------------------------------------------------------
                                        ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                        ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                        ///  if (!complemento02.equals("")) ttMovCsrf.complemento02 = complemento02;
                                        ///  -------------------------------------------------------------------------------------------------------

                                        ttMovCsrf.nomeOrigem    = (ttMovCsrf.nomeOrigem    + " " + nomeOrigem).trim();
                                        ttMovCsrf.documento	  = (ttMovCsrf.documento + " " + documento).trim();
                                        ttMovCsrf.nomePortador  = (ttMovCsrf.nomePortador  + " " + nomePortador).trim();
                                        ttMovCsrf.complemento01 = (ttMovCsrf.complemento01 + " " + complemento01).trim();
                                        ttMovCsrf.complemento02 = complemento02/* + " COFINS"*/;
                                        // ttMovCsrf.complemento03 = memFile.getStringField(3);
                                        ttMovCsrf.complemento03 = (ttMovCsrf.complemento03 + " " + complemento03).trim();
                                        // ttMovCsrf.complemento04 = (ttMovCsrf.complemento04 + " " + complemento04).trim();
                                        ttMovCsrf.complemento04 = complemento04.trim();
                                        ttMovCsrf.complemento05 = (ttMovCsrf.complemento05 + " " + complemento05).trim();
                                        // ttMovCsrf.complemento06 = (ttMovCsrf.complemento06 + " " + complemento06).trim();
                                        ttMovCsrf.complemento06 = complemento06.trim();

                                        ttMovCsrf.valorDocumento   = ttMovCsrf.valorDocumento  + valorDocumento2;
                                        ttMovCsrf.valorDesconto    = ttMovCsrf.valorDesconto   + valorDesconto;
                                        ttMovCsrf.valorMulta       = ttMovCsrf.valorMulta      + valorMulta;
                                        ttMovCsrf.valorJuros       = ttMovCsrf.valorJuros      + valorJuros;

                                        mapaVariavel.put(key,ttMovCsrf);
                                    }

                                }

                                // logger.logInfo("CP24 " + complemento02);

                            } catch (Exception e) {
                                logger.logError("EndpointA:", e);
                            }
                        }

                    }finally {

                        /*if (memFile != null) { //closeFile
							try {memFile.closeFile(); }
							catch (Exception ex) { }
						}*/ //closeFile

                    }
                    if(!restoArquivo.toString().equals("")){
                        String filenameFolha = dirName + "/RESTANTE_FOLHA_" + tipoLancamento + ".txt";
                        // Cria o arquivo
                        FileWriter writerFolha = new FileWriter(filenameFolha);
                        writerFolha.writeNewFile(restoArquivo.toString());
                    }
                    // --------------------------------------------------------------------------------------------------------------------
                    // if tipo planilha nao igual extrato
                    // --------------------------------------------------------------------------------------------------------------------
                } // while
            }

        }
    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    }

    // logger.logInfo("EXTT " + cruzaExtrato + " | " + tipoPlanilha + " | " + Cruza_Extrato_com_Extrato);

    if (cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {

        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);
            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (cruzaExtrato.contains("TRUE")) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento);
                    recMov.put("CONTAMOVIMENTO", "");
                    recMov.put("CONTAPORTADOR", "");
                    recMov.put("CONTLINHATEXTO", String.valueOf(t));

                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);

                    if (nomeArquivo.toUpperCase().contains("FILTRO_")){
                        boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
                        if(!filtro) continue;
                    }
                    String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
                    ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;

                    String leuCnpj = "";
                    if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
                        leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);

                        if (!leuCnpj.equals("")) {
                            ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
                        }
                    }
                    if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
                        leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
                        if (!leuCnpj.equals("")) {
                            ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
                        }
                    }

                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;
                }
            }
        }
        catch (Exception xx) {
            logger.logInfo("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    }

    int contRegra = -1;

    StringBuilder txtFiscal     = new StringBuilder();
    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    String nomePortadorAnterior = "";

    jStatus = new JSONObject();
    putStatus(dirName, "", jStatus, logger);

    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            // logger.logInfo("KEY -> " + key);
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            // logger.logInfo("ECD " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito + " | " + ttMov.valorDocumento + " | " + ttMov.dataMovimento);


            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;

            if (ttMov.tipoPlanilha.contains("PISCOFINS")) {
                if (ttMov.complemento05.contains("COFINS")) ttMov.lote = "COFINS_" + ttMov.lote;
                else ttMov.lote = "PIS_" + ttMov.lote;
            }

            if (ttMov.tipoPlanilha.contains("VERBAS") && ttMov.valorDocumento == 0) continue;
            // if (ttMov.tipoPlanilha.contains("FOLHA")) classificacao = "X";
            // if (ttMov.valorDocumento == 2071.69)
            // logger.logInfo("OTT -> " + " |TP=" + ttMov2.tipoPlanilha + " |TM -> " + ttMov.tipoMovimento + " |Contador -> " + ttMov.contador + " CLASSIFICACAO -> " + classificacao);
            //sssssss

            // if (ttMov.valorDocumento == 174.08 || ttMov.valorDocumento == 87.06)

            // logger.logInfo("LENDO ii " + ttMov.dataMovimento + "<<>>" +
            // ttMov.valorDocumento + "<<>>" +  ttMov.nomePortador + "<<>>" + ttMov.complemento03);

            // logger.logInfo("CP251 " + ttMov.complemento01);


            //sergio2
            if(ttMov.tipoPlanilha.contains("VERBAS")){
                DecimalFormat formato = new DecimalFormat("#.##");
                if (ttMov.complemento05.equals("PRINCIPAL")) {
                    String chaveAjuste = ttMov.dataMovimento + "-" + ttMov.complemento04;
                    ttAjuste ttA  = (ttAjuste)mapaAjuste.get(chaveAjuste);
                    if (ttA != null && ttA.valorLido == 0) {
                        ttA.valorAjuste = Double.valueOf(formato.format(ttA.valorAjuste));
                        logger.logInfo("ttMov.valorDocumento -> " + ttMov.valorDocumento + " TTA.VALORAJUSTE -> " + ttA.valorAjuste + " ttMov.tipoMovimento -> " + ttMov.tipoMovimento);

                        if((ttMov.valorDocumento - ttA.valorAjuste) < 0){

                            ttMov.valorJuros = Double.valueOf(formato.format(Math.abs(ttMov.valorDocumento - ttA.valorAjuste)));
                            ttMov.complemento07 = "JUROS";
                            logger.logInfo("FAZ JUROS -> " + ttMov.valorJuros);

                            // ttA.valorLido     = 1;
                            // mapaAjuste.put(chaveAjuste,ttA);
                        }

                        if((ttMov.valorDocumento - ttA.valorAjuste) > 0){
                            ttMov.valorDesconto = Double.valueOf(formato.format(Math.abs(ttMov.valorDocumento - ttA.valorAjuste)));
                            ttMov.complemento07 = "DESCONTO";
                            logger.logInfo("FAZ DESCONTO -> " + ttMov.valorDesconto);
                            // ttA.valorLido     = 1;
                            // mapaAjuste.put(chaveAjuste,ttA);
                        }

                        ttA.valorLido     = 1;
                        mapaAjuste.put(chaveAjuste,ttA);

                        // ttMov.valorDocumento -= ttD.valorDesc;

                    }
                }
            }

            logger.logInfo("TTMOV.COMPLEMENTO07 -> " + ttMov.complemento07);

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            //logger.logInfo("ANTES 3 DE 4");
            if (restoLinha == 0) putStatus(dirName, "03--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;


            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                logger.logInfo("VAL4 " + ttMov.valorDocumento);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ?  AND PORTADOR <> ? AND HISTORICO LIKE ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .param(ttMov.nomePortador)
                                    .param("%STOQUE%")   // pedido via feed por vanessa dia 29-05-18
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }



                if (extratoEmpresa != null) {
                    if(extratoEmpresa.length() > 2){
                        if(ttMov.nomeOrigem.contains("STOQUE") && ttMov.nomePortador.contains("ABC")){

                            String[] contasStoqueABC = {"66089753", "66089745", "22160517"};

                            for(int i = 0; i < contasStoqueABC.length; i++){

                                if(ttMov.nomeOrigem.contains(contasStoqueABC[i])){
                                    try{
                                        extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ?  AND PORTADOR <> ? AND HISTORICO LIKE ? ")
                                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                                .param(chaveExtrato + "%")
                                                .param(0)
                                                .param(ttMov.nomeArquivo.toUpperCase())
                                                .param(ttMov.nomePortador)
                                                .param("%"+contasStoqueABC[i]+"%")
                                                .query();
                                    }catch(Exception e){
                                        logger.logInfo("DEU RUIM");
                                    }

                                    if(extratoEmpresa != null){

                                        JSONObject recMov = extratoEmpresa.optJSONObject(i);
                                        DATAMOVIMENTO     = recMov.optString("DATAMOVIMENTO");
                                        PORTADOR          = recMov.optString("PORTADOR");
                                        CHAVE             = recMov.optString("CHAVE");

                                        ttMov.complemento04 = ttMov.nomeOrigem;
                                        ttMov.nomeOrigem    = PORTADOR;
                                        ttMov.dataMovimento = DATAMOVIMENTO;
                                        ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                                        dbIOCont.update("IO_EXTRATO")
                                                .fields("EXTRATOLIDO")
                                                .where("CHAVE = ? ")
                                                .param(1)
                                                .param(CHAVE)
                                                .execute();
                                    }

                                }

                            }
                        }

                    }else if(extratoEmpresa.length() > 0){

                        JSONObject recMov = extratoEmpresa.optJSONObject(0);
                        DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                        PORTADOR        = recMov.optString("PORTADOR");
                        CHAVE           = recMov.optString("CHAVE");

                        ttMov.complemento04 = ttMov.nomeOrigem;
                        ttMov.nomeOrigem    = PORTADOR;
                        ttMov.dataMovimento = DATAMOVIMENTO;
                        ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(1)
                                .param(CHAVE)
                                .execute();


                    }
                    jaCruzou = true;
                }

            }

            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRM.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();
                logger.logInfo("VAL41 " + ttMov.valorDocumento);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();

                }

            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);



            if (ttMov.nomeOrigem.equals("") && ttMov.tipoPlanilha.contains("PISCOFINS")) ttMov.nomeOrigem = "EM BRANCO";
            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

            contaJuros        = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
            contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
            contaMulta        = roteiroCRM.optString("contaFixaMulta");

            if(ttMov.tipoPlanilha.contains("ENDIVIDAMENTO")) contaJuros = "5532";
            if(ttMov.tipoPlanilha.contains("VERBAS")) contaDesconto = "2860";


            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }

            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
            // logger.logInfo("NPORT - "+ttMov.nomePortador);
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                ttMov.lote = ttMov.lote.replaceAll("[^0-9A-Za-z\\_]", "").toUpperCase().replaceAll(ttMov.nomeArquivo.replaceAll("[^0-9A-Za-z\\_]", "").toUpperCase(), "").trim();
                ttMov.lote = "Stoque_404_" + getCampoDate(ttMov.dataMovimento, "", "yyyy-MM") + "_PAGAR";
            }

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
            // logger.logInfo("PRIMEIROCOMP " + ttMov.complemento06);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
            // logger.logInfo("SEGUNDOCOMP " + ttMov.complemento06);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            // logger.logInfo("ttMov.documento  SERGIO -> " + ttMov.documento + " | " + StringUtil.removeSpecialCharsToUC(ttMov.documento));

            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento4(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            logger.logInfo("CONTA MOV -> " + contaMovimento + "CONTA PORT -> " + contaPortador + "NOME ORIGEM -> " + ttMov.nomeOrigem + "VALOR DOCUMENTO -> " + ttMov.valorDocumento + "NOME PORTADOR -> " + ttMov.nomePortador + "TIPO PLANILHA -> " + ttMov.tipoPlanilha);

            if (ttMov.nomeOrigem.contains("OUTROS FORNECEDORES")) logger.logInfo("ttMov.valor apos " + ttMov.chave + " | " + ttMov.valorDocumento + " complemento01 " + ttMov.complemento01 + " complemento04 " + ttMov.complemento04 + "   nome origem " + ttMov.nomeOrigem + "   conta movimento " + contaMovimento + "    conta portador " + contaPortador + "   nome portador " + ttMov.nomePortador + " documento  -> " + ttMov.documento);

            // logger.logInfo("TPCPNP " + ttMov.tipoPlanilha + " | " + ttMov.nomePortador + " | " + ttMov.complemento06 + " | " + contaPortador);
            contaPortador  = getContaPortador2(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador3(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador4(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // logger.logInfo("ttMov.valor apos " + ttMov.chave + " | " + ttMov.valorDocumento + " complemento01 " + ttMov.complemento04 + "   nome origem " + ttMov.nomeOrigem + "   conta movimento " + contaMovimento + "    conta portador " + contaPortador + "   nome portador " + ttMov.nomePortador + " documento  -> " + ttMov.documento);

            //interna por causa do espaco
            if(ttMov.tipoPlanilha.contains("EXTRATO") && ttMov.nomeOrigem.startsWith("TAR ")) contaMovimento = "4698";

            String regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


            double valorPrincipal = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }

            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil    = getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            if (contaPortador.equals("") && !ttMov.nomePortador.equals("") && !nomePortadorAnterior.equals(ttMov.nomePortador)) {
                txtPortador.append(roteiroCRM.optString("contabilidade"));
                txtPortador.append(";");
                txtPortador.append(roteiroCRM.optString("idRoteiro"));
                txtPortador.append(";");
                txtPortador.append(nomeEmpresa);
                txtPortador.append(";");
                txtPortador.append(ttMov.tipoLancamento);
                txtPortador.append(";");
                txtPortador.append(ttMov.nomePortador);
                txtPortador.append("\r\n");
                nomePortadorAnterior = ttMov.nomePortador;
                geraRegraPortador = true;
            }


            // if(ttMov.nomeOrigem.equals("400042")) logger.logInfo("OTT -> CM:" + contaMovimento + "|CP:" + contaPortador + "|HM:" + ttMov.historico);

            boolean regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.contains("FISCAL")) regraCRM = true;

            //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){

                // JWR Adicionado o contceito da contaBuscaPlano pois estava ocorrendo um looping de depara devido a inversao de contas para a condicao do proximo if
                String contaBuscarPlano = contaMovimento;
                if (ttMov.tipoPlanilha.contains("SERVICO") &&  ttMov.chave.contains("-DOCUMENTO")){
                    contaBuscarPlano = contaPortador;
                }

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaBuscarPlano)
                        .queryUnique();

                if (ttMov.nomeOrigem.equals("40000298")) logger.logInfo("CTT " + contaBuscarPlano +" |");

                if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                    if (ttMov.nomeOrigem.equals("40000298")) logger.logInfo("INSERINDO " + codEmpresa + " | " + contaBuscarPlano);
                    dbIOCont.insert("IO_PLANOCONTA")
                            .fields("CODEMPRESA,CONTACONTABIL")
                            .param(codEmpresa)
                            .param(contaBuscarPlano)
                            .execute();
                }
            }

            if (contaMovimento.equals("")){
                try {
                    // JSONObject ret = buscaConta(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, ttMov.tipoLancamento, logger, dbIOCont);
                    JSONObject futureObject = new JSONObject();
                    //JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
                    futureObject.put("codEmpresaPlano", codEmpresa);
                    JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, "", ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
                    if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
                    if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
                    if (contaMovimento == null || contaMovimento.trim().length() == 0) {
                        contaMovimento = "";
                    }
                }
                catch  (Exception Ee) {continue;}
            }
            // logger.logInfo("BUSCOU CONTA " + contaMovimento);
            if (contaPortador.equals("")) {
                try {
                    ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
                    if (ttF == null) {
                        ttF  = new ttFornecedor();

                        JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
                        if (portadorDePara != null && portadorDePara.length() > 0) {
                            JSONObject ret = portadorDePara.optJSONObject(0);
                            contaPortador = ret.optString("CONTACONTABIL").trim();
                        }

                        ttF.contaMovimento = contaPortador;
                        ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
                        mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
                    } else {
                        contaPortador = ttF.contaMovimento;
                    }
                }
                catch  (Exception Ee) {}
            }
            // logger.logInfo("CP256 " + ttMov.complemento02);

            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;

            if (!contaMovimento.equals("")){

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaMovimento)
                        .queryUnique();

                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {

                    descricaoPlanoContaMovimento = descricaoPlano.optString("DESCRICAOPLANO").replaceAll("EAMP;","&").replaceAll(";","").trim();

                    if (!classificaFornec.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                        razaoSocial = descricaoPlano.optString("DESCRICAOPLANO").trim();
                    }

                    // Joga no nome do fornecedor o que esta no plano de contas
                    if (!classificaPlano.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
                        ttMov.nomeOrigem = descricaoPlano.optString("DESCRICAOPLANO").trim();
                    }
                    if (descricaoPlano.optString("DESCRICAOPLANO").length() < 2 || descricaoPlano.optString("DESCRICAOPLANO").equals("") || descricaoPlano.optString("DESCRICAOPLANO") == null) {
                        eFornecedor = true;
                    }
                }

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (descricaoPlano.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }

            }

            if (!contaPortador.equals("")){
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaPortador)
                        .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoPlanoContaPortador = descricaoPlano.optString("DESCRICAOPLANO").replaceAll("EAMP;","&").replaceAll(";","").trim();
                }
            }

            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = contaMovimento;
                ttMov.contaCredito = contaPortador;
                // logger.logInfo("CONTA MOV = "+contaMovimento+" | CONTA PORTT == "+contaPortador+" | CHAVE == "+ttMov.chave.contains("-DOCUMENTO")+" | VALOR == "+ttMov.valorDocumento);
                //yuri
                if (ttMov.tipoPlanilha.contains("SERVICO") &&  ttMov.chave.contains("-DOCUMENTO")){
                    ttMov.contaDebito  = contaPortador;
                    ttMov.contaCredito = contaMovimento;
                }

                // logger.logInfo("Debito: " + ttMov.contaDebito + "   Credito: " + ttMov.contaCredito + "   conta movimento " + contaMovimento);
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = contaMovimento;
                ttMov.contaDebito   = contaPortador;
            }


            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                mapaVariavel.put(key,ttMov);
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                mapaVariavel.put(key,ttMov);
                continue;
            }

            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);



            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);


            // logger.logInfo("ttMov HIST == "+ttMov.historico);


            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

            // logger.logInfo("GHR " + ttMov.historico + " | " + ttMov.complemento02);

            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.historico = getHistoricoRegra2(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.historico = getHistoricoRegra3(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.historico = getHistoricoRegra4(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // logger.logInfo("GHR2 " + ttMov.historico);

            String regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            String filialEspecial = ttMov.codFilial;
            // if (eFornecedor && ttMov.tipoPlanilha.contains("MOVIMENTO")) {

            if (!regraCRM && ttMov.tipoPlanilha.contains("MOVIMENTO")) {
                ttMov.codFilial = "1";
            }
            // if (ttMov.tipoPlanilha.contains("MOVIMENTO") && ttMov.complemento01.contains("DEVOLUCAO") && ttMov.complemento01.contains("CLIENTE")) {
            // ttMov.codFilial = "1";
            // }

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + filialEspecial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + filialEspecial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + filialEspecial;
            }

            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, "");
            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.complemento10 + ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            // logger.logInfo("1 - ttMov HIST == "+ttMov.historico);
            ttMov.historicoJuros 	= ttMov.complemento10 + ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoDesconto = ttMov.complemento10 + ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();
            ttMov.historicoMulta 	= ttMov.complemento10 + ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").trim();

            //sergio3
            // if(ttMov.complemento07.contains("JUROS")) ttMov.historicoJuros = "JUROS";
            // if(ttMov.complemento07.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO";


            if (ttMov.tipoPlanilha.contains("MOVIMENTO")) {
                ttMov.historicoJuros = ttMov.historicoJuros.replaceAll("\"", "");
                ttMov.historicoMulta = ttMov.historicoMulta.replaceAll("\"", "");
                ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll("\"", "");
            }
            // logger.logInfo("GHR2 " + ttMov.historico + "\r\n" + ttMov.historicoJuros + "\r\n" + ttMov.historicoMulta + "\r\n" + ttMov.historicoDesconto + " \r\n" + ttMov.documento);

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }


            JSONObject jDescricaoDupl = new JSONObject();

            if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM){

                JSONObject jDados = new JSONObject();
                jDados.put("CODEMPRESA",     codEmpresa);
                jDados.put("RAZAOSOCIAL",    razaoSocial);
                jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                jDados.put("DOCUMENTO",      ttMov.documento);
                jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                jDados.put("VALORJUROS",     ttMov.valorJuros);
                jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                jDados.put("TABELACONTABIL", tabelaContabil);
                jDescricaoDupl = buscarIODuplicata(jDados, dbIOCont, logger);

                Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                dataLote = DateUtil.dateToString(dtL, "yyyy-MM");


                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                    txtFiscal.append(jDescricaoDupl.optString("CODEMPRESA"));
                    txtFiscal.append(";");
                    txtFiscal.append("1;");
                    txtFiscal.append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("VALORFINAL"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
                    txtFiscal.append(";");
                    txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO"));
                    txtFiscal.append("\r\n");

                    geraFiscal = true;
                    loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                    if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                    ttMov.tipoPlanilha = "NAO LER";
                    mapaVariavel.put(key,ttMov);
                    continue;
                }
                if (eFornecedor) {
                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
                        String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                        txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(razaoSocialDuplicata);
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                        txtFornecedor.append(";");
                        txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL"));
                        txtFornecedor.append("\r\n");

                        geraFiscal = true;
                        loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                        if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                        ttMov.tipoPlanilha = "NAO LER";
                        mapaVariavel.put(key,ttMov);
                        continue;


                    }
                }
            }

            String chaveTeste = "";
            chave = ttMov.chave;
            if(!ttMov.tipoPlanilha.contains("VERBAS"))
                chaveTeste = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if(!chaveTeste.equals("")) chave = chaveTeste;
            chave = chave + "-CTB";


            // vlidando chave
            // if (ttMov.valorDocumento == 174.08 || ttMov.valorDocumento == 87.06)

            // logger.logInfo("LENDO " + ttMov.dataMovimento + "<<>>" + ttMov.valorDocumento + "<<>>" +  ttMov.nomePortador + "<<>>" + ttMov.complemento03 + "<<>>" + chave);




            double auxComplemento04 = 0;
            if(ttMov.tipoPlanilha.contains("ENDIVIDAMENTO") && !ttMov.complemento04.equals("")){
                try{
                    auxComplemento04 = Double.parseDouble(ttMov.complemento04);
                }catch(Exception ac){
                    auxComplemento04 = 0;
                }
            }
            // logger.logInfo("CP255 " + ttMov.complemento02);

            String keyAc = chave;

            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
                ttMov3.documento       = "";
            }
            // if(!tipoPlanilha.contains("VERBAS")){
            if (ttMov3.documento.equals("")) {
                ttMov3.documento         = ttMov.documento;
            } else ttMov3.documento = ttMov3.documento + ", " + ttMov.documento;
            // }

            // if(ttMov.tipoPlanilha.contains("VERBAS")) ttMov3.documento = ttMov.documento;
            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            if (ttMov.tipoPlanilha.contains("MOVIMENTO")) ttMov3.contador          = 2;
            ttMov3.chave = chave;
            // logger.logInfo("TTMOV TP ->" + ttMov.tipoPlanilha);
            if (ttMov.tipoPlanilha.contains("FOLHA_DE_PAGAMENTO")) ttMov3.contador = 1;



            //logger.logInfo("OTT -> " + " |VJUR=" + ttMov.valorJuros + " |ttMov.auxC04=" + auxComplemento04 + " ttMov.tipoMovimento -> " +ttMov.tipoMovimento);
            if(ttMov.tipoPlanilha.contains("ENDIVIDAMENTO")){
                if(auxComplemento04 != 0 && auxComplemento04 == ttMov.valorJuros){
                    ttMov3.contador = 1;
                }else{
                    ttMov3.contador = 0;
                }
            }
            //qqqqqqqqq
            //ttMov.valorDocumento - ttMov.valorDesconto   + ttMov.valorJuros  + ttMov.valorMulta
            // SOLICITADO POR VANESSA (MARCIA ASERCO) QUANDO NAO FOR RENDIMENTO BRUNO DA PLANILHA DE FOLHA
            // DEVE-SE GERAR UM DEBITO PARA V?RIOS CREDITOS.  POR ISTO A INVERS?O PARA CTBPORT

            // logger.logInfo("TEPE " + ttMov.tipoPlanilha + " TTMOV5 -> " + ttMov.complemento05 + " TTMOV.CONTADOR -=> " + ttMov.contador + " | " + ttMov.documento);
            if(ttMov.tipoPlanilha.contains("VERBAS") &&  !ttMov.complemento05.contains("CRED") && ttMov.contador != 1){
                ttMov3.tipoMovimento     = "CTB";
                ttMov3.contaDebito       = ttMov.contaCredito;
                // ttMov3.contaCredito       = "";
                // String copo = contaDebito;
                ttMov3.contador          = 3;
                // ttMov3.documento = ttMov.documento;
                ttMov3.historico = ttMov.complemento10  + "Acerto verbas diversas " + ttMov.nomeOrigem /*+ "INVERTECONTA "*/;
            }

			/*if(ttMov.tipoPlanilha.contains("VERBAS") && ttMov.complemento05.contains("EXTRA")){
                logger.logInfo("SHAHA -> " + ttMov.complemento07);
				ttMov3.tipoMovimento     = "CTB";
                // ttMov3.contaDebito       = "";
                // ttMov3.contador          = 3;
                // ttMov3.documento = ttMov.documento;
                ttMov3.historico = "JUROS";
            }*/

            if (ttMov.tipoPlanilha.equals("PESSOA_FISICA") && !ttMov.nomeOrigem.contains("RENDIMENTO") && !ttMov.nomeOrigem.contains("BRUTO")) {
                ttMov3.tipoMovimento     = "CTBPORT";
                ttMov3.contaDebito       = "";
                ttMov3.contador          = 3;
            }

            if (ttMov.tipoPlanilha.contains("SERVICO") &&  ttMov.chave.contains("-DOCUMENTO")){
                ttMov3.historico = "INVERTECONTA " + ttMov.historico;
                // ttMov3.contaDebito = contaPortador;
                // ttMov3.contaCredito = contaMovimento;
            }
            // logger.logInfo("ttMov HIST == "+ttMov3.historico);
            // logger.logInfo("ttMov CHAVE == "+ttMov.chave);
            String historicoResto = "";
            if(ttMov.historico.contains("Filial:")) historicoResto = " Filial:" + cutString(ttMov.historico,"Filial:");
            if (ttMov.tipoPlanilha.contains("SERVICO") &&  ttMov.tipoMovimento.equals("CTBPORT")) {
                ttMov3.historico = getHistoricoPortador(ttMov.contaCredito, cutString(ttMov.historico,0,"Filial:"), ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj)+historicoResto;
                if(!ttMov3.historico.contains("TR:")) ttMov3.historico = ttMov.complemento10 + ttMov3.historico;
            }

            if(ttMov.complemento08.contains("FORNECEDOR")){
                ttMov3.historico = cutString(ttMov3.historico,0,"Filial:") + " Filial:1";
            }




            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);

            // logger.logInfo("CP255 " + ttMov.complemento01 + " | " + ttMov.tipoPlanilha + " | " + ttMov.valorDocumento + " | " + ttMov3.valorDocumento);

            if (ttMov.tipoPlanilha.equals("PESSOA_FISICA") || ttMov.tipoPlanilha.contains("VERBAS")) continue;

            if (ttMov.tipoPlanilha.contains("AAAOUTRASENTRADAS") ||
                    ttMov.tipoPlanilha.contains("MOVIMENTO") ||
                    ttMov.tipoPlanilha.contains("FOLHA") /* && ttMov.valorDesconto > 0)*/) {
                // logger.logInfo("OTT -> ENTROU IF FOLHA E VALORDESCONTO");
                chave = chave.replaceAll("CTB","CTBPORT");
                if (!ttMov.tipoPlanilha.contains("AAAOUTRASENTRADAS")) {
                    chave = ttMov.lote + "-PORT-" + ttMov.dataMovimento + "-" + ttMov.complemento04 + "-" + ttMov.contaCredito;
                }
                if(ttMov.tipoPlanilha.contains("FOLHA")) chave = chaveTeste + "-CTBPORT";
                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                }
                // logger.logInfo("KEY -> " + key + " |ttMov2.VD -> " + ttMov2.valorDocumento + " |ttMov2.NO -> " + ttMov2.nomeOrigem + " |ttMov.valorDocumento -> " + ttMov.valorDocumento );
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chaveExtrato      = "";
                ttMov2.documento         = ttMov3.documento;
                ttMov2.classificacao     = ttMov.classificacao;
                if(ttMov.tipoPlanilha.equals("MOVIMENTO")){
                    if (!ttMov.complemento07.equals("DESCONTO"))
                        ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento/* - ttMov.valorJuros + ttMov.valorDesconto - ttMov.valorMulta*/;

                    // logger.logInfo("VALORES CTBPORT " + ttMov2.valorDocumento + " | " + ttMov.valorDocumento + " | " + ttMov.valorJuros + " | "+  ttMov.valorDesconto + " | " + ttMov.valorMulta);
                }else{
                    ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                }
                if (!ttMov.tipoPlanilha.contains("AAAOUTRASENTRADAS")) {
                    ttMov2.chave             = chave;
                }
                ttMov2.contador          = 2;

                if(tipoLancamento.contains("PAGAR")){
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }
                // logger.logInfo("ttMov.TP -> " + ttMov.tipoPlanilha + " ttMov. CC -> " + ttMov.contaCredito + " ttMov.CD -> " + ttMov.contaDebito);
                if(ttMov.tipoPlanilha.contains("FOLHA")){
                    ttMov2.contador = 1;
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if (ttMov.tipoPlanilha.contains("AAAOUTRASENTRADAS")) {

                    histobj.put("tipoPlanilha", ttMov.tipoPlanilha);

                    String tratarDiv = getTratarComoDiv(ttMov.documento, ttMov.nomeOrigem + " DIV FORNECEDOR", histobj);

                    // logger.logInfo("DIVS " + tratarDiv + " | " + ttMov.documento + " | " + ttMov.nomeOrigem);
                    // logger.logInfo("DIVS " + tratarDiv);

                    if(!tratarDiv.equals("")){
                        String filial = "";
                        filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                        if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;

                        // ttMov2.contador          = 3;

                        ttMov3.contaCredito = "";

                        // mapaOficial.put(keyAc,ttMov3);
                    }
                }

                if (ttMov.tipoPlanilha.contains("MOVIMENTO")) {
                    ttMov3.historico = ttMov3.historico.replaceAll("\"", "");
                    ttMov2.historico = ttMov.complemento10 + getHistoricoPortador(ttMov.contaCredito, cutString(ttMov.historico,0,"Filial:"), ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj)/*+ " CodigoHistorico:1023"*/;
                    ttMov2.historico = ttMov2.historico.replaceAll("\"", "");
                }
                ttMov3.classificacao = ttMov2.classificacao;
                // logger.logInfo("HISTORICOS " + ttMov2.historico + " | " + ttMov3.historico);
                // logger.logInfo("VALORESSS " + ttMov2.valorDocumento + " | " + ttMov3.valorDocumento);

                // logger.logInfo("CONTASDIV " + ttMov2.contaDebito + " | " + ttMov3.contaDebito + " | " + ttMov2.contaCredito + " | " + ttMov3.contaCredito);
                mapaOficial.put(key,ttMov2);
                mapaOficial.put(keyAc,ttMov3);
            }


        }

        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRM.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".txt";
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal.toString());

            loteFiscal = loteFiscal.replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRM.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());
        }




        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------


        StringBuilder ResumoTxt = new StringBuilder();
        String rn = "\r\n";
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");
        ResumoTxt.append(rn);

        ResumoTxt.append("STATUS;");
        ResumoTxt.append("DATA;TIPO DATA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("DOCUMENTO;");
        ResumoTxt.append("CLIENTE/FORNECEDOR;");
        ResumoTxt.append("PORTADOR;");
        ResumoTxt.append("COMPLEMENTO01;");
        ResumoTxt.append("COMPLEMENTO02;");
        ResumoTxt.append("COMPLEMENTO03;");
        ResumoTxt.append("COMPLEMENTO04;");
        ResumoTxt.append("COMPLEMENTO05;");
        ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
        ResumoTxt.append("DATA;");
        ResumoTxt.append("DEBITO;");
        ResumoTxt.append("CLASS DEB;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("CREDITO;");
        ResumoTxt.append("CLASS CRED;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("HISTORICO;");
        ResumoTxt.append("ORIGEM");

        StringBuilder txtDePara = new StringBuilder();

        txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
        txtDePara.append("\r\n");


        mapaVariavel		= new HashMap();

        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();

            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) {
                logger.logInfo("EXCESSAO MAPAOFC " + xx.getMessage());
                continue;
            }

            // logger.logInfo("FINALEIRA " + ttMov.debitoCredito + " | " + ttMov.tipoPlanilha + " | " + ttMov.dataMovimento + " | " + ttMov.documento + " |  "+  ttMov.valorDocumento + " | " + ttMov.complemento01 + " | " + ttMov.tipoPlanilha + " | " + tipoLancamento + " | " + ttMov.debitoCredito + " | " + ttMov.contaDebito + " | " + ttMov.contaCredito);

            // if (dataMovimento.equals("")) continue;

            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.complemento04 + "-DESCONTO";
                ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
                if (ttD != null && ttD.valorLido == 0) {
                    // ttMov.valorDesconto  = ttD.valorDesc;
                    ttD.valorLido     = 1;
                    mapaDesconto.put(chaveDesconto,ttD);

                    ttMov.valorDocumento -= ttD.valorDesc;

                }
            }



            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();


            JSONObject extratoEmpresa = new JSONObject();


            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato + "%")
                        .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(1)
                                .param(chaveExtrato)
                                .execute();

                    }
                }

            }
            // logger.logInfo("FOIBQ");


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;

                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                try{
                    Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                    Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                    cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                    cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                    cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                    cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                    cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();
                }catch(Exception ai){
                    logger.logInfo("Excp -> " + ai.getMessage());
                }
                // logger.logInfo("TMVL " + ttMov.valorDocumento);

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();
                if(!tipoPlanilha.contains("VERBAS")){
                    for (int xx = 0;xx<5;xx++) {
                        try {

                            Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                            if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm;    tipoData = "D+1";}
                            if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm;   tipoData = "D-1";}
                            if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois;  tipoData = "D+2";}
                            if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

                            registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
                                    .fields("CONTADEBITO,CONTACREDITO,HISTORICO")
                                    .param(codEmpresa)
                                    .param(dataLeitura)
                                    .param(ttMov.valorDocumento)
                                    .query();

                            if (registro != null && registro.length() > 0) break;
                        }
                        catch (Exception xx) {
                            logger.logInfo(" EXCEPt -> " + xx.getMessage());
                            break;
                        }
                    }
                }



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08,  histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
                ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
                ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
                ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
                histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal   = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal   = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }


                String regraContaMovimento  = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                String regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

// logger.logInfo("CHEGOU1");

                if (registro != null && registro.length() > 0) {
                    for (int t=0; t<registro.length(); t++) {

                        JSONObject recMov = registro.optJSONObject(t);
                        String contaDebitoRazao   = recMov.optString("CONTADEBITO");
                        String contaCreditoRazao  = recMov.optString("CONTACREDITO");
                        String historicoRazao     = recMov.optString("HISTORICO");

                        String descricaoCredito   = "";
                        String descricaoDebito    = "";
                        String classificacaoDebito = "";
                        String classificacaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                                .fields("DESCRICAOPLANO,CONTAANALITICA")
                                .param(codEmpresa)
                                .param(contaDebitoRazao)
                                .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                                .fields("DESCRICAOPLANO,CONTAANALITICA")
                                .param(codEmpresa)
                                .param(contaCreditoRazao)
                                .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        ResumoTxt.append("\r\n");

                        if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
                        if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(tipoData);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.documento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeOrigem);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomePortador);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento01);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento02);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento03);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento04);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento05);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento06);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.contaDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.contaCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraContaMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraHistorico);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaDebitoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoDebito);
                        ResumoTxt.append(";");


                        ResumoTxt.append(descricaoDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaCreditoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(descricaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(historicoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeArquivo);
                        ResumoTxt.append(";");
                    }
                }
                else {
                    ResumoTxt.append("\r\n");
                    ResumoTxt.append("NAO ENCONTRADO;");
                    ResumoTxt.append(ttMov.dataMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(tipoData);
                    ResumoTxt.append(";");
                    ResumoTxt.append(valorFinal);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.documento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomeOrigem);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomePortador);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento01);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento02);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento03);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento04);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento05);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento06);
                    ResumoTxt.append(";;");

                    ResumoTxt.append(ttMov.contaDebito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.contaCredito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraContaMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.historico);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraHistorico);
                    ResumoTxt.append(";;");
                    ResumoTxt.append(ttMov.nomeArquivo);
                    ResumoTxt.append(";");

                }
            }
// logger.logInfo("CHEGOU2");


            if(tipoLancamento.contains("PAGAR")){
                if (!ttMov.tipoPlanilha.contains("AAAOUTRASENTRADAS")) {
                    if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                }
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";

                if(ttMov.tipoPlanilha.equals("VERBAS")){
                    // if(ttMov.complemento05.contains("CRED")){
                    classificacao = "C";
                    if(ttMov.contador == 1) classificacao = "X";
                    // }else{
                    // classificacao = "D";
                    // }
                }
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }


            String classificacaoFinal = classificacao + ttMov.classificacao + "01";

            // logger.logInfo("CF ->  " + classificacaoFinal + " class -> " + classificacao + " tM -> " +ttMov.tipoMovimento + " | " + ttMov.contaDebito
            // + " | " + ttMov.contaCredito);

            if (classificacao.startsWith("X") && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}


            if (ttMov.tipoMovimento.equals("CTB")) {
                if (ttMov.contaDebito.equals("") || ttMov.contaDebito.equals("") || ttMov.contaDebito.equals(ttMov.contaCredito)) {
                    String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                    valorFinal = valorFinal.replaceAll("\\.",",");
                    txtDePara.append(ttMov.dataMovimento).append(";");
                    txtDePara.append(valorFinal).append(";");
                    txtDePara.append(ttMov.nomeOrigem).append(";");
                    txtDePara.append(ttMov.nomePortador).append(";");
                    txtDePara.append(ttMov.contaDebito).append(";");
                    txtDePara.append(ttMov.contaCredito).append(";");
                    txtDePara.append(ttMov.documento).append(";");
                    txtDePara.append(ttMov.complemento01).append(";");
                    txtDePara.append(ttMov.complemento02).append(";");
                    txtDePara.append(ttMov.complemento03).append(";");
                    txtDePara.append(ttMov.complemento04).append(";");
                    txtDePara.append(ttMov.complemento05).append(";");
                    txtDePara.append(ttMov.centroCusto).append(";");
                    txtDePara.append(ttMov.nomeArquivo);
                    txtDePara.append(rn);
                }

            }


            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
            }
            mapaLote.put(ttMov.lote,ttLot);
            if (ttMov.nomeOrigem.contains("40000306") && ttMov.contaDebito.equals(""))
                logger.logInfo("CLASSES " + ttMov.valorDocumento + " | " + ttMov.complemento04 + " | " + classificacao + " | " + ttMov.tipoMovimento + " | " + ttMov.historico);

            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
                    records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

            if(tipoLancamento.contains("PAGAR")){
                if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    classDes = classificacao + ttMov.classificacao + "01";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "02";
                }
                if(classificacao.startsWith("D")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "01";
                    classMul = classificacao + ttMov.classificacao + "01";
                }
            }
            if(tipoLancamento.contains("RECEBER")){
                if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    classDes = classificacao + ttMov.classificacao + "01";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "02";
                }
                if(classificacao.startsWith("C")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "02";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "01";
                    classMul = classificacao + ttMov.classificacao + "01";
                }
            }

            // if(ttMov.complemento04.contains("MERCANTIL MINEIRA LOGISTICA LTDA")) logger.logInfo("STOQUE = "+ttMov.valorDocumento+" | NO == "+ttMov.nomeOrigem+" | CP04 == "+ttMov.complemento04+" | CD == "+ttMov.contaDebito+" | CC == "+ttMov.contaCredito+" | "+ttMov.tipoMovimento+" | HIST == "+ttMov.historico);

            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                    //JWR comentado pra teste
                    if(ttMov.tipoPlanilha.contains("SERVICO") && ttMov.historico.contains("INVERTECONTA")) js.put("CONTACREDITO", ttMov.contaDebito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }

                // logger.logInfo("JSS " + js.optString("CONTADEBITO") + " | " + js.optString("CONTACREDITO") + " | " + ttMov.tipoMovimento + " | " + tipoLancamento);

                records.put(js);
            }

            double auxCpl04 = 0;
            if(ttMov.tipoPlanilha.contains("ENDIVIDAMENTO") && !ttMov.complemento04.equals("")){
                try{
                    auxCpl04 = Double.parseDouble(ttMov.complemento04);
                }catch(Exception ac){
                    auxCpl04 = 0;
                }
            }

            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);
                // logger.logInfo("CPS1 " + ttMov.complemento04 + " | " + ttMov.nomeOrigem + " | " + ttMov.contaDebito + " | " + tipoLancamento + " | " + classificacao + " | " + ttMov.valorDocumento + " | " + ttMov.dataMovimento + " | " + ttMov.complemento01 + " | " + ttMov.tipoMovimento);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
                    records.put(rec3);
                }

                //jjjjjjjj
                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                    }
                    if(ttMov.tipoPlanilha.contains("ENDIVIDAMENTO")){
                        if(tipoLancamento.contains("PAGAR")){
                            jsJUR.put("CONTADEBITO",  ttMov.contaDebito);
                            jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                        }
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                    }
                    records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
                        records.put(rec3);
                    }
                }

                if(ttMov.tipoPlanilha.contains("ENDIVIDAMENTO")){
                    if(auxCpl04 != 0 && auxCpl04 == ttMov.valorJuros && ttMov.tipoMovimento.equals("CTB")) continue;
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                    }
                    if(ttMov.tipoPlanilha.contains("VERBAS")){
                        if(tipoLancamento.contains("PAGAR")){
                            jsDES.put("CONTADEBITO", "");
                            jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                        }
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                    }
                    records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                    }
                    records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
                        records.put(rec3);
                    }
                }
            }
        }

        if (apagaExtrato) {
            dbIOCont.delete("IO_EXTRATO")
                    .where("CODEMPRESA=?")
                    .param(codEmpresa)
                    .execute();
        }

        // resumo comparativo com razao

        if (comparaRazao) {

            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
            FileWriter writerRazao = new FileWriter(filenameRazao);
            writerRazao.writeNewFile(ResumoTxt.toString());
        }


        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());


        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {

            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
            // =======================================================================================
            lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                        .where("LOTE=?")
                        .param(lote)
                        .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", "");
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }

    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {
        if (dbIOCont != null) {
            dbIOCont.closeConnection();
        }
    }

    return records;
}

class ttLote {
    public String lote;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
    }
}


class ttTransacao {
    public String transacao;
    public String bordero;
    public ttTransacao(){}
    public ttTransacao(ttTransacao tt){
        transacao=tt.transacao;
        bordero=tt.bordero;

    }
}

class ttFornecedor {
    public String nomeOrigem;
    public String contaMovimento;
    public ttFornecedor(){}
    public ttFornecedor(ttFornecedor ttF){
        nomeOrigem 	 = ttF.nomeOrigem;
        contaMovimento = ttF.contaMovimento;
    }
}

class ttDesconto {
    public String documento;
    public double valorDesc;
    public int valorLido;
    public ttDesconto(){}
    public ttDesconto(ttDesconto ttD){
        documento  = ttD.documento;
        valorDesc  = ttD.valorDesc;
        valorLido  = ttD.valorLido;
    }
}

class ttAjuste {
    public String complemento04;
    public double valorAjuste;
    public double valorExtra;
    public int valorLido;
    public ttAjuste(){}
    public ttAjuste(ttAjuste ttA){
        complemento04  = ttA.complemento04;
        valorAjuste  = ttA.valorAjuste;
        valorExtra  = ttA.valorExtra;
        valorLido  = ttA.valorLido;
    }
}
// class ttFechaLcto {
// public String chave;
// public int contador;
// public ttFechaLcto(){}
// public ttFechaLcto(ttFechaLcto ttFl){
// chave  = ttFl.chave;
// contador  = ttFl.contador;
// }
// }

public int getIndiceRoteiro(String nomeCampo) {

    int validaCampo = -1;
    try {
        JSONObject roteiroIndice = getRoteiro();
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo));
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;

}

public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
    ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
    if (ttMov4 == null) {
        ttMov4 = new ttMovimentoPadrao(ttMov2);
        ttMov4.chave                    = chave;
        if(gerarApenasValorDocumento){
            ttMov4.valorDesconto            = 0;
            ttMov4.valorMulta               = 0;
            ttMov4.valorJuros               = 0;
        }
        ttMov4.classificacao            = classificacao;
        switch(complemento){
            case 1: ttMov4.complemento01 = textoComplemento; break;
            case 2: ttMov4.complemento02 = textoComplemento; break;
            case 3: ttMov4.complemento03 = textoComplemento; break;
            case 4: ttMov4.complemento04 = textoComplemento; break;
            case 5: ttMov4.complemento05 = textoComplemento; break;
            case 6: ttMov4.complemento06 = textoComplemento; break;
        }
        mapaVariavel.put(chave, ttMov4);
    }
    return mapaVariavel;
}

public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
    if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
    if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
    if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
    if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2017-122246");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("fornecedor", "FORNECEDOR");
    js.put("dataMovimento", "5");
    js.put("portador", "BANCO");
    js.put("documentoNF", "NOTA");
    js.put("valorDocumento", "VALOR");
    js.put("valorJuros", "-1");
    js.put("valorDesconto", "-1");
    js.put("valorMulta", "-1");
    js.put("valorPagamento", "");
    js.put("complemento01", "CONTA");
    js.put("complemento02", "#TIPOPLANILHA");
    js.put("complemento03", "13");
    js.put("complemento04", "BORDERO");
    js.put("complemento05", "FILIAL");
    js.put("complemento06", "13");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "0;1;2;3;4;5;6;7;8;9;10;11;12");
    js.put("classificaFornec", "2103");
    js.put("classificaPlano", "2103");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "2858");
    js.put("contaFixaJuros", "4701");
    js.put("contaFixaMulta", "5784");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PAGAMENTOS");
    js.put("Planilhas_Padroes", "Extratos OFX;Extrato_Cef_Excel;Extrato_Daycoval_Excel;Extrato_BancoDaycoval_PDF;Extrato_BancoPaulista_PDF;Extrato_CEF_PDF;Extrato_Viacredi_PDF;Extrato_Original_PDF;Extrato_Sofisa_Excel;Extrato_Abc_Excel;Extrato_C6Bank_PDF;Extrato_Fibra_PDF;Extrato_ABC_PDF;Extrato_BBM_PDF;Extrato_BIB_PDF;Extrato_Guanabara_PDF;Extrato_Sofisa_PDF;Extrato_Votorantim_PDF;Extrato_Fibra_Excel;Extrato_Industrial_Excel;Extrato_Paulista_Excel;Extrato_BBM_TXT;Extrato_Votorantim_Excel");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "TRUE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "ALESSANDRO@ASERCO.COM.BR;SUPORTE@OTTIMIZZA.COM.BR");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroAAAOUTRASENTRADAS1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-1094039");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q6R000008sop6QAA");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "22.514.608/0001-77");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "8");
    js.put("dataMovimento", "2");
    js.put("portador", "-1");
    js.put("documentoNF", "6");
    js.put("valorDocumento", "10");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "0");
    js.put("complemento02", "11");
    js.put("complemento03", "12");
    js.put("complemento04", "20");
    js.put("complemento05", "22");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "OUTRAS ENTRADAS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "CODFILIALNF");
    js.put("Rotulo_Complemento_02", "CODFISCAL");
    js.put("Rotulo_Complemento_03", "SITTRIBUT");
    js.put("Rotulo_Complemento_04", "CODCONT");
    js.put("Rotulo_Complemento_05", "DESCRICAO");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAAOUTRASENTRADAS2() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0559051");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "8");
    js.put("dataMovimento", "2");
    js.put("portador", "-1");
    js.put("documentoNF", "6");
    js.put("valorDocumento", "10");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "0");
    js.put("complemento02", "11");
    js.put("complemento03", "12");
    js.put("complemento04", "20");
    js.put("complemento05", "22");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "OUTRAS ENTRADAS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "CODFILIALNF");
    js.put("Rotulo_Complemento_02", "CODFISCAL");
    js.put("Rotulo_Complemento_03", "SITTRIBUT");
    js.put("Rotulo_Complemento_04", "CODCONT");
    js.put("Rotulo_Complemento_05", "DESCRICAO");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroACORDO_COMERCIAL3() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-01111444");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "6");
    js.put("portador", "11");
    js.put("documentoNF", "7");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "DESCRICAO DO CREDITO");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ACORDO COMERCIAL");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroBRINDES4() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-03123451");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "3");
    js.put("dataMovimento", "2");
    js.put("portador", "-1");
    js.put("documentoNF", "1");
    js.put("valorDocumento", "6");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "0");
    js.put("complemento02", "#TIPOPLANILHA");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "NOTAS BRINDE");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "FILIAL");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroFOLHA_DE_PAGAMENTO5() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-1094036");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q6R000008sop6QAA");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "22.514.608/0001-77");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "COLUNA (16,24)");
    js.put("dataMovimento", "COLUNA (24,32)");
    js.put("portador", "COLUNA (16,24)");
    js.put("documentoNF", "");
    js.put("valorDocumento", "COLUNA (57,70)");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "COLUNA (33,34)");
    js.put("complemento02", "#COLUNA (82,90) CONTEM (EVENTO) COLUNA (94,200)");
    js.put("complemento03", "COLUNA (255,271)");
    js.put("complemento04", "COLUNA(96,252)");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "FOLHA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".TXT - ARQUIVO TEXTO");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroFOLHA_DE_PAGAMENTO6() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2018-022543");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "COLUNA (16,24)");
    js.put("dataMovimento", "COLUNA (24,32)");
    js.put("portador", "COLUNA (16,24)");
    js.put("documentoNF", "");
    js.put("valorDocumento", "COLUNA (57,70)");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "COLUNA (33,34)");
    js.put("complemento02", "#COLUNA (82,90) CONTEM (EVENTO) COLUNA (95,200)");
    js.put("complemento03", "COLUNA (255,271)");
    js.put("complemento04", "COLUNA(96,252)");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "FOLHA");
    js.put("Planilhas_Padroes", "Prosyst");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".TXT - ARQUIVO TEXTO");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroMOVIMENTOPAGGRUPOOPEL17() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-1237392");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q6R000008whiNQAQ");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "00.000.000/0000-00");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "10");
    js.put("dataMovimento", "#COLUNA A CONTEM(DATA :)COLUNA B");
    js.put("portador", "#COLUNA A CONTEM (CONTA N)");
    js.put("documentoNF", "7");
    js.put("valorDocumento", "19");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "14");
    js.put("complemento02", "");
    js.put("complemento03", "3");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "16");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "COMPLEMENTO01");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "RELATORIO PADRAO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroPISCOFINS8() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-1094041");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q6R000008sop6QAA");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "22.514.608/0001-77");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "0");
    js.put("dataMovimento", "8");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "2");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "4");
    js.put("complemento02", "5");
    js.put("complemento03", "6");
    js.put("complemento04", "3");
    js.put("complemento05", "");
    js.put("complemento06", "2");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PISCOFINS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "COD CONTA");
    js.put("Rotulo_Complemento_02", "NOME");
    js.put("Rotulo_Complemento_03", "CTA RFB");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "3");
    js.put("Rotulos_Para_Valores_Extras", "COFINS");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroPISCOFINS9() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0559079");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "0");
    js.put("dataMovimento", "8");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "2");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "4");
    js.put("complemento02", "5");
    js.put("complemento03", "6");
    js.put("complemento04", "3");
    js.put("complemento05", "");
    js.put("complemento06", "2");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PISCOFINS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "COD CONTA");
    js.put("Rotulo_Complemento_02", "NOME");
    js.put("Rotulo_Complemento_03", "CTA RFB");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "3");
    js.put("Rotulos_Para_Valores_Extras", "COFINS");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroSERVICO10() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-1094040");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q6R000008sop6QAA");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "22.514.608/0001-77");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "7");
    js.put("dataMovimento", "2");
    js.put("portador", "8");
    js.put("documentoNF", "9");
    js.put("valorDocumento", "15");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "1");
    js.put("complemento02", "");
    js.put("complemento03", "0");
    js.put("complemento04", "10");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "SERVICOS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "CODFILIAL");
    js.put("Rotulo_Complemento_02", "VALORES EXTRAS");
    js.put("Rotulo_Complemento_03", "NUMTRANSENT");
    js.put("Rotulo_Complemento_04", "FORNECEDOR");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroSERVICO11() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0559062");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "7");
    js.put("dataMovimento", "2");
    js.put("portador", "8");
    js.put("documentoNF", "9");
    js.put("valorDocumento", "15");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "1");
    js.put("complemento02", "");
    js.put("complemento03", "0");
    js.put("complemento04", "10");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "SERVICOS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "CODFILIAL");
    js.put("Rotulo_Complemento_02", "VALORES EXTRAS");
    js.put("Rotulo_Complemento_03", "NUMTRANSENT");
    js.put("Rotulo_Complemento_04", "FORNECEDOR");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroVERBAS12() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-01113775");
    js.put("idRoteiro", "a0A1C00000iWI9P");
    js.put("idEmpresa", "a0q1C000005EoyTQAS");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "21.628.516/0001-55");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "3");
    js.put("dataMovimento", "9");
    js.put("portador", "-1");
    js.put("documentoNF", "10");
    js.put("valorDocumento", "-1");
    js.put("valorJuros", "7");
    js.put("valorDesconto", "7");
    js.put("valorMulta", "");
    js.put("valorPagamento", "6");
    js.put("complemento01", "8");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "2860");
    js.put("contaFixaJuros", "4697");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Stoque");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ACERTO VERBAS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "VERBA");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    String [] campos1 = "CODFILIALNF|TIPODESCARGA|DTENTRADA|ESPECIE|MODELO".split(";");
    for (int x=0;x<campos1.length;x++) {
        if (!line.contains(campos1[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAAOUTRASENTRADAS1";
    achouTipo = true;
    String [] campos2 = "CODFILIALNF|TIPODESCARGA|DTENTRADA|ESPECIE|MODELO".split(";");
    for (int x=0;x<campos2.length;x++) {
        if (!line.contains(campos2[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAAOUTRASENTRADAS2";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("ACORDO COMERCIAL")) achouTipo = true;
    if (achouTipo) return "ACORDO_COMERCIAL3";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("BRINDE")) achouTipo = true;
    if (achouTipo) return "BRINDES4";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("FOLHA")) achouTipo = true;
    if (achouTipo) return "FOLHA_DE_PAGAMENTO5";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("FOLHA")) achouTipo = true;
    if (achouTipo) return "FOLHA_DE_PAGAMENTO6";
    achouTipo = true;
    String [] campos7 = "RELATORIO EXTRATO BANCARIO;MNEMONICO".split(";");
    for (int x=0;x<campos7.length;x++) {
        if (!line.contains(campos7[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "MOVIMENTOPAGGRUPOOPEL17";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("PISCOFINS")) achouTipo = true;
    if (achouTipo) return "PISCOFINS8";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("PISCOFINS")) achouTipo = true;
    if (achouTipo) return "PISCOFINS9";
    achouTipo = true;
    String [] campos10 = "NUMTRANSENT|CODFILIAL|DTENT|ESPECIE|MODELO".split(";");
    for (int x=0;x<campos10.length;x++) {
        if (!line.contains(campos10[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "SERVICO10";
    achouTipo = true;
    String [] campos11 = "NUMTRANSENT|CODFILIAL|DTENT|ESPECIE|MODELO".split(";");
    for (int x=0;x<campos11.length;x++) {
        if (!line.contains(campos11[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "SERVICO11";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("ACERTO DE VERBA")) achouTipo = true;
    if (achouTipo) return "VERBAS12";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES")) { //ROT-2017-122246
        conta = "50363";
        contaMovimento = "50363";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCARIA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RENDIMENTOS S/APLICACOES")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) { //ROT-2022-1237392
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("BRINDE")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "2829";
        contaMovimento = "2829";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10158";
        contaMovimento = "10158";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANCEIRA")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10152";
        contaMovimento = "10152";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10154";
        contaMovimento = "10154";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10156";
        contaMovimento = "10156";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADAS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "2830";
        contaMovimento = "2830";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10159";
        contaMovimento = "10159";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10153";
        contaMovimento = "10153";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10155";
        contaMovimento = "10155";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10157";
        contaMovimento = "10157";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITOS")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERIODOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTERIORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPENSAR")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SELIC") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10156";
        contaMovimento = "10156";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SELIC") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10157";
        contaMovimento = "10157";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3342130022132")) { //ROT-2017-122246
        conta = "6714";
        contaMovimento = "6714";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0148536212")) { //ROT-2017-122246
        conta = "6711";
        contaMovimento = "6711";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000009046696")) { //ROT-2017-122246
        conta = "50045";
        contaMovimento = "50045";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("640000")) { //ROT-2017-122246
        conta = "50451";
        contaMovimento = "50451";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("647000")) { //ROT-2017-122246
        conta = "50452";
        contaMovimento = "50452";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("9585-0")) { //ROT-2017-122246
        conta = "6710";
        contaMovimento = "6710";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000000782")) { //ROT-2017-122246
        conta = "50044";
        contaMovimento = "50044";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01310045141")) { //ROT-2017-122246
        conta = "6712";
        contaMovimento = "6712";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01315018133")) { //ROT-2017-122246
        conta = "50026";
        contaMovimento = "50026";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3342290119631")) { //ROT-2017-122246
        conta = "50456";
        contaMovimento = "50456";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("14923-3")) { //ROT-2017-122246
        conta = "9351";
        contaMovimento = "9351";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("35633-6")) { //ROT-2017-122246
        conta = "942553";
        contaMovimento = "942553";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("36267-0")) { //ROT-2017-122246
        conta = "942562";
        contaMovimento = "942562";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01315015410")) { //ROT-2017-122246
        conta = "7391";
        contaMovimento = "7391";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2216051") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) { //ROT-2017-122246
        conta = "50042";
        contaMovimento = "50042";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("6608975") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) { //ROT-2017-122246
        conta = "7936";
        contaMovimento = "7936";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("6608974") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) { //ROT-2017-122246
        conta = "7929";
        contaMovimento = "7929";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("602251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) { //ROT-2017-122246
        conta = "50104";
        contaMovimento = "50104";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("702251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) { //ROT-2017-122246
        conta = "50105";
        contaMovimento = "50105";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0007152908") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) { //ROT-2017-122246
        conta = "5634";
        contaMovimento = "5634";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006986422") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) { //ROT-2017-122246
        conta = "7463";
        contaMovimento = "7463";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006706662") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) { //ROT-2017-122246
        conta = "50287";
        contaMovimento = "50287";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006706670") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) { //ROT-2017-122246
        conta = "50288";
        contaMovimento = "50288";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("33716-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) { //ROT-2017-122246
        conta = "50015";
        contaMovimento = "50015";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0590001244") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) { //ROT-2017-122246
        conta = "9528";
        contaMovimento = "9528";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0500001243") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) { //ROT-2017-122246
        conta = "9527";
        contaMovimento = "9527";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("78474-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) { //ROT-2017-122246
        conta = "50054";
        contaMovimento = "50054";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("78545-1") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) { //ROT-2017-122246
        conta = "50228";
        contaMovimento = "50228";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("41702-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) { //ROT-2017-122246
        conta = "9483";
        contaMovimento = "9483";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000120267") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) { //ROT-2017-122246
        conta = "8845";
        contaMovimento = "8845";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000120275") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) { //ROT-2017-122246
        conta = "8846";
        contaMovimento = "8846";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1.125.527-7") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) { //ROT-2017-122246
        conta = "50035";
        contaMovimento = "50035";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1.125.528-5") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) { //ROT-2017-122246
        conta = "50036";
        contaMovimento = "50036";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3716-4") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) { //ROT-2017-122246
        conta = "50014";
        contaMovimento = "50014";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("301970")) { //ROT-2017-122246
        conta = "999318";
        contaMovimento = "999318";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("301962")) { //ROT-2017-122246
        conta = "999314";
        contaMovimento = "999314";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("37")) { //ROT-2017-122246
        conta = "50242";
        contaMovimento = "50242";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("50349")) { //ROT-2017-122246
        conta = "50349";
        contaMovimento = "50349";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000276")) { //ROT-2017-122246
        conta = "50182";
        contaMovimento = "50182";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000277")) { //ROT-2017-122246
        conta = "50183";
        contaMovimento = "50183";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000256")) { //ROT-2017-122246
        conta = "50162";
        contaMovimento = "50162";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000258")) { //ROT-2017-122246
        conta = "50164";
        contaMovimento = "50164";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000278")) { //ROT-2017-122246
        conta = "50184";
        contaMovimento = "50184";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000291")) { //ROT-2017-122246
        conta = "50344";
        contaMovimento = "50344";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000295")) { //ROT-2017-122246
        conta = "50326";
        contaMovimento = "50326";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000298")) { //ROT-2017-122246
        conta = "50335";
        contaMovimento = "50335";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000306")) { //ROT-2017-122246
        conta = "50279";
        contaMovimento = "50279";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000311")) { //ROT-2017-122246
        conta = "50349";
        contaMovimento = "50349";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000321")) { //ROT-2017-122246
        conta = "50270";
        contaMovimento = "50270";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000324")) { //ROT-2017-122246
        conta = "50103";
        contaMovimento = "50103";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400045")) { //ROT-2017-122246
        conta = "4341";
        contaMovimento = "4341";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400051")) { //ROT-2017-122246
        conta = "4354";
        contaMovimento = "4354";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400058")) { //ROT-2017-122246
        conta = "50088";
        contaMovimento = "50088";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400066")) { //ROT-2017-122246
        conta = "50337";
        contaMovimento = "50337";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400068")) { //ROT-2017-122246
        conta = "50098";
        contaMovimento = "50098";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400069")) { //ROT-2017-122246
        conta = "50092";
        contaMovimento = "50092";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400083")) { //ROT-2017-122246
        conta = "50060";
        contaMovimento = "50060";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("480103")) { //ROT-2017-122246
        conta = "50061";
        contaMovimento = "50061";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400042")) { //ROT-2017-122246
        conta = "4351";
        contaMovimento = "4351";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000296")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400089")) { //ROT-2017-122246
        conta = "4352";
        contaMovimento = "4352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400087")) { //ROT-2017-122246
        conta = "50338";
        contaMovimento = "50338";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO IRRF PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IMPOSTO NF.SERVICO")) { //ROT-2017-122246
        conta = "1546";
        contaMovimento = "1546";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO CSRF PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IMPOSTO NF.SERVICO")) { //ROT-2017-122246
        conta = "1580";
        contaMovimento = "1580";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF")) { //ROT-2017-122246
        conta = "1659";
        contaMovimento = "1659";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("JURO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("REC")) { //ROT-2017-122246
        conta = "2860";
        contaMovimento = "2860";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE SALARIOS")) { //ROT-2017-122246
        conta = "312";
        contaMovimento = "312";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS ST")) { //ROT-2017-122246
        conta = "50392";
        contaMovimento = "50392";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("LOCACAO MAQUINA-EQUIPAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DIMEX DO TRIANGULO")) { //ROT-2017-122246
        conta = "50061";
        contaMovimento = "50061";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSI")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATTAR")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC/TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF")) { //ROT-2017-122246
        conta = "7602";
        contaMovimento = "7602";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CLIENTES")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIXA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("01310045141")) { //ROT-2017-122246
        conta = "10249";
        contaMovimento = "10249";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000009046696") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICA")) { //ROT-2017-122246
        conta = "6473";
        contaMovimento = "6473";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESCONTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OBTIDOS")) { //ROT-2017-122246
        conta = "2858INVERTE";
        contaMovimento = "2858INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COMERCIAL")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL")) { //ROT-2017-122246
        conta = "50352";
        contaMovimento = "50352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCEL")) { //ROT-2017-122246
        conta = "4701";
        contaMovimento = "4701";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MARKETING") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL")) { //ROT-2017-122246
        conta = "50344";
        contaMovimento = "50344";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROMULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOLASCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREITAS")) { //ROT-2017-122246
        conta = "849632";
        contaMovimento = "849632";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COMERCI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STOQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTOS")) { //ROT-2017-122246
        conta = "1736";
        contaMovimento = "1736";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIDICE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMOVEIS")) { //ROT-2017-122246
        conta = "50352";
        contaMovimento = "50352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PLANO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ODONTOLOGICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("(COM.)")) { //ROT-2017-122246
        conta = "50196";
        contaMovimento = "50196";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PLANO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ODONTOLOGICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("(ADM)")) { //ROT-2017-122246
        conta = "50220";
        contaMovimento = "50220";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEIRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50270";
        contaMovimento = "50270";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PURE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOURMET")) { //ROT-2017-122246
        conta = "5193284";
        contaMovimento = "5193284";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEUGEBAUER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS")) { //ROT-2017-122246
        conta = "536780";
        contaMovimento = "536780";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KABUM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "942563";
        contaMovimento = "942563";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS")) { //ROT-2017-122246
        conta = "516554";
        contaMovimento = "516554";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTIN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO")) { //ROT-2017-122246
        conta = "548633";
        contaMovimento = "548633";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMARA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIRIGENTES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSULTA")) { //ROT-2017-122246
        conta = "4553";
        contaMovimento = "4553";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) { //ROT-2017-122246
        conta = "313";
        contaMovimento = "313";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VIAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50335";
        contaMovimento = "50335";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS")) { //ROT-2017-122246
        conta = "642272";
        contaMovimento = "642272";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUIMICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMPARO")) { //ROT-2017-122246
        conta = "636155";
        contaMovimento = "636155";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AIARA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIANA")) { //ROT-2017-122246
        conta = "5171870";
        contaMovimento = "5171870";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONFECCAO")) { //ROT-2017-122246
        conta = "5192669";
        contaMovimento = "5192669";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "976296";
        contaMovimento = "976296";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES")) { //ROT-2017-122246
        conta = "5194958";
        contaMovimento = "5194958";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO")) { //ROT-2017-122246
        conta = "50100";
        contaMovimento = "50100";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BASECAMP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO")) { //ROT-2017-122246
        conta = "5194093";
        contaMovimento = "5194093";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C3") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES")) { //ROT-2017-122246
        conta = "5194092";
        contaMovimento = "5194092";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA")) { //ROT-2017-122246
        conta = "5194961";
        contaMovimento = "5194961";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CENTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) { //ROT-2017-122246
        conta = "5193787";
        contaMovimento = "5193787";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL")) { //ROT-2017-122246
        conta = "518138";
        contaMovimento = "518138";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCARTAVEIS")) { //ROT-2017-122246
        conta = "788857";
        contaMovimento = "788857";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONDOR")) { //ROT-2017-122246
        conta = "501526";
        contaMovimento = "501526";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONECT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPORTS")) { //ROT-2017-122246
        conta = "852533";
        contaMovimento = "852533";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFACIL")) { //ROT-2017-122246
        conta = "942548";
        contaMovimento = "942548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-122246
        conta = "5193711";
        contaMovimento = "5193711";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAMI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBALAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA")) { //ROT-2017-122246
        conta = "537786";
        contaMovimento = "537786";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOUGLAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORDEIRO")) { //ROT-2017-122246
        conta = "5194959";
        contaMovimento = "5194959";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELANIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS")) { //ROT-2017-122246
        conta = "5193217";
        contaMovimento = "5193217";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISANGELA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDA")) { //ROT-2017-122246
        conta = "5194950";
        contaMovimento = "5194950";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ERICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEIXEIRA")) { //ROT-2017-122246
        conta = "861241";
        contaMovimento = "861241";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILSON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREIRES")) { //ROT-2017-122246
        conta = "50344";
        contaMovimento = "50344";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GMM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES")) { //ROT-2017-122246
        conta = "5193219";
        contaMovimento = "5193219";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HERBERT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCEL")) { //ROT-2017-122246
        conta = "50425";
        contaMovimento = "50425";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAIR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO")) { //ROT-2017-122246
        conta = "50352";
        contaMovimento = "50352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAMF")) { //ROT-2017-122246
        conta = "5194214";
        contaMovimento = "5194214";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOUR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOCACAO")) { //ROT-2017-122246
        conta = "5193246";
        contaMovimento = "5193246";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUNIOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAVARES")) { //ROT-2017-122246
        conta = "50413";
        contaMovimento = "50413";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KELIANE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALMEIDA")) { //ROT-2017-122246
        conta = "5194947";
        contaMovimento = "5194947";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L D L") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUCOES")) { //ROT-2017-122246
        conta = "5194231";
        contaMovimento = "5194231";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBALA")) { //ROT-2017-122246
        conta = "760312";
        contaMovimento = "760312";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACSUEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONRADO")) { //ROT-2017-122246
        conta = "5194971";
        contaMovimento = "5194971";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REIS")) { //ROT-2017-122246
        conta = "50414";
        contaMovimento = "50414";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDA")) { //ROT-2017-122246
        conta = "5193375";
        contaMovimento = "5193375";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO")) { //ROT-2017-122246
        conta = "976298";
        contaMovimento = "976298";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAWAY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSULTORIA")) { //ROT-2017-122246
        conta = "5194994";
        contaMovimento = "5194994";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MIDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIGNS")) { //ROT-2017-122246
        conta = "530698";
        contaMovimento = "530698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOLDPET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIA")) { //ROT-2017-122246
        conta = "857769";
        contaMovimento = "857769";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASTRO")) { //ROT-2017-122246
        conta = "5194105";
        contaMovimento = "5194105";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORION") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPRESSOES")) { //ROT-2017-122246
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OSORIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLACAS")) { //ROT-2017-122246
        conta = "849299";
        contaMovimento = "849299";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PADARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUPER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTE")) { //ROT-2017-122246
        conta = "812383";
        contaMovimento = "812383";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAOLA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAPHAELA")) { //ROT-2017-122246
        conta = "5194975";
        contaMovimento = "5194975";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARATI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BISCOITOS")) { //ROT-2017-122246
        conta = "544818";
        contaMovimento = "544818";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOARES")) { //ROT-2017-122246
        conta = "5192679";
        contaMovimento = "5192679";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBSON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA")) { //ROT-2017-122246
        conta = "5194088";
        contaMovimento = "5194088";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BATISTA")) { //ROT-2017-122246
        conta = "5194088";
        contaMovimento = "5194088";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIFORMES")) { //ROT-2017-122246
        conta = "541291";
        contaMovimento = "541291";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RSA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAPITAL")) { //ROT-2017-122246
        conta = "5194980";
        contaMovimento = "5194980";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIMONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOGUEIRA")) { //ROT-2017-122246
        conta = "5192412";
        contaMovimento = "5192412";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SYLVIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENICUCCI")) { //ROT-2017-122246
        conta = "846992";
        contaMovimento = "846992";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAMARA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIGITAL")) { //ROT-2017-122246
        conta = "5194992";
        contaMovimento = "5194992";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTRANS")) { //ROT-2017-122246
        conta = "942546";
        contaMovimento = "942546";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("YAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSIS")) { //ROT-2017-122246
        conta = "5193220";
        contaMovimento = "5193220";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZUREPRINT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO")) { //ROT-2017-122246
        conta = "50061";
        contaMovimento = "50061";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONE")) { //ROT-2017-122246
        conta = "4478";
        contaMovimento = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ANTECIPADO")) { //ROT-2017-122246
        conta = "6606";
        contaMovimento = "6606";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INTERNET") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50060";
        contaMovimento = "50060";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROCESSUAIS")) { //ROT-2017-122246
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUDICIAL")) { //ROT-2017-122246
        conta = "4663";
        contaMovimento = "4663";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS")) { //ROT-2017-122246
        conta = "1552";
        contaMovimento = "1552";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEPOSITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUDICIAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRABALHISTAS")) { //ROT-2017-122246
        conta = "4336";
        contaMovimento = "4336";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("HONORARIO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTABILIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50082";
        contaMovimento = "50082";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIFERENCA")) { //ROT-2017-122246
        conta = "5006";
        contaMovimento = "5006";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SWAP")) { //ROT-2017-122246
        conta = "10588";
        contaMovimento = "10588";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS")) { //ROT-2017-122246
        conta = "1556";
        contaMovimento = "1556";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PGFN") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("1734")) { //ROT-2017-122246
        conta = "10180";
        contaMovimento = "10180";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATADO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50061";
        contaMovimento = "50061";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROCHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "50404";
        contaMovimento = "50404";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SINDICAL")) { //ROT-2017-122246
        conta = "1661";
        contaMovimento = "1661";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("REUNIOES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "50326";
        contaMovimento = "50326";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VIDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("COMERCIAL")) { //ROT-2017-122246
        conta = "4338";
        contaMovimento = "4338";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTORIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COPIA")) { //ROT-2017-122246
        conta = "50101";
        contaMovimento = "50101";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRABALHISTA")) { //ROT-2017-122246
        conta = "4984";
        contaMovimento = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSISTENCIAL") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("AMIS")) { //ROT-2017-122246
        conta = "4553";
        contaMovimento = "4553";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAPITAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGAZINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNECEDOR")) { //ROT-2017-122246
        conta = "50420";
        contaMovimento = "50420";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGAZINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "507677";
        contaMovimento = "507677";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "9243";
        contaMovimento = "9243";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "504710";
        contaMovimento = "504710";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIBEIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAES")) { //ROT-2017-122246
        conta = "5195082";
        contaMovimento = "5195082";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VERBA")) { //ROT-2017-122246
        conta = "50350INVERTE";
        contaMovimento = "50350INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSISTENCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("AMIS")) { //ROT-2017-122246
        conta = "50270";
        contaMovimento = "50270";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("HONORARIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO")) { //ROT-2017-122246
        conta = "500000";
        contaMovimento = "500000";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "50412";
        contaMovimento = "50412";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALELO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "521438";
        contaMovimento = "521438";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VINICIUS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195180";
        contaMovimento = "5195180";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAMAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195181";
        contaMovimento = "5195181";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREMIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BRINDE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("NOTA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DEBITO")) { //ROT-2017-122246
        conta = "50341";
        contaMovimento = "50341";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FREDERICO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195182";
        contaMovimento = "5195182";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CYBELLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEOPOLDINA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "858717";
        contaMovimento = "858717";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NETWORK") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "537140";
        contaMovimento = "537140";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VIDA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COMERCIAL")) { //ROT-2017-122246
        conta = "50163";
        contaMovimento = "50163";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("POLI")) { //ROT-2017-122246
        conta = "50340";
        contaMovimento = "50340";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARILAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "9787";
        contaMovimento = "9787";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARILAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "548311";
        contaMovimento = "548311";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "508094";
        contaMovimento = "508094";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FUNDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INVESTIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("01310045141")) { //ROT-2017-122246
        conta = "50102";
        contaMovimento = "50102";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POUPANCA")) { //ROT-2017-122246
        conta = "10058";
        contaMovimento = "10058";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITO")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORT")) { //ROT-2017-122246
        conta = "1357";
        contaMovimento = "1357";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO")) { //ROT-2017-122246
        conta = "942557";
        contaMovimento = "942557";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANC")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOTERI")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGENC")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB.") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIXA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000120275")) { //ROT-2017-122246
        conta = "9286";
        contaMovimento = "9286";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRAT") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702251-0")) { //ROT-2017-122246
        conta = "50106";
        contaMovimento = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("33716-8")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IOF")) { //ROT-2017-122246
        conta = "7602";
        contaMovimento = "7602";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSITIVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "503433";
        contaMovimento = "503433";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOURDES")) { //ROT-2017-122246
        conta = "50352";
        contaMovimento = "50352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("2484")) { //ROT-2017-122246
        conta = "5164";
        contaMovimento = "5164";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("MULTA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("3148")) { //ROT-2017-122246
        conta = "50011";
        contaMovimento = "50011";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IRPJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("5993")) { //ROT-2017-122246
        conta = "5165";
        contaMovimento = "5165";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PIS")) { //ROT-2017-122246
        conta = "9184";
        contaMovimento = "9184";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("COFINS") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PGFN")) { //ROT-2017-122246
        conta = "5428";
        contaMovimento = "5428";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("SIMPLIFICADO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IRPJ/CSLL")) { //ROT-2017-122246
        conta = "50366";
        contaMovimento = "50366";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PIS/COFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PGFN")) { //ROT-2017-122246
        conta = "50297";
        contaMovimento = "50297";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT")) { //ROT-2017-122246
        conta = "9433";
        contaMovimento = "9433";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVID") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("HONO") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("1734") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("6615194")) { //ROT-2017-122246
        conta = "50301";
        contaMovimento = "50301";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVID") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("INSS") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PGFN")) { //ROT-2017-122246
        conta = "2077";
        contaMovimento = "2077";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVID") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF")) { //ROT-2017-122246
        conta = "976300";
        contaMovimento = "976300";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FED") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("11941") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("JURO")) { //ROT-2017-122246
        conta = "50012";
        contaMovimento = "50012";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FED") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("12996")) { //ROT-2017-122246
        conta = "7973";
        contaMovimento = "7973";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREV")) { //ROT-2017-122246
        conta = "9275";
        contaMovimento = "9275";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JURO")) { //ROT-2017-122246
        conta = "5007";
        contaMovimento = "5007";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PARC") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("JURO")) { //ROT-2017-122246
        conta = "5007";
        contaMovimento = "5007";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVID") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("HONO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("PGFN")) { //ROT-2017-122246
        conta = "50082";
        contaMovimento = "50082";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("JURO") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("HONO") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("1734") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("6700497")) { //ROT-2017-122246
        conta = "50303";
        contaMovimento = "50303";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAROLINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUNES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "976302";
        contaMovimento = "976302";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSISTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAUDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "852614";
        contaMovimento = "852614";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OTIMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BILHETAGEM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "942549";
        contaMovimento = "942549";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195772";
        contaMovimento = "5195772";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IEDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195670";
        contaMovimento = "5195670";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMUNICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VISUAL") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195781";
        contaMovimento = "5195781";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PALMEIRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195762";
        contaMovimento = "5195762";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIBEIRO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195773";
        contaMovimento = "5195773";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLLYANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NASCIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVEIRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195771";
        contaMovimento = "5195771";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRINCIBEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "717528";
        contaMovimento = "717528";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAILDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "5195789";
        contaMovimento = "5195789";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REFRI") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "506542";
        contaMovimento = "506542";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMPRES")) { //ROT-2017-122246
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSORCIO")) { //ROT-2017-122246
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO")) { //ROT-2017-122246
        conta = "50344";
        contaMovimento = "50344";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO")) { //ROT-2017-122246
        conta = "7932";
        contaMovimento = "7932";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATO") &&
        !StringUtil.removeSpecialCharsToUC(nomePortador).contains("0500001243")) { //ROT-2017-122246
        conta = "50106";
        contaMovimento = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FECHAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO")) { //ROT-2017-122246
        conta = "50106";
        contaMovimento = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESGATE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP")) { //ROT-2017-122246
        conta = "50106";
        contaMovimento = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORT.") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATO")) { //ROT-2017-122246
        conta = "7863";
        contaMovimento = "7863";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0500001243")) { //ROT-2017-122246
        conta = "9595";
        contaMovimento = "9595";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPREST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUTU")) { //ROT-2017-122246
        conta = "9488";
        contaMovimento = "9488";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARCELA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATO")) { //ROT-2017-122246
        conta = "7870";
        contaMovimento = "7870";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO")) { //ROT-2017-122246
        conta = "10588";
        contaMovimento = "10588";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP")) { //ROT-2017-122246
        conta = "50106";
        contaMovimento = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PGTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO")) { //ROT-2017-122246
        conta = "50106";
        contaMovimento = "50106";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERKIN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARTICIPACOES")) { //ROT-2017-122246
        conta = "50236";
        contaMovimento = "50236";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LENU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARTICIPACOES")) { //ROT-2017-122246
        conta = "10295";
        contaMovimento = "10295";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L2S") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARTICIPACOES")) { //ROT-2017-122246
        conta = "10294";
        contaMovimento = "10294";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000009046696")) { //ROT-2017-122246
        conta = "1367";
        contaMovimento = "1367";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CH")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000009046696")) { //ROT-2017-122246
        conta = "7439";
        contaMovimento = "7439";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000000782")) { //ROT-2017-122246
        conta = "7439";
        contaMovimento = "7439";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2017-122246
        conta = "976299";
        contaMovimento = "976299";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148536212")) { //ROT-2017-122246
        conta = "54";
        contaMovimento = "54";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESERVA")) { //ROT-2017-122246
        conta = "1362";
        contaMovimento = "1362";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPER")) { //ROT-2017-122246
        conta = "10588";
        contaMovimento = "10588";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUR CT GAR")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOC CT GAR")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB BX 063")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB ALT055")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMISSAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIANCA")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VILLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUPERMER") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "999268";
        contaMovimento = "999268";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REFRIGELO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "557554";
        contaMovimento = "557554";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J FEST") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "999266";
        contaMovimento = "999266";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLACK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOX") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "999267";
        contaMovimento = "999267";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NISSIN") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "8304";
        contaMovimento = "8304";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "50419";
        contaMovimento = "50419";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("1124")) { //ROT-2017-122246
        conta = "50367";
        contaMovimento = "50367";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJINOMOTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO")) { //ROT-2017-122246
        conta = "9786";
        contaMovimento = "9786";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMERICANAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FORN")) { //ROT-2017-122246
        conta = "50436";
        contaMovimento = "50436";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS IMPOSTOS MUNICIPAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALTERACAO")) { //ROT-2017-122246
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS IMPOSTOS MUNICIPAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TX") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FISCALIZACAO")) { //ROT-2017-122246
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS IMPOSTOS MUNICIPAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SANITAR") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FISCALIZACAO")) { //ROT-2017-122246
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQ.") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE CAC")) { //ROT-2017-122246
        conta = "50016";
        contaMovimento = "50016";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUIMICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMPARO")) { //ROT-2017-122246
        conta = "942556";
        contaMovimento = "942556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HEYDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE")) { //ROT-2017-122246
        conta = "999280";
        contaMovimento = "999280";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACCOR")) { //ROT-2017-122246
        conta = "999281";
        contaMovimento = "999281";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLAMBOYANT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REUN")) { //ROT-2017-122246
        conta = "942568";
        contaMovimento = "942568";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEPSICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) { //ROT-2017-122246
        conta = "7308";
        contaMovimento = "7308";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAKURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAKAYA")) { //ROT-2017-122246
        conta = "8100";
        contaMovimento = "8100";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) { //ROT-2017-122246
        conta = "8101";
        contaMovimento = "8101";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IN NOVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS")) { //ROT-2017-122246
        conta = "50273";
        contaMovimento = "50273";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND")) { //ROT-2017-122246
        conta = "50305";
        contaMovimento = "50305";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEUGEBAUER")) { //ROT-2017-122246
        conta = "942552";
        contaMovimento = "942552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOTICARIO")) { //ROT-2017-122246
        conta = "942566";
        contaMovimento = "942566";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELHORAMENTOS")) { //ROT-2017-122246
        conta = "50272";
        contaMovimento = "50272";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) { //ROT-2017-122246
        conta = "50229";
        contaMovimento = "50229";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERFOODS")) { //ROT-2017-122246
        conta = "8220";
        contaMovimento = "8220";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANCHEZ")) { //ROT-2017-122246
        conta = "50281";
        contaMovimento = "50281";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TROPICAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND")) { //ROT-2017-122246
        conta = "50283";
        contaMovimento = "50283";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOG")) { //ROT-2017-122246
        conta = "9243";
        contaMovimento = "9243";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIM")) { //ROT-2017-122246
        conta = "9387";
        contaMovimento = "9387";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARILAN")) { //ROT-2017-122246
        conta = "9787";
        contaMovimento = "9787";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARATI")) { //ROT-2017-122246
        conta = "9796";
        contaMovimento = "9796";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERN")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERN") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78-2")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78-2")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("14365")) { //ROT-2017-122246
        conta = "7340";
        contaMovimento = "7340";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("3342290115682")) { //ROT-2017-122246
        conta = "7190";
        contaMovimento = "7190";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("14936")) { //ROT-2017-122246
        conta = "7255";
        contaMovimento = "7255";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("22000")) { //ROT-2017-122246
        conta = "6709";
        contaMovimento = "6709";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("000046695")) { //ROT-2017-122246
        conta = "20";
        contaMovimento = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("15000")) { //ROT-2017-122246
        conta = "6708";
        contaMovimento = "6708";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("0148791825")) { //ROT-2017-122246
        conta = "7135";
        contaMovimento = "7135";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("SISDEB")) { //ROT-2017-122246
        conta = "5859";
        contaMovimento = "5859";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("CIPA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("HEINZ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("PEPSICO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("AJINOMOTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("MASTERFOODS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("KELLOGS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("CAMIL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) { //ROT-2017-122246
        conta = "1712";
        contaMovimento = "1712";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("14923")) { //ROT-2017-122246
        conta = "9351";
        contaMovimento = "9351";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("000058553")) { //ROT-2017-122246
        conta = "50021";
        contaMovimento = "50021";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FGTS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1660";
        contaMovimento = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("INSS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("9585") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0")) { //ROT-2017-122246
        conta = "6710";
        contaMovimento = "6710";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("TITULO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CAPITALIZACAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "162";
        contaMovimento = "162";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBC")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMP")) { //ROT-2017-122246
        conta = "1361";
        contaMovimento = "1361";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRRF")) { //ROT-2017-122246
        conta = "4329";
        contaMovimento = "4329";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS")) { //ROT-2017-122246
        conta = "4329";
        contaMovimento = "4329";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ST") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "50392";
        contaMovimento = "50392";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MULTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORATORIA")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) { //ROT-2017-122246
        conta = "1357";
        contaMovimento = "1357";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("LIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4554";
        contaMovimento = "4554";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4554";
        contaMovimento = "4554";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10156";
        contaMovimento = "10156";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10157";
        contaMovimento = "10157";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1689";
        contaMovimento = "1689";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1690";
        contaMovimento = "1690";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4333";
        contaMovimento = "4333";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4335";
        contaMovimento = "4335";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4334";
        contaMovimento = "4334";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NORMAL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1541";
        contaMovimento = "1541";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRREGULAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BDN")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIA")) { //ROT-2017-122246
        conta = "1357";
        contaMovimento = "1357";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) { //ROT-2017-122246
        conta = "1357";
        contaMovimento = "1357";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTADUAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELADOS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "2076";
        contaMovimento = "2076";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA")) { //ROT-2017-122246
        conta = "53";
        contaMovimento = "53";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENCARGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VINC")) { //ROT-2017-122246
        conta = "9635";
        contaMovimento = "9635";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTIF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VINC")) { //ROT-2017-122246
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTAMAX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESARIAL")) { //ROT-2017-122246
        conta = "4983";
        contaMovimento = "4983";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMATICO")) { //ROT-2017-122246
        conta = "53";
        contaMovimento = "53";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENSAL")) { //ROT-2017-122246
        conta = "1688";
        contaMovimento = "1688";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("TELEFONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALGAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELECOM") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4478";
        contaMovimento = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1582";
        contaMovimento = "1582";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1546";
        contaMovimento = "1546";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1580";
        contaMovimento = "1580";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1580";
        contaMovimento = "1580";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("TELEFONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOVEL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4478";
        contaMovimento = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("TELEFONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TELEFONICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4478";
        contaMovimento = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POUP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("18133")) { //ROT-2017-122246
        conta = "50027";
        contaMovimento = "50027";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "2829";
        contaMovimento = "2829";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2910") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10158";
        contaMovimento = "10158";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "2830";
        contaMovimento = "2830";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2910") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10159";
        contaMovimento = "10159";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("AGUA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("E") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESGOTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4476";
        contaMovimento = "4476";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10155";
        contaMovimento = "10155";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10152";
        contaMovimento = "10152";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10154";
        contaMovimento = "10154";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "10153";
        contaMovimento = "10153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("LANCHE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("REFEICAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("WAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LANCHES") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4546";
        contaMovimento = "4546";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ENCARGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXCESSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GARANT")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GARANTIDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENCARGO")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAPITAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTR")) { //ROT-2017-122246
        conta = "1356";
        contaMovimento = "1356";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEMAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) { //ROT-2017-122246
        conta = "9429";
        contaMovimento = "9429";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) { //ROT-2017-122246
        conta = "9227";
        contaMovimento = "9227";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("DOACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("E") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "5068";
        contaMovimento = "5068";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATADOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RCA")) { //ROT-2017-122246
        conta = "5090";
        contaMovimento = "5090";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MAQUINA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EQUIPAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DIMEX") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "50061";
        contaMovimento = "50061";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "9243";
        contaMovimento = "9243";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("C") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GARANTIDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF")) { //ROT-2017-122246
        conta = "7602";
        contaMovimento = "7602";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PASEP") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1580";
        contaMovimento = "1580";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APROVI") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1581";
        contaMovimento = "1581";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COLUNA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENSAL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4332";
        contaMovimento = "4332";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4351";
        contaMovimento = "4351";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F4") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F1") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CORREIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("E") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("POSTAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) { //ROT-2017-122246
        conta = "4479";
        contaMovimento = "4479";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("S") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMP") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTADUAL")) { //ROT-2017-122246
        conta = "2076";
        contaMovimento = "2076";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROVISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PGTO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("13") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("A") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITANTES")) { //ROT-2017-122246
        conta = "5538";
        contaMovimento = "5538";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COLUNA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4334";
        contaMovimento = "4334";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COLUNA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "4335";
        contaMovimento = "4335";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COLUNA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("D") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1686";
        contaMovimento = "1686";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COLUNA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("D") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1685";
        contaMovimento = "1685";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LABORE") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400033")) { //ROT-2017-122246
        conta = "4328";
        contaMovimento = "4328";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400034")) { //ROT-2017-122246
        conta = "50197";
        contaMovimento = "50197";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400036")) { //ROT-2017-122246
        conta = "4333";
        contaMovimento = "4333";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400037")) { //ROT-2017-122246
        conta = "4332";
        contaMovimento = "4332";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400038")) { //ROT-2017-122246
        conta = "4889";
        contaMovimento = "4889";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400039")) { //ROT-2017-122246
        conta = "4336";
        contaMovimento = "4336";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400040")) { //ROT-2017-122246
        conta = "4338";
        contaMovimento = "4338";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400041")) { //ROT-2017-122246
        conta = "4338";
        contaMovimento = "4338";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400042")) { //ROT-2017-122246
        conta = "4351";
        contaMovimento = "4351";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400043")) { //ROT-2017-122246
        conta = "50198";
        contaMovimento = "50198";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400119")) { //ROT-2017-122246
        conta = "4346";
        contaMovimento = "4346";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400048")) { //ROT-2017-122246
        conta = "50199";
        contaMovimento = "50199";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400050")) { //ROT-2017-122246
        conta = "4335";
        contaMovimento = "4335";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400051")) { //ROT-2017-122246
        conta = "4354";
        contaMovimento = "4354";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400052")) { //ROT-2017-122246
        conta = "4329";
        contaMovimento = "4329";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400089")) { //ROT-2017-122246
        conta = "4352";
        contaMovimento = "4352";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400153")) { //ROT-2017-122246
        conta = "50200";
        contaMovimento = "50200";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400155")) { //ROT-2017-122246
        conta = "50201";
        contaMovimento = "50201";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400156")) { //ROT-2017-122246
        conta = "50202";
        contaMovimento = "50202";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400045")) { //ROT-2017-122246
        conta = "50203";
        contaMovimento = "50203";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400012")) { //ROT-2017-122246
        conta = "50204";
        contaMovimento = "50204";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400013")) { //ROT-2017-122246
        conta = "50205";
        contaMovimento = "50205";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400020")) { //ROT-2017-122246
        conta = "50206";
        contaMovimento = "50206";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("480102")) { //ROT-2017-122246
        conta = "50207";
        contaMovimento = "50207";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000004")) { //ROT-2017-122246
        conta = "5381";
        contaMovimento = "5381";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000008")) { //ROT-2017-122246
        conta = "50208";
        contaMovimento = "50208";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000009")) { //ROT-2017-122246
        conta = "50209";
        contaMovimento = "50209";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000010")) { //ROT-2017-122246
        conta = "50210";
        contaMovimento = "50210";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000011")) { //ROT-2017-122246
        conta = "50211";
        contaMovimento = "50211";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000013")) { //ROT-2017-122246
        conta = "50212";
        contaMovimento = "50212";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("4000014")) { //ROT-2017-122246
        conta = "50213";
        contaMovimento = "50213";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000241")) { //ROT-2017-122246
        conta = "50214";
        contaMovimento = "50214";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000242")) { //ROT-2017-122246
        conta = "50215";
        contaMovimento = "50215";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000243")) { //ROT-2017-122246
        conta = "50216";
        contaMovimento = "50216";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000244")) { //ROT-2017-122246
        conta = "50217";
        contaMovimento = "50217";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000245")) { //ROT-2017-122246
        conta = "50218";
        contaMovimento = "50218";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000246")) { //ROT-2017-122246
        conta = "50219";
        contaMovimento = "50219";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000324")) { //ROT-2017-122246
        conta = "50103";
        contaMovimento = "50103";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000325")) { //ROT-2017-122246
        conta = "50220";
        contaMovimento = "50220";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000328")) { //ROT-2017-122246
        conta = "50221";
        contaMovimento = "50221";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000250")) { //ROT-2017-122246
        conta = "50156";
        contaMovimento = "50156";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000251")) { //ROT-2017-122246
        conta = "50157";
        contaMovimento = "50157";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000252")) { //ROT-2017-122246
        conta = "50158";
        contaMovimento = "50158";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000253")) { //ROT-2017-122246
        conta = "50159";
        contaMovimento = "50159";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000254")) { //ROT-2017-122246
        conta = "50160";
        contaMovimento = "50160";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000255")) { //ROT-2017-122246
        conta = "50161";
        contaMovimento = "50161";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000256")) { //ROT-2017-122246
        conta = "50162";
        contaMovimento = "50162";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000257")) { //ROT-2017-122246
        conta = "50163";
        contaMovimento = "50163";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000258")) { //ROT-2017-122246
        conta = "50164";
        contaMovimento = "50164";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000259")) { //ROT-2017-122246
        conta = "50165";
        contaMovimento = "50165";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000260")) { //ROT-2017-122246
        conta = "50166";
        contaMovimento = "50166";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000261")) { //ROT-2017-122246
        conta = "50167";
        contaMovimento = "50167";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000262")) { //ROT-2017-122246
        conta = "50168";
        contaMovimento = "50168";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000263")) { //ROT-2017-122246
        conta = "50169";
        contaMovimento = "50169";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000264")) { //ROT-2017-122246
        conta = "50170";
        contaMovimento = "50170";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000265")) { //ROT-2017-122246
        conta = "50171";
        contaMovimento = "50171";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000266")) { //ROT-2017-122246
        conta = "50172";
        contaMovimento = "50172";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000267")) { //ROT-2017-122246
        conta = "50173";
        contaMovimento = "50173";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000268")) { //ROT-2017-122246
        conta = "50174";
        contaMovimento = "50174";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000269")) { //ROT-2017-122246
        conta = "50175";
        contaMovimento = "50175";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000270")) { //ROT-2017-122246
        conta = "50176";
        contaMovimento = "50176";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000271")) { //ROT-2017-122246
        conta = "50177";
        contaMovimento = "50177";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000272")) { //ROT-2017-122246
        conta = "50178";
        contaMovimento = "50178";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000273")) { //ROT-2017-122246
        conta = "50179";
        contaMovimento = "50179";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000274")) { //ROT-2017-122246
        conta = "50180";
        contaMovimento = "50180";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000275")) { //ROT-2017-122246
        conta = "50181";
        contaMovimento = "50181";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000276")) { //ROT-2017-122246
        conta = "50182";
        contaMovimento = "50182";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000277")) { //ROT-2017-122246
        conta = "50183";
        contaMovimento = "50183";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000278")) { //ROT-2017-122246
        conta = "50184";
        contaMovimento = "50184";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000279")) { //ROT-2017-122246
        conta = "50185";
        contaMovimento = "50185";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000280")) { //ROT-2017-122246
        conta = "50186";
        contaMovimento = "50186";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000281")) { //ROT-2017-122246
        conta = "50188";
        contaMovimento = "50188";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000282")) { //ROT-2017-122246
        conta = "50189";
        contaMovimento = "50189";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000283")) { //ROT-2017-122246
        conta = "50190";
        contaMovimento = "50190";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000284")) { //ROT-2017-122246
        conta = "50191";
        contaMovimento = "50191";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000285")) { //ROT-2017-122246
        conta = "50192";
        contaMovimento = "50192";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000286")) { //ROT-2017-122246
        conta = "50193";
        contaMovimento = "50193";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000287")) { //ROT-2017-122246
        conta = "50194";
        contaMovimento = "50194";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000326")) { //ROT-2017-122246
        conta = "50195";
        contaMovimento = "50195";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("40000327")) { //ROT-2017-122246
        conta = "50196";
        contaMovimento = "50196";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200042")) { //ROT-2017-122246
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("400049")) { //ROT-2017-122246
        conta = "4334";
        contaMovimento = "4334";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("10062")) { //ROT-2017-122246
        conta = "314";
        contaMovimento = "314";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("100062")) { //ROT-2017-122246
        conta = "314";
        contaMovimento = "314";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200040")) { //ROT-2017-122246
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200058")) { //ROT-2017-122246
        conta = "1685";
        contaMovimento = "1685";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200059")) { //ROT-2017-122246
        conta = "1688";
        contaMovimento = "1688";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200062")) { //ROT-2017-122246
        conta = "1686";
        contaMovimento = "1686";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200063")) { //ROT-2017-122246
        conta = "1689";
        contaMovimento = "1689";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200076")) { //ROT-2017-122246
        conta = "1684";
        contaMovimento = "1684";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("200078")) { //ROT-2017-122246
        conta = "1690";
        contaMovimento = "1690";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        StringUtil.removeSpecialCharsToUC(documento).equals("")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONECT")) { //ROT-2017-122246
        conta = "50442";
        contaMovimento = "50442";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFACIL")) { //ROT-2017-122246
        conta = "942548";
        contaMovimento = "942548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OTIMO")) { //ROT-2017-122246
        conta = "942549";
        contaMovimento = "942549";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUNIOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAVARES")) { //ROT-2017-122246
        conta = "50413";
        contaMovimento = "50413";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KABUM")) { //ROT-2017-122246
        conta = "942563";
        contaMovimento = "942563";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REIS")) { //ROT-2017-122246
        conta = "50414";
        contaMovimento = "50414";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM")) { //ROT-2017-122246
        conta = "50415";
        contaMovimento = "50415";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCADO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGO")) { //ROT-2017-122246
        conta = "50459";
        contaMovimento = "50459";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUIMICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMPARO")) { //ROT-2017-122246
        conta = "942556";
        contaMovimento = "942556";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALELO")) { //ROT-2017-122246
        conta = "50412";
        contaMovimento = "50412";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMAZON")) { //ROT-2017-122246
        conta = "976296";
        contaMovimento = "976296";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMERICANAS")) { //ROT-2017-122246
        conta = "50436";
        contaMovimento = "50436";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUNES")) { //ROT-2017-122246
        conta = "976302";
        contaMovimento = "976302";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLACK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FOX")) { //ROT-2017-122246
        conta = "999267";
        contaMovimento = "999267";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMP")) { //ROT-2017-122246
        conta = "50440";
        contaMovimento = "50440";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DONIVAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAND")) { //ROT-2017-122246
        conta = "50408";
        contaMovimento = "50408";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROCHA")) { //ROT-2017-122246
        conta = "50404";
        contaMovimento = "50404";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HERBERT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCEL")) { //ROT-2017-122246
        conta = "50425";
        contaMovimento = "50425";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REUNIDAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLAMBO")) { //ROT-2017-122246
        conta = "942568";
        contaMovimento = "942568";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEST")) { //ROT-2017-122246
        conta = "999266";
        contaMovimento = "999266";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JANAINA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDA")) { //ROT-2017-122246
        conta = "976297";
        contaMovimento = "976297";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGAZINE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZA")) { //ROT-2017-122246
        conta = "50420";
        contaMovimento = "50420";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGLIONI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIBEIRO")) { //ROT-2017-122246
        conta = "942544";
        contaMovimento = "942544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAPETE")) { //ROT-2017-122246
        conta = "976298";
        contaMovimento = "976298";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATHEUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAZOLLI")) { //ROT-2017-122246
        conta = "942569";
        contaMovimento = "942569";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINEIRA")) { //ROT-2017-122246
        conta = "50419";
        contaMovimento = "50419";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLIDES")) { //ROT-2017-122246
        conta = "50416";
        contaMovimento = "50416";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTRANS")) { //ROT-2017-122246
        conta = "942546";
        contaMovimento = "942546";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEPSICO")) { //ROT-2017-122246
        conta = "7308";
        contaMovimento = "7308";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AB BRASIL")) { //ROT-2017-122246
        conta = "8101";
        contaMovimento = "8101";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLIND.")) { //ROT-2017-122246
        conta = "50305";
        contaMovimento = "50305";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS")) { //ROT-2017-122246
        conta = "50273";
        contaMovimento = "50273";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERFOODS")) { //ROT-2017-122246
        conta = "8220";
        contaMovimento = "8220";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TROPICAL")) { //ROT-2017-122246
        conta = "50283";
        contaMovimento = "50283";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARATI")) { //ROT-2017-122246
        conta = "9796";
        contaMovimento = "9796";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJINOMOTO")) { //ROT-2017-122246
        conta = "8104";
        contaMovimento = "8104";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOTICARIO")) { //ROT-2017-122246
        conta = "942566";
        contaMovimento = "942566";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARILAN")) { //ROT-2017-122246
        conta = "9787";
        contaMovimento = "9787";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMIL")) { //ROT-2017-122246
        conta = "9387";
        contaMovimento = "9387";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        StringUtil.removeSpecialCharsToUC(documento).equals("-")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REC DESP")) { //ROT-2017-122246
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES")) { //ROT-2017-122246
        conta = "50363";
        contaMovimento = "50363";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCARIA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RENDIMENTOS S/APLICACOES")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) { //ROT-2022-1237392
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("BRINDE")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "2829";
        contaMovimento = "2829";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10158";
        contaMovimento = "10158";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANCEIRA")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10152";
        contaMovimento = "10152";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10154";
        contaMovimento = "10154";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10156";
        contaMovimento = "10156";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADAS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "2830";
        contaMovimento = "2830";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10159";
        contaMovimento = "10159";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10153";
        contaMovimento = "10153";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10155";
        contaMovimento = "10155";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10157";
        contaMovimento = "10157";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITOS")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERIODOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTERIORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPENSAR")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2017-122246
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SELIC") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10156";
        contaMovimento = "10156";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SELIC") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) { //ROT-2017-122246
        conta = "10157";
        contaMovimento = "10157";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3342130022132")) { //ROT-2017-122246
        conta = "6714";
        contaMovimento = "6714";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0148536212")) { //ROT-2017-122246
        conta = "6711";
        contaMovimento = "6711";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000009046696")) { //ROT-2017-122246
        conta = "50045";
        contaMovimento = "50045";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("640000")) { //ROT-2017-122246
        conta = "50451";
        contaMovimento = "50451";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("647000")) { //ROT-2017-122246
        conta = "50452";
        contaMovimento = "50452";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("9585-0")) { //ROT-2017-122246
        conta = "6710";
        contaMovimento = "6710";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000000782")) { //ROT-2017-122246
        conta = "50044";
        contaMovimento = "50044";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01310045141")) { //ROT-2017-122246
        conta = "6712";
        contaMovimento = "6712";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01315018133")) { //ROT-2017-122246
        conta = "50026";
        contaMovimento = "50026";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3342290119631")) { //ROT-2017-122246
        conta = "50456";
        contaMovimento = "50456";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("14923-3")) { //ROT-2017-122246
        conta = "9351";
        contaMovimento = "9351";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("35633-6")) { //ROT-2017-122246
        conta = "942553";
        contaMovimento = "942553";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("36267-0")) { //ROT-2017-122246
        conta = "942562";
        contaMovimento = "942562";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01315015410")) { //ROT-2017-122246
        conta = "7391";
        contaMovimento = "7391";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2216051") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) { //ROT-2017-122246
        conta = "50042";
        contaMovimento = "50042";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("6608975") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) { //ROT-2017-122246
        conta = "7936";
        contaMovimento = "7936";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("6608974") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) { //ROT-2017-122246
        conta = "7929";
        contaMovimento = "7929";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("602251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) { //ROT-2017-122246
        conta = "50104";
        contaMovimento = "50104";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("702251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) { //ROT-2017-122246
        conta = "50105";
        contaMovimento = "50105";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0007152908") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) { //ROT-2017-122246
        conta = "5634";
        contaMovimento = "5634";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006986422") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) { //ROT-2017-122246
        conta = "7463";
        contaMovimento = "7463";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006706662") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) { //ROT-2017-122246
        conta = "50287";
        contaMovimento = "50287";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006706670") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) { //ROT-2017-122246
        conta = "50288";
        contaMovimento = "50288";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("33716-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) { //ROT-2017-122246
        conta = "50015";
        contaMovimento = "50015";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0590001244") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) { //ROT-2017-122246
        conta = "9528";
        contaMovimento = "9528";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0500001243") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) { //ROT-2017-122246
        conta = "9527";
        contaMovimento = "9527";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("78474-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) { //ROT-2017-122246
        conta = "50054";
        contaMovimento = "50054";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("78545-1") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) { //ROT-2017-122246
        conta = "50228";
        contaMovimento = "50228";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("41702-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) { //ROT-2017-122246
        conta = "9483";
        contaMovimento = "9483";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000120267") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) { //ROT-2017-122246
        conta = "8845";
        contaMovimento = "8845";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000120275") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) { //ROT-2017-122246
        conta = "8846";
        contaMovimento = "8846";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1.125.527-7") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) { //ROT-2017-122246
        conta = "50035";
        contaMovimento = "50035";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1.125.528-5") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) { //ROT-2017-122246
        conta = "50036";
        contaMovimento = "50036";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3716-4") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) { //ROT-2017-122246
        conta = "50014";
        contaMovimento = "50014";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("301970")) { //ROT-2017-122246
        conta = "999318";
        contaMovimento = "999318";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("301962")) { //ROT-2017-122246
        conta = "999314";
        contaMovimento = "999314";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("37")) { //ROT-2017-122246
        conta = "50242";
        contaMovimento = "50242";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("50349")) { //ROT-2017-122246
        conta = "50349";
        contaMovimento = "50349";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000276")) { //ROT-2017-122246
        conta = "50182";
        contaMovimento = "50182";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000277")) { //ROT-2017-122246
        conta = "50183";
        contaMovimento = "50183";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000256")) { //ROT-2017-122246
        conta = "50162";
        contaMovimento = "50162";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000258")) { //ROT-2017-122246
        conta = "50164";
        contaMovimento = "50164";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000278")) { //ROT-2017-122246
        conta = "50184";
        contaMovimento = "50184";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000291")) { //ROT-2017-122246
        conta = "50344";
        contaMovimento = "50344";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000295")) { //ROT-2017-122246
        conta = "50326";
        contaMovimento = "50326";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000298")) { //ROT-2017-122246
        conta = "50335";
        contaMovimento = "50335";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000306")) { //ROT-2017-122246
        conta = "50279";
        contaMovimento = "50279";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000311")) { //ROT-2017-122246
        conta = "50349";
        contaMovimento = "50349";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000321")) { //ROT-2017-122246
        conta = "50270";
        contaMovimento = "50270";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000324")) { //ROT-2017-122246
        conta = "50103";
        contaMovimento = "50103";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400045")) { //ROT-2017-122246
        conta = "4341";
        contaMovimento = "4341";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400051")) { //ROT-2017-122246
        conta = "4354";
        contaMovimento = "4354";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400058")) { //ROT-2017-122246
        conta = "50088";
        contaMovimento = "50088";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400066")) { //ROT-2017-122246
        conta = "50337";
        contaMovimento = "50337";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400068")) { //ROT-2017-122246
        conta = "50098";
        contaMovimento = "50098";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400069")) { //ROT-2017-122246
        conta = "50092";
        contaMovimento = "50092";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400083")) { //ROT-2017-122246
        conta = "50060";
        contaMovimento = "50060";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("480103")) { //ROT-2017-122246
        conta = "50061";
        contaMovimento = "50061";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400042")) { //ROT-2017-122246
        conta = "4351";
        contaMovimento = "4351";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000296")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400089")) { //ROT-2017-122246
        conta = "4352";
        contaMovimento = "4352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400087")) { //ROT-2017-122246
        conta = "50338";
        contaMovimento = "50338";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO IRRF PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IMPOSTO NF.SERVICO")) { //ROT-2017-122246
        conta = "1546";
        contaMovimento = "1546";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO CSRF PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IMPOSTO NF.SERVICO")) { //ROT-2017-122246
        conta = "1580";
        contaMovimento = "1580";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF")) { //ROT-2017-122246
        conta = "1659";
        contaMovimento = "1659";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("JURO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("REC")) { //ROT-2017-122246
        conta = "2860";
        contaMovimento = "2860";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESCONTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OBTIDOS")) { //ROT-2017-122246
        conta = "2858INVERTE";
        contaMovimento = "2858INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COMERCIAL")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL")) { //ROT-2017-122246
        conta = "50352";
        contaMovimento = "50352";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("PARCEL")) { //ROT-2017-122246
        conta = "4701";
        contaMovimento = "4701";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VERBA")) { //ROT-2017-122246
        conta = "50350INVERTE";
        contaMovimento = "50350INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUIMICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMPARO")) { //ROT-2017-122246
        conta = "942556";
        contaMovimento = "942556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HEYDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE")) { //ROT-2017-122246
        conta = "999280";
        contaMovimento = "999280";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACCOR")) { //ROT-2017-122246
        conta = "999281";
        contaMovimento = "999281";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLAMBOYANT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REUN")) { //ROT-2017-122246
        conta = "942568";
        contaMovimento = "942568";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEPSICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) { //ROT-2017-122246
        conta = "7308";
        contaMovimento = "7308";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAKURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAKAYA")) { //ROT-2017-122246
        conta = "8100";
        contaMovimento = "8100";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) { //ROT-2017-122246
        conta = "8101";
        contaMovimento = "8101";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IN NOVA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS")) { //ROT-2017-122246
        conta = "50273";
        contaMovimento = "50273";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND")) { //ROT-2017-122246
        conta = "50305";
        contaMovimento = "50305";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEUGEBAUER")) { //ROT-2017-122246
        conta = "942552";
        contaMovimento = "942552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOTICARIO")) { //ROT-2017-122246
        conta = "942566";
        contaMovimento = "942566";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELHORAMENTOS")) { //ROT-2017-122246
        conta = "50272";
        contaMovimento = "50272";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3M") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL")) { //ROT-2017-122246
        conta = "50229";
        contaMovimento = "50229";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERFOODS")) { //ROT-2017-122246
        conta = "8220";
        contaMovimento = "8220";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANCHEZ")) { //ROT-2017-122246
        conta = "50281";
        contaMovimento = "50281";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TROPICAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IND")) { //ROT-2017-122246
        conta = "50283";
        contaMovimento = "50283";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOG")) { //ROT-2017-122246
        conta = "9243";
        contaMovimento = "9243";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIM")) { //ROT-2017-122246
        conta = "9387";
        contaMovimento = "9387";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARILAN")) { //ROT-2017-122246
        conta = "9787";
        contaMovimento = "9787";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARATI")) { //ROT-2017-122246
        conta = "9796";
        contaMovimento = "9796";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERN") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78-2")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78-2")) { //ROT-2017-122246
        conta = "142";
        contaMovimento = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        StringUtil.removeSpecialCharsToUC(documento).equals("")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        StringUtil.removeSpecialCharsToUC(documento).equals("-")) { //ROT-2017-122246
        conta = "50350";
        contaMovimento = "50350";
        return conta;
    }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES")) {
        conta = "Quando Tipo Planilha contem 'BRINDES', CONTA MOVIMENTO SERA = '50363' PORT: '5274'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCARIA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (01) contem 'TARIFA', Complemento (01) contem 'BANCARIA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RENDIMENTOS S/APLICACOES")) {
        conta = "Quando Complemento (01) comeca com 'RENDIMENTOS S/APLICACOES', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTOPAGGRUPOOPEL1', Complemento (06) contem 'TOTAL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("BRINDE")) {
        conta = "Quando Tipo Planilha contem 'AAAOUTRASENTRADAS', Complemento (05) nao contem 'BRINDE', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RECEITAS', Fornecedor/Cliente contem 'TRIBUTADAS', Complemento (05) nao contem 'COFINS', CONTA MOVIMENTO SERA = '2829'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'OUTRAS', Fornecedor/Cliente contem 'RECEITAS', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RECEITA', Fornecedor/Cliente contem 'BONIFICACAO', Complemento (05) nao contem 'COFINS', CONTA MOVIMENTO SERA = '10158'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANCEIRA")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RECEITA', Fornecedor/Cliente contem 'FINANCEIRA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'DESCONTO', Fornecedor/Cliente contem 'OBTIDO', Complemento (05) nao contem 'COFINS', CONTA MOVIMENTO SERA = '10152'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'JUROS', Fornecedor/Cliente contem 'RECEBIDOS', Complemento (05) nao contem 'COFINS', CONTA MOVIMENTO SERA = '10154'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RENDIMENTOS', Complemento (05) nao contem 'COFINS', CONTA MOVIMENTO SERA = '10156'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'CREDITO', Fornecedor/Cliente contem 'SERVICO', Fornecedor/Cliente contem 'TRANSPORTE', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRIBUTADAS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RECEITAS', Fornecedor/Cliente contem 'TRIBUTADAS', Complemento (05) contem 'COFINS', CONTA MOVIMENTO SERA = '2830'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEITA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RECEITA', Fornecedor/Cliente contem 'BONIFICACAO', Complemento (05) contem 'COFINS', CONTA MOVIMENTO SERA = '10159'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OBTIDO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'DESCONTO', Fornecedor/Cliente contem 'OBTIDO', Complemento (05) contem 'COFINS', CONTA MOVIMENTO SERA = '10153'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECEBIDOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'JUROS', Fornecedor/Cliente contem 'RECEBIDOS', Complemento (05) contem 'COFINS', CONTA MOVIMENTO SERA = '10155'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDIMENTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'RENDIMENTOS', Complemento (05) contem 'COFINS', CONTA MOVIMENTO SERA = '10157'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITOS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'TOTAL', Fornecedor/Cliente contem 'CREDITOS', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'OUTROS', Fornecedor/Cliente contem 'CREDITOS', Fornecedor/Cliente contem 'ESTORNO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERIODOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTERIORES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPENSAR")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'PERIODOS', Fornecedor/Cliente contem 'ANTERIORES', Fornecedor/Cliente contem 'COMPENSAR', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SELIC") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'SELIC', Complemento (05) nao contem 'COFINS', CONTA MOVIMENTO SERA = '10156'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SELIC") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "Quando Tipo Planilha contem 'PISCOFINS', Fornecedor/Cliente contem 'SELIC', Complemento (05) contem 'COFINS', CONTA MOVIMENTO SERA = '10157'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3342130022132")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '3342130022132', CONTA MOVIMENTO SERA = '6714'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0148536212")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0148536212', CONTA MOVIMENTO SERA = '6711'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000009046696")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0000009046696', CONTA MOVIMENTO SERA = '50045'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("640000")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '640000', CONTA MOVIMENTO SERA = '50451'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("647000")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '647000', CONTA MOVIMENTO SERA = '50452'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("9585-0")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '9585-0', CONTA MOVIMENTO SERA = '6710'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000000782")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0000000000782', CONTA MOVIMENTO SERA = '50044'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01310045141")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '01310045141', CONTA MOVIMENTO SERA = '6712'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01315018133")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '01315018133', CONTA MOVIMENTO SERA = '50026'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3342290119631")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '3342290119631', CONTA MOVIMENTO SERA = '50456'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("14923-3")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '14923-3', CONTA MOVIMENTO SERA = '9351'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("35633-6")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '35633-6', CONTA MOVIMENTO SERA = '942553'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("36267-0")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '36267-0', CONTA MOVIMENTO SERA = '942562'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("01315015410")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '01315015410', CONTA MOVIMENTO SERA = '7391'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("2216051") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '2216051', Complemento (06) nao contem 'ABC', CONTA MOVIMENTO SERA = '50042'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("6608975") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '6608975', Complemento (06) nao contem 'ABC', CONTA MOVIMENTO SERA = '7936'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("6608974") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '6608974', Complemento (06) nao contem 'ABC', CONTA MOVIMENTO SERA = '7929'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("602251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '602251', Complemento (06) nao contem 'BBM', CONTA MOVIMENTO SERA = '50104'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("702251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '702251', Complemento (06) nao contem 'BBM', CONTA MOVIMENTO SERA = '50105'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0007152908") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0007152908', Complemento (06) nao contem 'DAYCOVAL', CONTA MOVIMENTO SERA = '5634'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006986422") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0006986422', Complemento (06) nao contem 'DAYCOVAL', CONTA MOVIMENTO SERA = '7463'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006706662") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0006706662', Complemento (06) nao contem 'FIBRA', CONTA MOVIMENTO SERA = '50287'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0006706670") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0006706670', Complemento (06) nao contem 'FIBRA', CONTA MOVIMENTO SERA = '50288'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("33716-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '33716-8', Complemento (06) nao contem 'GUANABARA', CONTA MOVIMENTO SERA = '50015'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0590001244") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0590001244', Complemento (06) nao contem 'INDUSTRIAL', CONTA MOVIMENTO SERA = '9528'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0500001243") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0500001243', Complemento (06) nao contem 'INDUSTRIAL', CONTA MOVIMENTO SERA = '9527'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("78474-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '78474-8', Complemento (06) nao contem 'PAULISTA', CONTA MOVIMENTO SERA = '50054'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("78545-1") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '78545-1', Complemento (06) nao contem 'PAULISTA', CONTA MOVIMENTO SERA = '50228'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("41702-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '41702-8', Complemento (06) nao contem 'PAULISTA', CONTA MOVIMENTO SERA = '9483'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000120267") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0000120267', Complemento (06) nao contem 'SOFISA', CONTA MOVIMENTO SERA = '8845'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000120275") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0000120275', Complemento (06) nao contem 'SOFISA', CONTA MOVIMENTO SERA = '8846'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1.125.527-7") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '1.125.527-7', Complemento (06) nao contem 'VOTORANTIM', CONTA MOVIMENTO SERA = '50035'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1.125.528-5") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '1.125.528-5', Complemento (06) nao contem 'VOTORANTIM', CONTA MOVIMENTO SERA = '50036'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("3716-4") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '3716-4', Complemento (06) nao contem 'GUANABARA', CONTA MOVIMENTO SERA = '50014'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("301970")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '301970', CONTA MOVIMENTO SERA = '999318'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("301962")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '301962', CONTA MOVIMENTO SERA = '999314'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("37")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '37', CONTA MOVIMENTO SERA = '50242'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("50349")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '50349', CONTA MOVIMENTO SERA = '50349'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000276")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000276', CONTA MOVIMENTO SERA = '50182'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000277")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000277', CONTA MOVIMENTO SERA = '50183'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000256")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000256', CONTA MOVIMENTO SERA = '50162'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000258")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000258', CONTA MOVIMENTO SERA = '50164'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000278")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000278', CONTA MOVIMENTO SERA = '50184'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000291")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000291', CONTA MOVIMENTO SERA = '50344'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000295")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000295', CONTA MOVIMENTO SERA = '50326'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000298")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000298', CONTA MOVIMENTO SERA = '50335'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000306")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000306', CONTA MOVIMENTO SERA = '50279'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000311")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000311', CONTA MOVIMENTO SERA = '50349'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000321")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000321', CONTA MOVIMENTO SERA = '50270'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000324")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000324', CONTA MOVIMENTO SERA = '50103'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400045")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400045', CONTA MOVIMENTO SERA = '4341'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400051")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400051', CONTA MOVIMENTO SERA = '4354'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400058")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400058', CONTA MOVIMENTO SERA = '50088'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400066")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400066', CONTA MOVIMENTO SERA = '50337'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400068")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400068', CONTA MOVIMENTO SERA = '50098'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400069")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400069', CONTA MOVIMENTO SERA = '50092'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400083")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400083', CONTA MOVIMENTO SERA = '50060'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("480103")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '480103', CONTA MOVIMENTO SERA = '50061'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400042")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400042', CONTA MOVIMENTO SERA = '4351'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("40000296")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '40000296', CONTA MOVIMENTO SERA = '50350'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400089")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400089', CONTA MOVIMENTO SERA = '4352'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("400087")) {
        conta = "Quando Tipo Planilha contem 'SERVICO', Fornecedor/Cliente igual a '400087', CONTA MOVIMENTO SERA = '50338'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO IRRF PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IMPOSTO NF.SERVICO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) comeca com 'RETENCAO IRRF PJ', Complemento (06) contem 'IMPOSTO NF.SERVICO', CONTA MOVIMENTO SERA = '1546'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO CSRF PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("IMPOSTO NF.SERVICO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) comeca com 'RETENCAO CSRF PJ', Complemento (06) contem 'IMPOSTO NF.SERVICO', CONTA MOVIMENTO SERA = '1580'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("INSS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) igual a 'INSS', Complemento (06) contem 'DARF', CONTA MOVIMENTO SERA = '1659'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("JURO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("REC")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'JUROS', Complemento (06) contem 'ESTORNO', Complemento (06) contem 'JURO', Complemento (06) contem 'REC', CONTA MOVIMENTO SERA = '2860'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNEC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "Quando Complemento (01) comeca com 'ADIANTAMENTO', Complemento (01) contem 'FORNEC', Fornecedor/Cliente contem 'POLI', Fornecedor/Cliente contem 'LOGISTICA', CONTA MOVIMENTO SERA = '9243'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ADIANTAMENTO DE SALARIOS")) {
        conta = "Quando Complemento (01) comeca com 'ADIANTAMENTO DE SALARIOS', CONTA MOVIMENTO SERA = '312'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("CORREIOS E POSTAGENS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS FORNECEDORES")) {
        conta = "Quando Complemento (01) comeca com 'CORREIOS E POSTAGENS', Fornecedor/Cliente contem 'OUTROS FORNECEDORES', CONTA MOVIMENTO SERA = '4479'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("AGUA E ESGOTO")) {
        conta = "Quando Complemento (01) comeca com 'AGUA E ESGOTO', CONTA MOVIMENTO SERA = '4476'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("ICMS ST")) {
        conta = "Quando Complemento (01) comeca com 'ICMS ST', CONTA MOVIMENTO SERA = '50392'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("LANCHE/REFEICAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("WAS LANCHES")) {
        conta = "Quando Complemento (01) comeca com 'LANCHE/REFEICAO', Fornecedor/Cliente comeca com 'WAS LANCHES', CONTA MOVIMENTO SERA = '4546'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("LOCACAO MAQUINA-EQUIPAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DIMEX DO TRIANGULO")) {
        conta = "Quando Complemento (01) comeca com 'LOCACAO MAQUINA-EQUIPAMENTO', Fornecedor/Cliente comeca com 'DIMEX DO TRIANGULO', CONTA MOVIMENTO SERA = '50061'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PENSAO ALIMENTICIA")) {
        conta = "Quando Complemento (01) comeca com 'PENSAO ALIMENTICIA', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SALARIOS (PROVISAO FOLHA PGTO)")) {
        conta = "Quando Complemento (01) comeca com 'SALARIOS (PROVISAO FOLHA PGTO)', CONTA MOVIMENTO SERA = '1634'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("FGTS")) {
        conta = "Quando Complemento (01) comeca com 'FGTS', CONTA MOVIMENTO SERA = '1660'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSI")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DEVOL', Fornecedor/Cliente contem 'CHEQUE', Fornecedor/Cliente contem 'DEPOSI', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATTAR")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TAR', Fornecedor/Cliente nao contem 'MATTAR', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO IRREGULAR BDN")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'OPERACAO IRREGULAR BDN', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("DEBITO DESCONTO CHEQUE")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'DEBITO DESCONTO CHEQUE', CONTA MOVIMENTO SERA = '142'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC/TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DOC/TED', Fornecedor/Cliente contem 'INTERNET', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ENCARGO EXCESSO C GARANT")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'ENCARGO EXCESSO C GARANT', CONTA MOVIMENTO SERA = '5538'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ENCARGOS C GARANTIDA ENCARGO CONTR")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'ENCARGOS C GARANTIDA ENCARGO CONTR', CONTA MOVIMENTO SERA = '5538'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("ENCARGOS C GARANTIDA IOF")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'ENCARGOS C GARANTIDA IOF', CONTA MOVIMENTO SERA = '7602'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO CAPITAL GIRO CONTR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8860357")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'OPERACAO CAPITAL GIRO CONTR', Fornecedor/Cliente contem '8860357', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("MOVIMENTO DO DIA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente comeca com 'MOVIMENTO DO DIA', CONTA MOVIMENTO SERA = '1357'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DEBITO', Fornecedor/Cliente contem 'SERVICO', Fornecedor/Cliente contem 'COBRANCA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'IOF', CONTA MOVIMENTO SERA = '7602'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES")) {
        conta = "5274";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("10")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("104")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("637")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("17")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("237")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("45")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("907")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("913")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("916")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10174";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50376";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50347";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10160";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOMADO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50348";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50388";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10160INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50354";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "1556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10175";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50375";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50460";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10161";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOMADO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50346";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50387";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FCP") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10191";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50353";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "1552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10164INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50359";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FCP") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10192";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10161INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10165INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50358";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "384INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "385INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10160INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10161INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ACS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMERCIAL")) {
        conta = "831399";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INSTITUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO")) {
        conta = "521438";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALVES")) {
        conta = "833999";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALEXANDRE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MACEDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HENRIQUE")) {
        conta = "854623";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALGAR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MULTIMIDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("S/A")) {
        conta = "506513";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ANIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "580448";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ASERCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSESSORIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONT")) {
        conta = "500000";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("B2LIST") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TECNOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INFORMACAO")) {
        conta = "852499";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BAPTISTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("S/C")) {
        conta = "762223";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BIANCA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SC") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OLIVEIRA")) {
        conta = "857564";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BRUNO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BRAGA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACAO")) {
        conta = "503588";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BUYSOFT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "831868";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARLA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DOMINGUES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARTINS")) {
        conta = "849796";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CENACULO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("EIRELI")) {
        conta = "838142";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CERIZZE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOCIEDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ADVOGADOS")) {
        conta = "832501";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONQUISTE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOLUCOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARKETING")) {
        conta = "855367";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CORRETA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MOC")) {
        conta = "508295";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CYBELLE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LEOPOLDINA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCALVES")) {
        conta = "858717";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DIEGO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SILVA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BENEDITO")) {
        conta = "842301";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DIMAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NETO")) {
        conta = "856561";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DIOGO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARVALHO")) {
        conta = "834103";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("E") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("M") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONSULTE")) {
        conta = "858210";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ELIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARCELINO")) {
        conta = "851429";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ELISA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AMORIM") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FARIA")) {
        conta = "580446";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ERIC") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ZAVATARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACAO")) {
        conta = "858710";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ERIKA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOPES")) {
        conta = "832094";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FABIANO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NOMINATO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CAZETTA")) {
        conta = "840857";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FAINA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TOLEDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVICO")) {
        conta = "709792";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FELIPE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCALVES")) {
        conta = "858234";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LITTIG")) {
        conta = "843480";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FREDERICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AUGUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RIBEIRO")) {
        conta = "842522";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FRIOCLIMA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INSTALACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TERMICAS")) {
        conta = "5192680";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FUNDACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MACONICA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MANOEL")) {
        conta = "515375";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GLEISSON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALEXANDRE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALVES")) {
        conta = "840851";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GRAFICA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIANCA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("UBERLANDIA")) {
        conta = "530810";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GSM") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMERCIAIS")) {
        conta = "841809";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GUILHERME") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANNOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LIMA")) {
        conta = "849103";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GUSTAVO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAULO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACAO")) {
        conta = "846071";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HEDER") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HUNAS")) {
        conta = "844070";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALVORADA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LEOPOLDINA")) {
        conta = "841804";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CASTANHEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IPTAGINGA")) {
        conta = "641325";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MERI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "858791";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARTINS")) {
        conta = "530834";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INSTITUTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POSSO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MAIS")) {
        conta = "758441";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IONS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LABS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INFORMATICA")) {
        conta = "843026";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IRENIZE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOPES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VIEIRA")) {
        conta = "846172";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IRMAOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BORBA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PUBLICIDADE")) {
        conta = "944371";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JEAN") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("P S") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDES")) {
        conta = "857565";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JESSICA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARMO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RIBEIRO")) {
        conta = "503573";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("KALYSTON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AUGUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FREITAS")) {
        conta = "858213";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("KARLA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APARECIDA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SANTOS")) {
        conta = "831145";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("KEEP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ACESSORIOS")) {
        conta = "617740";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LCR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMUNICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VISUAL")) {
        conta = "830413";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LESLEY") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARLOS")) {
        conta = "844401";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOURENCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARVALHO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMUNICACAO")) {
        conta = "836351";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUANA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NUNES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SILVA")) {
        conta = "858718";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUCIANO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALMEIDA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LIMA")) {
        conta = "835477";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PINHO")) {
        conta = "726464";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REIS")) {
        conta = "830655";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CARLOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PINHEIRO")) {
        conta = "732578";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARCELO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LIMA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COELHO")) {
        conta = "732363";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MANUELA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AZEVEDO")) {
        conta = "590396";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MATABEM") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONTROLE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PRAGAS")) {
        conta = "590819";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MINEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOGISTICA")) {
        conta = "530570";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MICHAELTEC") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TECNOLOGIA")) {
        conta = "761007";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MQ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TREINAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DESENVOLVIMENTO")) {
        conta = "854354";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NEOGRID") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INFORMATICA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "846198";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NEXXERA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MERCANTIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVICO")) {
        conta = "831978";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OSWALDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROCHA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OLIVEIRA")) {
        conta = "850410";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPUTADORES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVICO")) {
        conta = "530853";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PEDRO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DIRCEU") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SEDASSARI")) {
        conta = "530749";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PETRONIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACOES")) {
        conta = "503575";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POLI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOGISTICA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "504710";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POUSADA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GIRAMUNDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "846073";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RAIMUNDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALMEIDA")) {
        conta = "544845";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REINALDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARCELINO")) {
        conta = "842521";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RENAN") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NUNES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SILVA")) {
        conta = "860777";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RENATA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SANTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NOLASCO")) {
        conta = "831858";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RENATO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HELMUTH") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NEUMANN")) {
        conta = "726153";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROBERT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROCHA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DINIZ")) {
        conta = "635437";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROSANA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MENDES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DIAS")) {
        conta = "5192396";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROSSINI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "852502";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RUBIANA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MENDES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REZENDE")) {
        conta = "841271";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("S&P") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PET") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMERCIO")) {
        conta = "847943";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SALTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOLUCOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AMBIENTAIS")) {
        conta = "553141";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SCP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAMPULHA")) {
        conta = "839465";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SEBASTIAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOUZA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACAO")) {
        conta = "858211";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SENDAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LJ158")) {
        conta = "741295";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SENIOR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SISTEMAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("S/A")) {
        conta = "666157";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERASA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("S/A")) {
        conta = "501211";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PARA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BEM")) {
        conta = "520426";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SIMONE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HELENA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOARES")) {
        conta = "583068";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SIMONE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VERA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUCIA")) {
        conta = "853581";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SISTEM") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ID") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOLUCOES")) {
        conta = "857767";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TANIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NUNES")) {
        conta = "527730";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TARGUS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SISTEMAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INFORMACAO")) {
        conta = "853837";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TERRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NETWORK") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BRASIL")) {
        conta = "537140";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("THALLYTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOUZA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FIGUEIREDO")) {
        conta = "860782";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("THAYLA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TEIXEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CASALECHI")) {
        conta = "5192427";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("THIAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ANTONACCI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DINIZ")) {
        conta = "839416";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TOTVS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TECNOLOGIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOFTWARE")) {
        conta = "758484";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TRUSTON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SEGURANCA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INFORMACAO")) {
        conta = "844041";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VANESSA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ARAUJO")) {
        conta = "854183";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VANUSA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOUZA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LIMA")) {
        conta = "857567";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VIP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOLUCOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PERSONALIZADAS")) {
        conta = "710601";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("WALDINEY") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GOMES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOPES")) {
        conta = "834922";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLISS")) {
        conta = "1582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLCSRF")) {
        conta = "1580";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLIRRF")) {
        conta = "1546";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLINSS")) {
        conta = "1581";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BRANDAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LEITE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "530616";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BRILHANTE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "759941";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CENOFISCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CENTRO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PROFISSIONAL")) {
        conta = "522084";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CENTER") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MED") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OLIVEIRA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONS.") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OPER.") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TRANSFACIL")) {
        conta = "942548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONSORCIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("OTIMO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BILHETAGEM")) {
        conta = "942549";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CRISTIMAR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERGIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALVES")) {
        conta = "530698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CV") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TELECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "5193711";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("EDGAR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JOSE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VASCONCELOS")) {
        conta = "665842";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ELANIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARTINS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CIRILO")) {
        conta = "5193217";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ELDORADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTELARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("EVENTOS")) {
        conta = "5193235";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("EMPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOLUCOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GRAFICAS")) {
        conta = "587607";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ERIKA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ANDRADE") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ESPLANADA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TIJUCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "726149";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GIOVANI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCALVES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REIS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GMM") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "5193219";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ABBA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BETIM")) {
        conta = "861420";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MONARCA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTELARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RODRIGUES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CUNHA")) {
        conta = "534843";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IBIRAPUERA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONVENTION")) {
        conta = "727305";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPACTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMUNICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FRUTAL")) {
        conta = "5192599";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ION") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LABS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INFORMATICA")) {
        conta = "843026";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JOAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERREIRA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("KARINNA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MAYARA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDEZ")) {
        conta = "5193741";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LAYOUT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GRAFICA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RAPIDA")) {
        conta = "628183";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APARECIDA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AZEVEDO")) {
        conta = "5193375";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARINA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROSA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PINTO")) {
        conta = "859442";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAULISTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PALACE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL")) {
        conta = "577627";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PINTART") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SINALIZACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TRANSITO")) {
        conta = "5193789";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POUSADA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("65")) {
        conta = "5193708";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RAMETTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOARES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BATISTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AGUILAR")) {
        conta = "5193705";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROSEMBE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BATISTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERREIRA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SAP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SUCESSO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSESSORIA")) {
        conta = "600587";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SILVIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BATISTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DUARTE")) {
        conta = "840371";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SIMONE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NOGUEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALMEIDA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOCIEDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEIS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TURISMO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOUL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FLATS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ADMINISTRADORA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("UNIMED") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COOP")) {
        conta = "500377";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("YAN") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSIS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCALVES") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEMPORARIA")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AGATA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VIGILANCIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "5194995";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ANJOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SERVI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GRAFI")) {
        conta = "726410";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ALVES") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MAGAL")) {
        conta = "5194958";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PALACE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL")) {
        conta = "503056";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ASERCO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PROCE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DADO")) {
        conta = "500000";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSISTE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SAUDE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MEDICA")) {
        conta = "852614";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BERLAMINO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "5195185";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("C3") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRESE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "5194092";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CIBELE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RODRIG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SANTOS")) {
        conta = "858800";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DIRECAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ESTACIONAMENTO")) {
        conta = "504135";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DOUGLAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CORDEI")) {
        conta = "5194959";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ELISANGELA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDES")) {
        conta = "5194950";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FERNANDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FREDER")) {
        conta = "5195182";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RECANTO")) {
        conta = "5192534";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LD")) {
        conta = "5195772";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VICTOR")) {
        conta = "527914";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HUGO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HENRIQUE")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GALLAS")) {
        conta = "717823";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JAMF")) {
        conta = "5194214";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("COMUNICA")) {
        conta = "5195781";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("L D L") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SOLUCOES")) {
        conta = "5194231";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LOC") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FEST")) {
        conta = "5195762";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUCAS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LORETTO")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARCOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VINICIUS")) {
        conta = "5195180";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HELENA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BATISTA")) {
        conta = "856578";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JOSE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RIBEIRO")) {
        conta = "5195773";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MAURICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LUCIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MENDES")) {
        conta = "844402";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MAX") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MAZZA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL")) {
        conta = "844952";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MHB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "856415";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MV") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CASTRO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REPRE")) {
        conta = "5194105";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAOLA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RAPHAELA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MENDES")) {
        conta = "5194975";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POLITEC") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPRESSOR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "559012";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POLLYANA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NASCIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SILVEIRA")) {
        conta = "5195771";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("POUSO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VIAJANTES")) {
        conta = "5193191";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RAILDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MOTA")) {
        conta = "5195789";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REGINA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SANTOS")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("REGISTRONIC") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("AUTOM")) {
        conta = "523387";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RIVIA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MARTINS")) {
        conta = "5194388";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ROBSON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JUVENAL")) {
        conta = "5194088";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SANARE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("HOTEL")) {
        conta = "527715";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SIDCLEI") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("GONCA")) {
        conta = "726419";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SIDNEY") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PEREIRA")) {
        conta = "857917";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("UBER") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FILTROS")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("UBERPRINT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("LTDA")) {
        conta = "508045";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CUSTODIO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("VILAS")) {
        conta = "5195184";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("6")) {
        conta = "50451";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("9")) {
        conta = "50452";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("38")) {
        conta = "50045";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585-0")) {
        conta = "6710";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("3342130022132")) {
        conta = "6714";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0148536212")) {
        conta = "6711";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("14923-3")) {
        conta = "9351";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("01310045141")) {
        conta = "6712";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("01315018133")) {
        conta = "50026";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000000782")) {
        conta = "50044";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000009046696")) {
        conta = "50045";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("647000")) {
        conta = "50452";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("640000")) {
        conta = "50451";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("3342290119631")) {
        conta = "50456";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).equals("20")) {
        conta = "50045";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).equals("44")) {
        conta = "7929";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).equals("777")) {
        conta = "5634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS")) {
        conta = "50341";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("35633-6")) {
        conta = "942553";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("36267-0")) {
        conta = "942562";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("156")) {
        conta = "942553";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).equals("20")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("2216051") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) {
        conta = "50042";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("6608975") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) {
        conta = "7936";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("6608974") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("ABC")) {
        conta = "7929";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("602251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) {
        conta = "50104";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702251") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("BBM")) {
        conta = "50105";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0007152908") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) {
        conta = "5634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0006986422") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("DAYCOVAL")) {
        conta = "7463";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0006706662") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) {
        conta = "50287";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0006706670") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("FIBRA")) {
        conta = "50288";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("33716-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) {
        conta = "50015";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0590001244") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) {
        conta = "9528";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0500001243") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("INDUSTRIAL")) {
        conta = "9527";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78474-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) {
        conta = "50054";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78545-1") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) {
        conta = "50228";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("41702-8") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAULISTA")) {
        conta = "9483";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000120267") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) {
        conta = "8845";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000120275") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("SOFISA")) {
        conta = "8846";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("1.125.527-7") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) {
        conta = "50035";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("1.125.528-5") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("VOTORANTIM")) {
        conta = "50036";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL")) {
        conta = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("3716-4") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("GUANABARA")) {
        conta = "50014";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("301970")) {
        conta = "999318";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("301962")) {
        conta = "999314";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("78-2")) {
        conta = "50044";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("904669-6")) {
        conta = "50045";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200061")) {
        conta = "1635";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200039")) {
        conta = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200040")) {
        conta = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200041")) {
        conta = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200060")) {
        conta = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200043")) {
        conta = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200021")) {
        conta = "50223";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200018")) {
        conta = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200082")) {
        conta = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200084")) {
        conta = "5090";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200046")) {
        conta = "1661";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200048")) {
        conta = "4965";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200008")) {
        conta = "4965";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200076")) {
        conta = "1684";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200058")) {
        conta = "1685";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200062")) {
        conta = "1686";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200059")) {
        conta = "1688";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200063")) {
        conta = "1689";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200078")) {
        conta = "1690";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("100036")) {
        conta = "312";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("200042")) {
        conta = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("4000008")) {
        conta = "9609";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("400109")) {
        conta = "5940";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000246")) {
        conta = "50219";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000245")) {
        conta = "50218";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000262")) {
        conta = "50215";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("400049")) {
        conta = "4334";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("400033")) {
        conta = "4328";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000250")) {
        conta = "50156";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000255")) {
        conta = "50161";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000255")) {
        conta = "50161";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("400041")) {
        conta = "4338";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("10062")) {
        conta = "314";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("100062")) {
        conta = "314";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("400050")) {
        conta = "4335";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000241")) {
        conta = "50214";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000242")) {
        conta = "50215";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000243")) {
        conta = "50216";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000244")) {
        conta = "50217";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000245")) {
        conta = "50218";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000246")) {
        conta = "50219";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000262")) {
        conta = "50168";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000263")) {
        conta = "50169";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000282")) {
        conta = "50189";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000283")) {
        conta = "50190";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000284")) {
        conta = "50191";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000285")) {
        conta = "50192";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000286")) {
        conta = "50193";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000287")) {
        conta = "50194";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("40000258")) {
        conta = "50164";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("100036")) {
        conta = "312";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS")) {
        conta = "1712";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES")) {
        conta = "5274";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("10")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("104")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("637")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("17")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("237")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("45")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("907")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("913")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).equals("916")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10174";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50376";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50347";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10160";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOMADO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50348";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50388";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10160INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50354";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "1556";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10175";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50375";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50460";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10161";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOMADO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50346";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONIFICACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50387";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FCP") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10191";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50353";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "1552";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10164INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50359";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FCP") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10192";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10161INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BAIXA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10165INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("(-)ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "50358";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "384INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECUPERAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "385INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTA") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10160INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTA") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS")) {
        conta = "10161INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLISS")) {
        conta = "1582";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLCSRF")) {
        conta = "1580";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLIRRF")) {
        conta = "1546";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VLINSS")) {
        conta = "1581";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS")) {
        conta = "50341";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL")) {
        conta = "142";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("100036")) {
        conta = "312";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS")) {
        conta = "1712";
        return conta;
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA DE JUROS")) {
        conta = "4697";
    }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESCONTO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRATA DESCONTOS")) {
        tratarComoDesconto = true;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VERBA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRATA DESCONTOS")) {
        tratarComoDesconto = true;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRATA DESCONTOS")) {
        tratarComoDesconto = true;
    }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JURO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRATA JUROS")) {
        tratarComoJuros = true;
    }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(line).contains("PENDENCIA BANCARIA:")) {
        tratarIgnoraLinha = true;
    }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA DIV")) {
        retornoDiv = "FORNECEDOR-1";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA DIV")) {
        retornoDiv = "PORTADOR-1";
    }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente nao contem OUTROS, Fornecedor/Cliente nao contem FORNECEDORES, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("AGUA E ESGOTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) comeca com AGUA E ESGOTO, HISTORICO = PAGAMENTO DMAE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4537"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4537, HISTORICO = PAGAMENTO GRRF RESCISORIO DE";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4546"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4546, HISTORICO = Documento/NF - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4548"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4548, HISTORICO = PAGAMENTO CONFORME RECIBO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4698") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4698, Tipo Planilha contem EXTRATO, HISTORICO = DEBITO CONFORME AVISO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4555"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4555, HISTORICO = PAGAMENTO CONFORME RECIBO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5068") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DOACAO E CONTRIBUICAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5068, Complemento (01) contem DOACAO E CONTRIBUICAO, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF - ASSOCIACAO MEMBROS GRUPO PELA VIDA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1659, HISTORICO = PAGTO GPS MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1544"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1544, HISTORICO = PAGTO DARF MES Mes-Ano Anterior REF. SALARIOS/PRO-LABORE";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1580"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1580, HISTORICO = PAGAMENTO DARF MP 135 MES Mes-Ano Anterior REF. NF Documento/NF - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO INSS PJ"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1659, Complemento (01) comeca com RETENCAO INSS PJ, HISTORICO = PAGAMENTO GPS MES Mes-Ano Anterior REF. RPA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1546") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO IRRF PJ"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1546, Complemento (01) comeca com RETENCAO IRRF PJ, HISTORICO = PAGAMENTO DARF MES Mes-Ano Anterior REF. NF Documento/NF - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO ISS PJ") && StringUtil.removeSpecialCharsToUC(complemento05).equals("1"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1582, Complemento (01) comeca com RETENCAO ISS PJ, Complemento (05) igual a 1, HISTORICO = PAGAMENTO ISS RETIDO MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO ISS PJ") && StringUtil.removeSpecialCharsToUC(complemento05).equals("2"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1582, Complemento (01) comeca com RETENCAO ISS PJ, Complemento (05) igual a 2, HISTORICO = PAGAMENTO ISS RETIDO MES Mes-Ano Anterior REF. NF Documento/NF - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("162"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 162, HISTORICO = TITULO CAPITALIZACAO BANCO BRADESCO";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SERVICOS PROF CONTRATADOS PF (RCA)"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) comeca com SERVICOS PROF CONTRATADOS PF (RCA), HISTORICO = RPA MES Mes-Ano Anterior - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AUTONOMO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem AUTONOMO, HISTORICO = RPA MES Mes-Ano Anterior - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4335"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4335, HISTORICO = PAGAMENTO FGTS RESCISORIO DE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("VALE TRANSPORTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS FORNECEDORES"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) comeca com VALE TRANSPORTE, Fornecedor/Cliente contem Outros Fornecedores, HISTORICO = PAGAMENTO CONFORME RECIBO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5538") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5538, Fornecedor/Cliente contem JUROS, HISTORICO = JUROS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5538") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MULTA MORATORIA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5538, Fornecedor/Cliente contem MULTA MORATORIA, HISTORICO = MULTA MORATORIA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5538") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO DE SWAP"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5538, Fornecedor/Cliente contem LIQUIDACAO DE SWAP, HISTORICO = LIQUIDACAO DE SWAP";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1581"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1581, HISTORICO = PAGAMENTO GPS INSS RETIDO Documento/NF Fornecedor/Cliente Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5859") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISDEB"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5859, Fornecedor/Cliente contem SISDEB, HISTORICO = EMPRESTIMO SISDEB";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9635") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENCARG"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9635, Fornecedor/Cliente contem ENCARG, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1544") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-F"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1544, Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem -F, HISTORICO = PAGTO DARF MES Mes-Ano Anterior REF. RPA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9635") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JURO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9635, Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem JURO, HISTORICO = AV. DEBITO JUROS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1361") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1361, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("53"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 53, HISTORICO = BB CP AUTOMATICO EMPRESA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAAOUTRASENTRADAS, HISTORICO = Documento/NF Fornecedor/Cliente   INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PISCOFINS, Fornecedor/Cliente nao contem FRETE, Fornecedor/Cliente nao contem TOTAL, HISTORICO = Fornecedor/Cliente Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem FRETE, Fornecedor/Cliente contem COMPRA, Tipo Planilha contem PISCOFINS, HISTORICO = FRETE DE COMPRA Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem FRETE, Fornecedor/Cliente contem VENDA, Tipo Planilha contem PISCOFINS, HISTORICO = FRETE DE VENDA Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") && !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PISCOFINS, Fornecedor/Cliente contem TOTAL, Fornecedor/Cliente contem RECOLHER, Complemento (05) nao contem COFINS, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") && StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PISCOFINS, Fornecedor/Cliente contem TOTAL, Fornecedor/Cliente contem RECOLHER, Complemento (05) contem COFINS, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SERVICO, HISTORICO = Documento/NF | Complemento (04)   INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem FOLHA, HISTORICO = Mes-Ano Atual Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && !StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OUTROS, Fornecedor/Cliente contem FORNECEDORES, Complemento (01) nao contem ACORDO, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("COMER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OUTROS, Fornecedor/Cliente contem FORNECEDORES, Complemento (01) contem ACORDO, Complemento (01) contem COMER, HISTORICO = PAGAMENTO CONFORME RECIBO ACORDO COMERCIAL  Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ALUGUEL, Complemento (01) contem CONDOMINIO, HISTORICO = PAGAMENTO CONFORME RECIBO Complemento (01) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PLANO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ODONTOLOGICO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PLANO, Complemento (01) contem ODONTOLOGICO, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50350") && StringUtil.removeSpecialCharsToUC(complemento01).contains("VERBA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50350, Complemento (01) contem VERBA, Complemento (01) contem FORNECEDORES, Tipo Planilha contem MOVIMENTO, HISTORICO = VALOR ACERTO CONTRATO PARA PAGAMENTO DE VERBA N Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIRIGENTES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSULTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CDL, Fornecedor/Cliente contem CAMARA, Fornecedor/Cliente contem DIRIGENTES, Complemento (01) contem CONSULTA, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("313") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 313, Complemento (01) contem FERIAS, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGTO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("VIAGENS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DESPESAS, Complemento (01) contem VIAGENS, Fornecedor/Cliente contem OUTROS, Fornecedor/Cliente contem FORNECEDORES, HISTORICO = PAGAMENTO CONFORME RELATORIO Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1552") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1552, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO GUIA COFINS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1556") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1556, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO GUIA PIS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1582, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DAM ISS RETIDO MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1637") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1637, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PENSAO ALIMENTICIA MES Complemento (06) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1659, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO GUIA INSS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1660") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(complemento06).contains("RESCISAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1660, Tipo Planilha contem MOVIMENTO, Complemento (06) nao contem RESCISAO, HISTORICO = PAGAMENTO GUIA FGTS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1661") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1661, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO SINDICATO DOS EMPREGADOS COMERCIO DE MONTES CLAROS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("312") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 312, Tipo Planilha contem MOVIMENTO, HISTORICO = ADIANTAMENTO DE SALARIO CONFORME FOLHA Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4476") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4476, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DMAE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4478") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4478, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4886") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4886, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DAE ICMS ST REFERENTE NF Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4984") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4984, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGTO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5007") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5007, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO MULTAS/JUROS REF. DARF PARCELAMENTO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50060") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50060, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO NF NUMERO Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50270") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50270, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50082") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50082, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO HONORARIOS PARCELAMENTO Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6606") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6606, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DAE ICMS ANTECIPADO REF. NF Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50100") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50100, Tipo Planilha contem MOVIMENTO, HISTORICO = AV. DEBITO MENSALIDADE SEGURO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEVOL, Fornecedor/Cliente contem CHEQUE, Fornecedor/Cliente contem DEPOSI, HISTORICO = Fornecedor/Cliente - Portador";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem TRANSFERENCIA, HISTORICO = TRANSFERENCIA ENTRE CONTAS DE Portador PARA Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MARKETING"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OUTROS, Fornecedor/Cliente contem FORNECEDORES, Complemento (01) contem MARKETING, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PROFISSIONA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem SERVICO, Complemento (01) contem PROFISSIONA, Fornecedor/Cliente contem OUTROS, Fornecedor/Cliente contem FORNECEDORES, HISTORICO = PAGAMENTO CONFORME RECIBO Documento/NF Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNEC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem ADIANTAMENTO, Complemento (01) contem FORNEC, Tipo Planilha contem MOVIMENTO, HISTORICO = ADIANTAMENTO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PREMIO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BRINDE") && StringUtil.removeSpecialCharsToUC(complemento06).contains("NOTA") && StringUtil.removeSpecialCharsToUC(complemento06).contains("DEBITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PREMIO, Complemento (01) contem BRINDE, Complemento (06) contem NOTA, Complemento (06) contem DEBITO, HISTORICO = NOTA DE DEBITO Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("POLI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ALUGUEL, Complemento (01) contem POLI, HISTORICO = PAGAMENTO CONFORME RECIBO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5006") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5006, Tipo Planilha contem MOVIMENTO, HISTORICO = DAE ICMS DIFERENCA DE ALIQUOTA Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("976300") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 976300, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO FEDERAL SIMPLIFICADO IRPJ/CSLL";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5164") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5164, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO CSLL";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50011") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50011, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO CODIGO RECEITA 3148";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5165") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5165, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO IRPJ";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9184") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9184, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO PIS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5428") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5428, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO COFINS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50366") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50366, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO SIMPLIFICADO IRPJ/CSLL";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9433") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9433, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO CODIGO RECEITA 1734";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10180") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10180, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO PREVID TRANS PGFN";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50303") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50303, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO PREVID (PGFN 2774000) REPARC.6700497";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50301") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50301, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO PREVIDENCIARIO (PGFN) REPARC.";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("2077") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 2077, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO INSS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50012") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50012, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF  PARCELAMENTO 11941-DEMAIS DEBITOS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9275") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9275, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO PRT PREVIDENCIARIO RFB CODIGO 4308";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7973") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7973, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO CODIGO RECEITA 4737 ( LEI 12996 DE 2014 )";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50297") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50297, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO PARCELAMENTO PIS/COFINS PGFN SISPAR";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7602") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7602, Tipo Planilha contem MOVIMENTO, HISTORICO = AV. DEBITO IOF REF. SEGURO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem AMORTIZACAO, Fornecedor/Cliente contem EMPRESTIMO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FECHAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FECHAMENTO, Fornecedor/Cliente contem CAMBIO, HISTORICO = AV. DEBITO FECHAMENTO CTR. CAMBIO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESGATE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem RESGATE, Fornecedor/Cliente contem SWAP, HISTORICO = AV. DEBITO RESGATE SWAP";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORT.") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem AMORT., Fornecedor/Cliente contem CONTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50289") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50289, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO LIQ. CAPITAL GIRO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9595") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9595, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9488") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9488, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7870") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7870, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10588") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10588, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO IRRF REF. OPERACOES DE CAMBIO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem SWAP, HISTORICO = AV. DEBITO PAGAMENTO SWAP";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PGTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACOES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PGTO, Fornecedor/Cliente contem OPERACOES, Fornecedor/Cliente contem CAMBIO, HISTORICO = AV. DEBITO PAGTO OPERACOES DE CAMBIO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("530570") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 530570, Tipo Planilha contem EXTRATO, HISTORICO = PAGAMENTO DUPLICATA NUMERO FORNECEDOR MERCANTIL MINEIRA LOGISTICA LTDA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50236") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50236, Tipo Planilha contem EXTRATO, HISTORICO = DIVIDENDOS MERKIM PARTICIPACOES MES Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10295") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10295, Tipo Planilha contem EXTRATO, HISTORICO = DIVIDENDOS   LENU PARTICIPACOES LTDA MES Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10294") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10294, Tipo Planilha contem EXTRATO, HISTORICO = DIVIDENDOS L2S PARTICIPACOES LTDA MES Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1367") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1367, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem BLOQ., Fornecedor/Cliente contem SALDO, HISTORICO = AV. DEBITO BLOQUEIO JUDICIAL";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7439") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7439, Tipo Planilha contem EXTRATO, HISTORICO = APLICACAO CONFORME AVISO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CH"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem EST, Fornecedor/Cliente contem DEP, Fornecedor/Cliente contem CH, HISTORICO = ESTORNO DEP CHEQ";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("54") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 54, Tipo Planilha contem EXTRATO, HISTORICO = APLICACAO CONFORME AVISO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESERVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem OPERACAO, Fornecedor/Cliente contem CAMBIO, Fornecedor/Cliente contem RESERVA, HISTORICO = AV. DEBITO OPERACAO CAMBIO DEBITO RESERVA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem IMPOSTO, Fornecedor/Cliente contem RENDA, Fornecedor/Cliente contem OPER, HISTORICO = AV. DEBITO IRRF REF. OPERACAO CAMBIO DEBITO RESERVA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("942557") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 942557, Tipo Planilha contem EXTRATO, HISTORICO = AV. DEBITO EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ACORDO_COMERCIAL, HISTORICO = ACORDO COMERCIAL Complemento (02) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("INSS") && StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1659, Tipo Planilha contem MOVIMENTO, Complemento (01) igual a INSS, Complemento (06) contem DARF, HISTORICO = PAGAMENTO GUIA INSS TERCEIROS REFERENTE MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem VERBAS, Documento/NF contem EM BRANCO, HISTORICO = Acerto contrato para pagamento de verba n Complemento (01) Fornecedor/Cliente   INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && !StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem VERBAS, Documento/NF nao contem EM BRANCO, HISTORICO = Acerto NF devolucao n Documento/NF Fornecedor/Cliente Verba n Complemento (01)  INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50367") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50367, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DARF PARCELAMENTO FEDERAL SIMPLIFICADO IRPJ/CSLL DOCUMENTO: 07.03.23333.2712328-0 CODIGO: 1124 60 PARCELAS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50392") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50392, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DAE ICMS ST REFERENTE NF Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1541") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1541, Tipo Planilha contem MOVIMENTO, HISTORICO = PAGAMENTO DAE ICMS MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50060") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ALGAR"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50060, Tipo Planilha contem MOVIMENTO, Complemento (03) contem ALGAR, HISTORICO = Complemento (03) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OUTROS, Fornecedor/Cliente contem FORNECEDORES, Complemento (01) contem IRRF, Complemento (01) contem SALARIOS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50016") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQ.") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE CAC"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 50016, Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem LIQ., Fornecedor/Cliente contem DE CAC, HISTORICO = EMPRESTIMO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem BRINDES, HISTORICO = ESTORNO BRINDE CONTABILIZADO NO MOMENTO DA AQUISICAO CFME. NF Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1637") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PENSAO ALIMENTICIA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1637, Complemento (01) comeca com PENSAO ALIMENTICIA, HISTORICO = PAGAMENTO PENSAO ALIMENTICIA MES Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1634") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1634, Tipo Planilha nao contem FOLHA, HISTORICO = Complemento (03) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1660") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("RESCISAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1660, Tipo Planilha contem MOVIMENTO, Complemento (06) contem RESCISAO, HISTORICO = RESCISORIO";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("2858") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 2858, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4701") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4701, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("2860") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 2860, Tipo Planilha contem MOVIMENTO, HISTORICO = Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1634") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("13") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 1634, Tipo Planilha contem MOVIMENTO, Complemento (01) contem 13, Complemento (01) contem SALARIO, HISTORICO = PAGAMENTO Complemento (06)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DEVOLUCAO A FORNECEDOR, HISTORICO = DEVOLUCAO NF Documento/NF Fornecedor/Cliente   INVERTECONTA";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO CAPITAL GIRO CONTR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8860357")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEBITOS PREV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PGFN")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEMAIS DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVIDENCIARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS ESTADUAIS PARCELADOS")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS S/PARCELAMENTO IMP. ESTADUAL")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS FEDERAIS PARCELADOS")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS S/PARCELAMENTO IMP. FEDERAL")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOSTOS FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("11941")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SERVICOS PROF CONTRATADOS PF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RCA")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OUTROS FORNECEDORES")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("SISDEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("199917040007200") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VERIFICAR REGRA, POIS SO FOI CADASTRADO CONTA PRINCIPAL")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("LIS/JUROS")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO CORP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) {
        parcelaBase = 34;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) {
        parcelaBase = 34;
    }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO CAPITAL GIRO CONTR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8860357")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEBITOS PREV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PGFN")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEMAIS DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVIDENCIARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS ESTADUAIS PARCELADOS")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS S/PARCELAMENTO IMP. ESTADUAL")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS FEDERAIS PARCELADOS")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS S/PARCELAMENTO IMP. FEDERAL")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOSTOS FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("11941")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SERVICOS PROF CONTRATADOS PF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RCA")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OUTROS FORNECEDORES")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("SISDEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("199917040007200") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VERIFICAR REGRA, POIS SO FOI CADASTRADO CONTA PRINCIPAL")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("LIS/JUROS")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO CORP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) {
        parcelaBase = 36;
    }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OPERACAO CAPITAL GIRO CONTR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8860357")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEBITOS PREV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PGFN")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DEMAIS DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PREVIDENCIARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS DEBITOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RFB")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS ESTADUAIS PARCELADOS")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS S/PARCELAMENTO IMP. ESTADUAL")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("IMPOSTOS FEDERAIS PARCELADOS")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("JUROS S/PARCELAMENTO IMP. FEDERAL")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PARCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOSTOS FEDERAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("11941")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SERVICOS PROF CONTRATADOS PF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RCA")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("OUTROS FORNECEDORES")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("SISDEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("199917040007200") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VERIFICAR REGRA, POIS SO FOI CADASTRADO CONTA PRINCIPAL")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("LIS/JUROS")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO CORP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) {
        mesAnoBase = "12/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("9585")) {
        mesAnoBase = "12/2017";
    }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("AGUA E ESGOTO"))  historico = "PAGAMENTO DMAE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4537"))  historico = "PAGAMENTO GRRF RESCISORIO DE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4546"))  historico = "" + " " + documento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:6";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4548"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4698") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "DEBITO CONFORME AVISO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4555"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5068") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DOACAO E CONTRIBUICAO"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "- ASSOCIACAO MEMBROS GRUPO PELA VIDA"  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659"))  historico = "PAGTO GPS MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1544"))  historico = "PAGTO DARF MES" + " " + mesAnoAnterior + " " + "REF. SALARIOS/PRO-LABORE"  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1580"))  historico = "PAGAMENTO DARF MP 135 MES" + " " + mesAnoAnterior + " " + "REF. NF" + " " + documento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO INSS PJ"))  historico = "PAGAMENTO GPS MES" + " " + mesAnoAnterior + " " + "REF. RPA"  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1546") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO IRRF PJ"))  historico = "PAGAMENTO DARF MES" + " " + mesAnoAnterior + " " + "REF. NF" + " " + documento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO ISS PJ") && StringUtil.removeSpecialCharsToUC(complemento05).equals("1"))  historico = "PAGAMENTO ISS RETIDO MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("RETENCAO ISS PJ") && StringUtil.removeSpecialCharsToUC(complemento05).equals("2"))  historico = "PAGAMENTO ISS RETIDO MES" + " " + mesAnoAnterior + " " + "REF. NF" + " " + documento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("162"))  historico = "TITULO CAPITALIZACAO BANCO BRADESCO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("SERVICOS PROF CONTRATADOS PF (RCA)"))  historico = "RPA MES" + " " + mesAnoAnterior + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AUTONOMO"))  historico = "RPA MES" + " " + mesAnoAnterior + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4335"))  historico = "PAGAMENTO FGTS RESCISORIO DE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).startsWith("VALE TRANSPORTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS FORNECEDORES"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5538") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS"))  historico = "JUROS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5538") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MULTA MORATORIA"))  historico = "MULTA MORATORIA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5538") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO DE SWAP"))  historico = "LIQUIDACAO DE SWAP"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1581"))  historico = "PAGAMENTO GPS INSS RETIDO" + " " + documento + " " + "" + " " + nomeOrigem + " " + "" + " " + mesAnoAnterior + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5859") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISDEB"))  historico = "EMPRESTIMO SISDEB"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9635") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENCARG"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1544") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-F"))  historico = "PAGTO DARF MES" + " " + mesAnoAnterior + " " + "REF. RPA"  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9635") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JURO"))  historico = "AV. DEBITO JUROS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1361") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("53"))  historico = "BB CP AUTOMATICO EMPRESA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:17";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAOUTRASENTRADAS"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "  CodigoHistorico:1064";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") && !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL"))  historico = "" + " " + nomeOrigem + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS"))  historico = "FRETE DE COMPRA" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRETE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENDA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS"))  historico = "FRETE DE VENDA" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") && !StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1056";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PISCOFINS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TOTAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECOLHER") && StringUtil.removeSpecialCharsToUC(complemento05).contains("COFINS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1057";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO"))  historico = "" + " " + documento + " " + "|" + " " + complemento04 + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "  CodigoHistorico:430";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + mesAnoAtual + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:227";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && !StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + complemento06 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ACORDO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("COMER"))  historico = "PAGAMENTO CONFORME RECIBO ACORDO COMERCIAL"  + " " + "" + " " + complemento06 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONDOMINIO"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + complemento01 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PLANO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ODONTOLOGICO"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50350") && StringUtil.removeSpecialCharsToUC(complemento01).contains("VERBA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "VALOR ACERTO CONTRATO PARA PAGAMENTO DE VERBA N" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIRIGENTES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSULTA"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("313") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGTO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("VIAGENS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES"))  historico = "PAGAMENTO CONFORME RELATORIO" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1552") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO GUIA COFINS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1556") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO GUIA PIS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1582") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DAM ISS RETIDO MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1637") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PENSAO ALIMENTICIA MES" + " " + complemento06 + " " + "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO GUIA INSS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1660") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(complemento06).contains("RESCISAO"))  historico = "PAGAMENTO GUIA FGTS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1661") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO SINDICATO DOS EMPREGADOS COMERCIO DE MONTES CLAROS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("312") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "ADIANTAMENTO DE SALARIO CONFORME FOLHA" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4476") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DMAE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4478") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4886") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DAE ICMS ST REFERENTE NF" + " " + documento + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4984") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGTO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5007") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO MULTAS/JUROS REF. DARF PARCELAMENTO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50060") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO NF NUMERO" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50270") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + complemento06 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50082") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO HONORARIOS PARCELAMENTO" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6606") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DAE ICMS ANTECIPADO REF. NF" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50100") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "AV. DEBITO MENSALIDADE SEGURO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSI"))  historico = "" + " " + nomeOrigem + " " + "-" + " " + nomePortador + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("TRANSFERENCIA"))  historico = "TRANSFERENCIA ENTRE CONTAS DE" + " " + nomePortador + " " + "PARA" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MARKETING"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + complemento06 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PROFISSIONA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + documento + " " + "" + " " + complemento06 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNEC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "ADIANTAMENTO" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PREMIO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BRINDE") && StringUtil.removeSpecialCharsToUC(complemento06).contains("NOTA") && StringUtil.removeSpecialCharsToUC(complemento06).contains("DEBITO"))  historico = "NOTA DE DEBITO" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("POLI"))  historico = "PAGAMENTO CONFORME RECIBO" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5006") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "DAE ICMS DIFERENCA DE ALIQUOTA" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("976300") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO FEDERAL SIMPLIFICADO IRPJ/CSLL"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5164") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO CSLL"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50011") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO CODIGO RECEITA 3148"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5165") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO IRPJ"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9184") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO PIS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5428") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO COFINS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50366") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO SIMPLIFICADO IRPJ/CSLL"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9433") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO CODIGO RECEITA 1734"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10180") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO PREVID TRANS PGFN"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50303") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO PREVID (PGFN 2774000) REPARC.6700497"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50301") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO PREVIDENCIARIO (PGFN) REPARC."  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("2077") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO INSS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50012") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF  PARCELAMENTO 11941-DEMAIS DEBITOS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9275") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO PRT PREVIDENCIARIO RFB CODIGO 4308"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7973") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO CODIGO RECEITA 4737 ( LEI 12996 DE 2014 )"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50297") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO PARCELAMENTO PIS/COFINS PGFN SISPAR"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7602") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "AV. DEBITO IOF REF. SEGURO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FECHAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO"))  historico = "AV. DEBITO FECHAMENTO CTR. CAMBIO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESGATE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP"))  historico = "AV. DEBITO RESGATE SWAP"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORT.") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50289") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO LIQ. CAPITAL GIRO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9595") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9488") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7870") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10588") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO IRRF REF. OPERACOES DE CAMBIO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SWAP"))  historico = "AV. DEBITO PAGAMENTO SWAP"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PGTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACOES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO"))  historico = "AV. DEBITO PAGTO OPERACOES DE CAMBIO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("530570") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "PAGAMENTO DUPLICATA NUMERO FORNECEDOR MERCANTIL MINEIRA LOGISTICA LTDA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50236") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "DIVIDENDOS MERKIM PARTICIPACOES MES" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10295") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "DIVIDENDOS   LENU PARTICIPACOES LTDA MES" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10294") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "DIVIDENDOS L2S PARTICIPACOES LTDA MES" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1367") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO"))  historico = "AV. DEBITO BLOQUEIO JUDICIAL"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7439") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "APLICACAO CONFORME AVISO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CH"))  historico = "ESTORNO DEP CHEQ"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("54") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "APLICACAO CONFORME AVISO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMBIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESERVA"))  historico = "AV. DEBITO OPERACAO CAMBIO DEBITO RESERVA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPER"))  historico = "AV. DEBITO IRRF REF. OPERACAO CAMBIO DEBITO RESERVA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("942557") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "AV. DEBITO EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL"))  historico = "ACORDO COMERCIAL" + " " + complemento02 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1659") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).equals("INSS") && StringUtil.removeSpecialCharsToUC(complemento06).contains("DARF"))  historico = "PAGAMENTO GUIA INSS TERCEIROS REFERENTE MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "Acerto contrato para pagamento de verba n" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "  CodigoHistorico:0";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && !StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "Acerto NF devolucao n" + " " + documento + " " + "" + " " + nomeOrigem + " " + "Verba n" + " " + complemento01 + " " + ""  + " " + "INVERTECONTA" + "  CodigoHistorico:0";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50367") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DARF PARCELAMENTO FEDERAL SIMPLIFICADO IRPJ/CSLL DOCUMENTO: 07.03.23333.2712328-0 CODIGO: 1124 60 PARCELAS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50392") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DAE ICMS ST REFERENTE NF" + " " + documento + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1541") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DAE ICMS MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50060") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ALGAR"))  historico = "" + " " + complemento03 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:0";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:254";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("50016") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQ.") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE CAC"))  historico = "EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BRINDES"))  historico = "ESTORNO BRINDE CONTABILIZADO NO MOMENTO DA AQUISICAO CFME. NF" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1637") && StringUtil.removeSpecialCharsToUC(complemento01).startsWith("PENSAO ALIMENTICIA"))  historico = "PAGAMENTO PENSAO ALIMENTICIA MES" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1634") && !StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA"))  historico = "" + " " + complemento03 + " " + "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1038";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1660") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("RESCISAO"))  historico = "RESCISORIO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:271";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("2858") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1014";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4701") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:32";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("2860") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("1634") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("13") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIO"))  historico = "PAGAMENTO" + " " + complemento06 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DEVOLUCAO A FORNECEDOR"))  historico = "DEVOLUCAO NF" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "PAGAMENTO DE TITULO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaPortador).equals("1546") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO"))  historico = "" + " " + documento + " " + "|" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:218";
    
    if (StringUtil.removeSpecialCharsToUC(contaPortador).equals("1580") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO"))  historico = "" + " " + documento + " " + "|" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:366";
    
    if (StringUtil.removeSpecialCharsToUC(contaPortador).equals("1582") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO"))  historico = "" + " " + documento + " " + "|" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:219";
    
    if (StringUtil.removeSpecialCharsToUC(contaPortador).equals("1581") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SERVICO"))  historico = "" + " " + documento + " " + "|" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("4697") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "Acerto contrato para pagamento de verba n" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1195";
    
    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("4697") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && !StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "Acerto NF devolucao n" + " " + documento + " " + "" + " " + nomeOrigem + " " + "Verba n" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:1195";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaDesconto).equals("8138"))  historico = "VALOR REF. CONTRATO PARA PAGAMENTO DE VERBA NR." + " " + documento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaDesconto).equals("2860") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "Acerto contrato para pagamento de verba n" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10003";
    
    if (StringUtil.removeSpecialCharsToUC(contaDesconto).equals("2860") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("VERBAS") && !StringUtil.removeSpecialCharsToUC(documento).equals(""))  historico = "Acerto NF devolucao n" + " " + documento + " " + "" + " " + nomeOrigem + " " + "Verba n" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:10003";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("4") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("OUTRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ENTRADAS")) {
        retornaFilial = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("5") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("OUTRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ENTRADAS")) {
        retornaFilial = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("6") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("OUTRAS") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ENTRADAS")) {
        retornaFilial = "9";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("BOA") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ESPERANCA")) {
        retornaFilial = "9";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("BETIM")) {
        retornaFilial = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("MONTES") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("CLAROS")) {
        retornaFilial = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("4") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("SERVICO")) {
        retornaFilial = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("5") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("SERVICO")) {
        retornaFilial = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("6") &&
        StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("SERVICO")) {
        retornaFilial = "9";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("4")) {
        retornaFilial = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("5")) {
        retornaFilial = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("6")) {
        retornaFilial = "9";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("1")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADORIA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MARKETING") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EQUIPAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FEIRAS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FORNEC")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARILAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIMENTOS")) {
        retornaFilial = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FRETE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARRETO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("HONORARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTABILIDADE") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROF CONTRATADOS PJ") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RCA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("REUNIOES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TREINAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("AQUISICAO APARELHO TELEFONICO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).equals("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CUSTO FRETE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("POLI/CORRETA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FORNECEDORES")) {
        retornaFilial = "1";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("4") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BRINDES")) {
        retornaFilial = "7";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("5") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BRINDES")) {
        retornaFilial = "8";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).equals("6") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BRINDES")) {
        retornaFilial = "9";
    }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;


if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("FOLHA_DE_PAGAMENTO")) lote = loteParam + "ACUMULO-POR-CONTA-CONTABIL-E-POR-CENTRO-DE-RESULTADO."+contaMovimento+"-"+contaPortador+"-"+complemento03;
    

    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    if (parametro.equals("complemento01")) lote = cutString(lote,"262 - ");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("CLIENTE:") && parametro.equals("complemento06")) lote = cutString(lote,"CLIENTE:"); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("CLIENTE:") && parametro.equals("complemento06")) lote = cutString(lote,0,"REF."); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("RESCISAO") && parametro.equals("complemento06")) lote = cutString(lote,0,"ARQUIVO"); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("FERIAS") && parametro.equals("complemento06")) lote = cutString(lote,0,"ARQUIVO"); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento06).contains("REEMBOLSO") && parametro.equals("complemento06")) lote = cutString(lote,0,"REF."); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(complemento06).contains("REEMBOLSO") && !StringUtil.removeSpecialCharsToUC(complemento06).contains("CLIENTE:") && StringUtil.removeSpecialCharsToUC(complemento06).contains("REF.") && parametro.equals("complemento06")) lote = cutString(lote,0,"REF."); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("complemento06")) lote = cutString(lote,0,"REF,"); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL") && parametro.equals("nomeOrigem")) lote = cutString(lote,"100 "); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ACORDO_COMERCIAL") && parametro.equals("nomeOrigem")) lote = cutString(lote,"113 "); //ROT-2017-122246
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENDIVIDAMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATO") && parametro.equals("complemento01")) lote = cutString(lote,":"); //ROT-2017-122246

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ ERP-BYSOFT @##############################################*/
public HashMap readBysoftIBroker(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
          
	return mapaVariavel;
}						
           
        


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoAme(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
      
    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  

    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	
    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readCartaoNutricardPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
			   
   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   

   return mapaVariavel;
}


 /*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
        public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
           
				 return mapaVariavel;
            }


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}



/*#############################################@ ERP-CITEL @##############################################*/
public HashMap readCitelSoftwareFrmRelCtrTit(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


public HashMap readErpDetalhamentoSispagItau(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String line = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	int idocumento  = -1;
	int inomeOrigem = -1;
	int idataMovimento  = -1;
	int ivalorDocumento = -1;
	
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("LINE"))  line = jDados.optString("LINE");

    while (memFile.hasNextLine()) {
		
		if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA:")) nomePortador = "ABC-"+memFile.getStringFieldRemoveEspCharsUpper(1).trim();
		
		
		// logger.logDebug("LIN -> " + line);
		for(int i =0; i < memFile.getFieldsSize(); i++){
			String campo = memFile.getStringFieldRemoveEspCharsUpper(i);
			if(campo.contains("DATA")) idataMovimento = i;
			if(campo.contains("HIST")) inomeOrigem = i;
			if((campo.contains("NRO") && campo.contains("DOCUMENTO")) 
				|| (campo.contains("QTDE") && campo.contains("REGISTRO"))) idocumento = i;
			if(campo.contains("VALOR")) ivalorDocumento = i;
		}

		// logger.logDebug("IDOC -> " + idocumento);
		if(idataMovimento == -1 || inomeOrigem == -1 || idocumento == -1 || ivalorDocumento == -1){
			idataMovimento = 0;
			inomeOrigem = 2;
			idocumento = 1;
			ivalorDocumento = 4;
		}

        try {
            line = memFile.nextLine();
			line = StringUtil.removeSpecialCharsToUC(line);
			
            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";
			

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if (memFile.getStringField(0).equals("")) continue;
			
			
            try {
                Date dt = memFile.getDateField(idataMovimento);
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");    // --- VERIFICAR
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dateException02) {
                    continue;
                }
            }

            try {
                valorDocumento = memFile.getDoubleField(ivalorDocumento);
            } catch (Exception valorException01) {
                valorDocumento = 0;
            }

            if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
            if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
            if (valorDocumento == 0) continue;

            valorDocumento = Math.abs(valorDocumento);

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            complemento02 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
			documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
			

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Sofisa", readExtratoException);
        }
    }
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read ABC PDF");
	
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String dataLote          = "";
    String documento         = "";
    String historico         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String debitoCreditoAux  = "";
    String nomeOrigemAux = "";
    String contLinhaExtrato  = "";
    String strValorDocumento = "";
    double valorDocumento    = 0.0;
    boolean naoLeMais = false;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idocumento      = 1;
	int inomeOrigem		= 2;
	int icomplemento02	= 2;
	int idataMovimento	= 0;
	int idebitoCredito	= 3;
	int ivalorDocumento	= 4;
	
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	
	// if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		// memFile.setFieldSeparator(";");	
    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		// logger.logInfo("Line ABC pdf -> "+line);
		
		if (line.startsWith("BANCO:")) continue;
		if (line.startsWith("AGENCIA:")) continue;
		if (line.startsWith("OS SALDOS E LANCAMENTOS APRESENTADOS ACIMA")) naoLeMais = true;
		if (memFile.getStringFieldRemoveEspCharsUpper(0).startsWith("CONTA:")) {
			nomePortador += " " + cutString(memFile.getStringFieldRemoveEspCharsUpper(0), "CONTA:");
			continue;
		}
		if (naoLeMais) continue;
		
		valorDocumento  = 0;
		if (memFile.getFieldsSize() == 1) {
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(memFile.getStringFieldRemoveEspCharsUpper(0))
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
			continue;
		}
		/*
		if (memFile.getFieldsSize() == 2) {
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
			
			try{valorDocumento = Math.abs(memFile.getDoubleField(1));}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			logger.logInfo("LINEAUX " + nomeOrigemAux + " | " + nomeOrigem + " | " + valorDocumento);
			
			if (valorDocumento > 0) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
				continue;
			}
		}*/
		
		
		
		
		
		
		try {
			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(idebitoCredito);
			if (debitoCreditoAux.contains("DEBITO")) debitoCredito = "EXTRATO-DEBITO";
			if (debitoCreditoAux.contains("CREDITO")) debitoCredito = "EXTRATO-CREDITO";
			
			String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
			try {
				Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
			} catch (Exception dt1) {
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt2) {
					try {
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
						Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {/* continue; */}
				}
			}
			if (dataMovimento.equals("")) continue;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			nomeOrigem		 = "";
			debitoCreditoAux = "";
			
			documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento);
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
			complemento02 	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
			
			if (memFile.getFieldsSize() > 6) {
				try{valorDocumento = Math.abs(memFile.getDoubleField(memFile.getFieldsSize()-2));}
				catch (Exception vlrd) { valorDocumento = 0; }
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-4);
				nomeOrigem = "";
				for(int y = 2; y < memFile.getFieldsSize()-4; y++){
					nomeOrigem += " " +memFile.getStringFieldRemoveEspCharsUpper(y);
				}
				complemento02 = nomeOrigem;
				if (debitoCreditoAux.contains("DEBITO")) debitoCredito = "EXTRATO-DEBITO";
				if (debitoCreditoAux.contains("CREDITO")) debitoCredito = "EXTRATO-CREDITO";
			}
			
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			if (valorDocumento == 0) continue;
			
			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();
			// Inserir caso Chave nao encontrada.
			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
    }
    return true;
}


public boolean readExtratoAilosCiviaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readExtrato_ApliBB_PDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
	return mapaVariavel;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
 }


/*#############################################@ EXTRATO-ASAAS-EXCEL @##############################################*/
public boolean readExtratoAsaasExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";
	String anoArquivo        = "";
	String restoNomeOrigem	 = "";

    String tipo				 = "";
    String dataString        = "";
	
	boolean naoLeMais = false;
    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
	int ivalorAuxiliar  = 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
	
	boolean linhaAnteriorPeriodo = false;
	boolean linhaAnteriorConta = false;
	
	List arquivoCompleto = memFile.getLines();
	
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPO"))  	   tipo  		= jDados.optString("TIPO");
    // logger.logInfo("TIPO === "+tipo);
    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		//2402-028662
		if(!line.contains("DOCTO") && line.contains("DATA") && line.contains("SALDO")){
			tipo = "003";
		}
		//if(line.contains("HTTPS") && line.contains(".COM")) continue;
		if (line.startsWith("PERIODO")) {
			linhaAnteriorPeriodo = true;
			for (int i = 0; i < memFile.getFieldsSize(); i++) {
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("PERIODO")) {
					anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(i + 1), memFile.getStringFieldRemoveEspCharsUpper(i + 1).lastIndexOf("/"));
					anoData = anoData.replaceAll("[^0-9]", "");
					continue;
				}
			}
			
			
		}
		
		//2402-028886 - Tratamento para pegar o ano quando parte do periodo vem de baixo das info de saldo e limite
        //if ((tipo.equals("002") || tipo.equals("003")) && line.toUpperCase().contains("LIMITE (+)")) {
        if ((tipo.equals("002") || tipo.equals("003")) && (line.toUpperCase().contains("LIMITE (+)") || (line.contains("/20") && linhaAnteriorPeriodo) )) {
			anoData = cutString(line, line.lastIndexOf("/")+1);
			linhaAnteriorPeriodo = false;
            //logger.logInfo("ANO DATA == "+anoData);
			continue;
		}
		
		//2402-028886 - Para nesse tipo aparecer "PDF-BANCODAYCOVAL - " + conta
		if(tipo.equals("003")){
			//Quando o padrao 2 tem a parte da conta e periodo em baixo das info de saldo e limite
			if(memFile.getStringFieldRemoveEspCharsUpper(0).trim().equals("CONTA") && memFile.getFieldsSize() == 1) {
				linhaAnteriorConta = true;
				continue;
			}
			if(memFile.getFieldsSize() == 1 && linhaAnteriorConta){
				nomePortador += " - " +  memFile.getStringFieldRemoveEspCharsUpper(0);
				linhaAnteriorConta = false;
				continue;
			}
			
			//Quando o padrao 2 tem a parte da conta e periodo do lado das info de saldo e limite
			if(line.contains("CONTA") && line.contains("SALDO BLOQUEADO") && !line.contains("CORRENTE")){
				nomePortador += " - " +  cutString(line, "CONTA").replaceAll("|", "").replaceAll(";", "").trim();
				continue;
			}
		}
		
		
		if (line.toUpperCase().contains("SALDO ATUAL")) continue;
		if (line.toUpperCase().contains("LIMITE(+)")) continue;
		if (line.toUpperCase().contains("SALDO BLOQUEADO")) continue;
		if (line.toUpperCase().contains("SALDO DISPONIVEL")) continue;
		if (line.toUpperCase().contains("VALOR BLOQUEADO")) continue;
		if (line.toUpperCase().contains("SALDO RESUMIDO")) continue;
		if (line.toUpperCase().contains("SALDO EM")) continue;
		if (line.toUpperCase().contains("SALDO ANTERIOR")) continue;
		if (memFile.getFieldsSize() == 2 && memFile.getStringFieldRemoveEspCharsUpper(1).contains("/")) continue;
        if (nomeOrigem.toUpperCase().contains("SALDO AN")||
				nomeOrigem.toUpperCase().contains("SALDO ATUAL")||
				nomeOrigem.toUpperCase().contains(" OS SALDOS ACIMA SAO BASEADOS NAS INFORMACOES")||
				nomeOrigem.toUpperCase().contains("IMPRESSAO REALIZADA EM")||
				nomeOrigem.toUpperCase().contains("OUVIDORIA: 0800 777 0900")||
				nomeOrigem.toUpperCase().contains("NOVOS LANCAMENTOS")||
				nomeOrigem.toUpperCase().contains("CENTRAL PARA DE")||
				nomeOrigem.toUpperCase().contains("HORARIO DE ATENDIMENTO")||
				nomeOrigem.toUpperCase().contains("SAC DAYCOVAL")||
				nomeOrigem.toUpperCase().contains("HORARIO DE ATENDIMENTO")||
				nomeOrigem.toUpperCase().contains("CENTRAL DE ATENDIMENTO")||
				nomeOrigem.toUpperCase().contains("OS SALDOS")||
				nomeOrigem.toUpperCase().contains("LIMITE(+)")||
				nomeOrigem.toUpperCase().contains("SALDO BLOQUEADO")||
				nomeOrigem.toUpperCase().contains("SALDO DISPONIVEL")||
				nomeOrigem.toUpperCase().contains("VALOR BLOQUEADO") ||
				nomeOrigem.toUpperCase().contains("SALDO RESUMIDO")) {
				continue;
			}
		
		if (line.contains("DATA") && line.contains("LANCAMENTO") && line.contains("DOCTO") && line.contains("DEBITO") && line.contains("CREDITO")) {
			idataMovimento	= -1;
			idocumento      = -1;
			inomePortador	= -1;
			inomeOrigem		= -1;
			ivalorDocumento	= -1;
			for (int i = 0; i < memFile.getFieldsSize(); i++) {
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCTO")) idocumento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) inomeOrigem = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DEBITO")) ivalorDocumento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("CREDITO")) ivalorAuxiliar = i;
			}
			// logger.logInfo("LEITURA AUTOMATIZADA" + idataMovimento +"|"+idocumento+"|"+inomeOrigem+"|"+ivalorDocumento+"|"+ivalorAuxiliar);
			continue;
		}
        //#2311-020904
        if (tipo.equals("002")) {
			idataMovimento	= 0;
			idocumento      = 1;
			inomePortador	= -1;
			inomeOrigem		= 2;
			ivalorDocumento	= memFile.getFieldsSize()-1;
		}
		
		if (tipo.equals("003")) {
			idataMovimento	= 0;
			idocumento      = -1;
			inomePortador	= -1;
			inomeOrigem		= 1;
			ivalorDocumento	= 2;
		}

        if (memFile.getFieldsSize() == 1) {
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
        } else {
            try {
				dataMovimento = "";
                try {
					if(tipo.equals("002")){
                        if(!memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoData;
                    }else{
                        dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoData;
                    } 
					
					//logger.logInfo("dataString -> " + dataString);
					Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
				
				//#2306-008479
				String colunaData = memFile.getStringFieldRemoveEspCharsUpper(0);
                if (anoArquivo.equals("")) {
                    java.util.regex.Pattern datePattern = java.util.regex.Pattern.compile("[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}");
                    java.util.regex.Matcher dateMatcher = datePattern.matcher(colunaData);
                    if (dateMatcher.find()) {
                        String dataAux = cutString(colunaData, dateMatcher.start(), dateMatcher.end() + 1);
                        anoArquivo = dataAux.substring(dataAux.lastIndexOf("/") + 1);
                    }
                }
				
				if (dataMovimento.equals("") && !anoArquivo.equals("") && colunaData.matches("[0-3][0-9]\\/[0-1][0-9]")) {
					ivalorDocumento = memFile.getFieldsSize() - 1;
                    dataMovimento = colunaData + "/" + anoArquivo;
                }

                //#2311-020904
                String valorString = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[A-Z]", "").replaceAll("\\(", "").replaceAll("\\)", "").trim();
				// logger.logInfo("VALOR STRING == "+valorString+" | I = "+ivalorDocumento);
				
                valorDocumento  = 0;
				if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("-")) {
					debitoCredito = "EXTRATO-CREDITO";
					try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorAuxiliar));}
					catch (Exception vlrd) { valorDocumento = 0; }
				} else {
					debitoCredito = "EXTRATO-CREDITO";
					if (valorString.contains("-") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("CREDITO")) {
						debitoCredito = "EXTRATO-DEBITO";
					}
					if(tipo.equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorAuxiliar).equals("-")){
                        debitoCredito = "EXTRATO-DEBITO";
                    }
					valorString = valorString.replaceAll("\\.", "").replaceAll(",", ".").replaceAll(" ", "").replaceAll("-", "");
					// logger.logInfo("VALOR STRING == "+valorString+" | I = "+ivalorDocumento);
					try{valorDocumento = Double.parseDouble(valorString);}
					catch (Exception vlrd) { valorDocumento = 0; }
					
				}

                //logger.logInfo("VALOR == "+valorDocumento+" | DT === "+dataMovimento);
				
				if (valorDocumento == 0) continue;
                nomeOrigem      = "";
				
				restoNomeOrigem = "";
				int indiceProximaLinha = memFile.getCurrentIndex() + 1;
				String proximaLinha = (String) arquivoCompleto.get(indiceProximaLinha);
				
				if(!proximaLinha.toUpperCase().contains("SALDO") && !proximaLinha.toUpperCase().contains(colunaData) && !proximaLinha.toUpperCase().startsWith("HTTPS") && 
				!cutString(proximaLinha.trim(), 0, 4).contains("/")){
					restoNomeOrigem = proximaLinha.trim();
				}
				
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").replaceAll("[0-9]", "").replaceAll("\\.", "").replaceAll(",", "").trim() + " " + restoNomeOrigem;
				
				documento = "";
				
				if(idocumento >= 0) documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                complemento02 = documento;
                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();
            // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		if (line.startsWith("SALDO EM") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
		
		if (line.contains("DATA") && line.contains("DESCRICAO") && line.contains("DOCUMENTO") && line.contains("VALOR")) {
			idataMovimento	= -1;
			idocumento      = -1;
			inomePortador	= -1;
			inomeOrigem		= -1;
			ivalorDocumento	= -1;
			for (int i = 0; i < memFile.getFieldsSize(); i++) {
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRICAO")) inomeOrigem = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
			}
			logger.logDebug("LEITURA AUTOMATIZADA" + idataMovimento +"|"+idocumento+"|"+inomeOrigem+"|"+ivalorDocumento);
			continue;
		}

        if (memFile.getFieldsSize() == 1) {
			nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }

                valorDocumento  = 0;
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).replaceAll("[^A-Za-z]", "").trim();
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				if (nomeOrigem.contains("SALDO C/C")) continue;
                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                complemento02 = documento;

                if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

            // Inserir caso Chave nao encontrada.
            
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   


   return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String anoData	         = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String dataLote          = "";
    String documento         = "";
    String historico         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
	String tipoPlanilha 	 = "";
    String complemento01     = "";
    String complemento02     = "";
    String dataMovimento     = "";
    String debitoCredito     = "";
	String debitoCreditoAux  = "";
	

	String line 			 = "";
    String contLinhaExtrato  = "";
    String strValorDocumento = "";

    double valorJuros        = 0.0;
    double valorMulta        = 0.0;
    double valorDesconto     = 0.0;
    double valorDocumento    = 0.0;
    double valorPagamento    = 0.0;
	
	int inomeOrigem 	= 0;
	int idataMovimento  = 0;
	int idebitoCredito 	= 2;
	int ivalorDocumento = 2;
	
	if(jDados.has("LINE"))  	   line 		= jDados.optString("LINE");
	if(jDados.has("TIPOPLANILHA")) tipoPlanilha = jDados.optString("TIPOPLANILHA");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("NOMEPORTADOR")) nomePortador = jDados.optString("NOMEPORTADOR");
	
	
	
	

    while (memFile.hasNextLine()) {
		
		// logger.logInfo("LIN -> " + line);

        try {
            line = memFile.nextLine();
			line = StringUtil.removeSpecialCharsToUC(line);
			
			documento       = "";
            historico       = "";
            complemento01   = "";
            complemento02   = "";
			
            valorJuros      = 0;
            valorMulta      = 0;
            valorDesconto   = 0;
            valorDocumento  = 0;
            valorPagamento  = 0;
			
           
			// if (memFile.getFieldsSize() < 3) continue;
			
			
			
			// if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA CORRENTE:")) nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
			if(memFile.getFieldsSize() == 1 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("/")){
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dateException01) {
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");    // --- VERIFICAR
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dateException02) {
						continue;
					}
				}
				continue;
			}
			
			
			// logger.logInfo("DMZIN " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
			
			if(dataMovimento.equals("")) continue;
			
			String valorDocumentoStr = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), " ");
			valorDocumentoStr = valorDocumentoStr.replaceAll("-", "").replaceAll("\\+", "").replaceAll(",", "").replaceAll("\\.", "");
			
			try{valorDocumento = Double.parseDouble(valorDocumentoStr)/100;}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(idebitoCredito);
			if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
			valorDocumento = Math.abs(valorDocumento);
			
			// logger.logInfo("VDZIN " + valorDocumento + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + ivalorDocumento + " | " +valorDocumentoStr
							// + " | " + debitoCredito + " | " + debitoCreditoAux);
			
			if (valorDocumento == 0) {
				continue;
			}
			
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
			
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
			
			// logger.logInfo("NOO " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento + " | " + dataMovimento + " | " + nomeOrigemAuxiliar + " | " + debitoCredito);
			
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padr㯠Sofisa", readExtratoException);
        }
    }
    return true;
}


	
/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
	String ano 				 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            complemento01   = "";
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

           
			if (line.length() < 65) continue;
			
			
			try{
				if (line.substring(135,142).contains("202")) {
					
						try {
							String dataString = cutString(line, 134, 136) + "/" + cutString(line, 136, 138) + "/" + cutString(line, 138, 142); 
							
							if (!dataString.equals("")) {
								String dataMovimentoAux	  = getCampoDate(dataString);
								if (dataMovimentoAux.contains("/")) {
									dataMovimento     = getCampoDate(dataString);
									dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
								}
							}
						} catch (Exception dte) { continue; }
					// }
					if (dataMovimento.equals("")) continue;
				} else {dataMovimento = "";} //2402-028745 - Ignora linhas que nao sao lancamentos
			}catch(Exception dt){}
			
			try{
				nomeOrigem    = StringUtil.removeSpecialChars(cutString(line, 176, line.length())).trim().toUpperCase();
				nomePortador = StringUtil.removeSpecialChars(cutString(line, 58, 70)).trim().toUpperCase();
				
			}catch(Exception nOnP){
				 // logger.logInfo("CAIU NO NP " + nOnP.getMessage());
			}
			// complemento04 = documento; 
	        strValorDocumento = "0";
	        try{ 
				//2402-028745 - Nao pegava o ultimo numero do valor
				//strValorDocumento   = cutString(line, 152, 167).replaceAll("\\.","");
				strValorDocumento   = cutString(line, 152, 168).replaceAll("\\.","");
				debitoCredito		= cutString(line, 168, 169).trim().toUpperCase();
				//2402-028745 - Nao apareciam os centavos, aparecia como um valor inteiro
				//valorDocumento = Math.abs(DecimalUtil.toDecimal(strValorDocumento))
				valorDocumento = Math.abs(DecimalUtil.toDecimal(strValorDocumento)) /100;
	        } catch (Exception vlrx) {
				// logger.logInfo("CAIU AQQ " + vlrx.getMessage());
				valorDocumento = 0;
	        }
			
	        if (debitoCredito.contains("C")) debitoCredito = "EXTRATO-CREDITO";
			else if (debitoCredito.contains("D")) debitoCredito = "EXTRATO-DEBITO";
			
	        if(naoLeMais) continue;
			
			if(valorDocumento == 0) continue;
			if (dataMovimento.trim().equals("")) continue;

            // Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("COMPLEMENTO, EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(complemento02)
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }
    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read Amazonia PDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String dataLote          = "";
    String documento         = "";
    String historico         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String debitoCreditoAux  = "";

    String contLinhaExtrato  = "";
    String strValorDocumento = "";

    double valorDocumento    = 0.0;

    boolean naoLeMais = false;
    boolean pegaPortador = false;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idocumento      = 1;
	int inomeOrigem		= 1;
	int icomplemento02	= 2;
	int idataMovimento	= 0;
	int idebitoCredito	= 2;
	int ivalorDocumento	= 2;
	
	// 6)VALOR - COLUNA B, ALGUNS VALORES DESLOCARAM E FICARAM JUNTOS COM A DESCRI�?�?O NA COLUNA B, OUTROS FICARAM CORRETOS NA COLUNA C
	
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

	if(jDados.has("LINE"))  	   	 linha  	    = jDados.optString("LINE");
    if(jDados.has("CODEMPRESA"))   	 codEmpresa     = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  	 nomeArquivo    = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	
	// if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		// memFile.setFieldSeparator(";");	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("Line BIB pdf -> "+line);
		
		if (pegaPortador) {
			nomePortador = memFile.getStringFieldRemoveEspCharsUpper(0);
			pegaPortador = false;
			continue;
		}
		
		// if (line.startsWith("BANCO:")) continue;
		// if (line.startsWith("AGENCIA:")) continue;
		
		if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO TOTAL") && 
			memFile.getStringFieldRemoveEspCharsUpper(2).contains("SALDO BLOQUEADO") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("SALDO DISPONIVEL")) {
			pegaPortador = true;
			continue;
		}
		
		// if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("SUJEITO") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("ALTERACOES")) {
			// naoLeMais = true;
			// continue;
		// }
		// if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CEP:")) {
			// naoLeMais = false;
			// continue;
		// }
		// if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO")) continue;
		
		if (naoLeMais) continue;
		
		/*if (memFile.getFieldsSize() == 1) {
			nomeOrigem	+= " " + memFile.getStringFieldRemoveEspCharsUpper(0);
			logger.logInfo("AQUI " + nomeOrigem);
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
			continue;
		}*/
		
		debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(idebitoCredito);
        
		if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
		else debitoCredito = "EXTRATO-CREDITO";
        
		try {
			String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
			try {
				Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
			} catch (Exception dt1) {
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt2) {
					try {
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
						Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) { continue; }
				}
			}
			
			// logger.logInfo("DM -> "+dataMovimento+" | "+debitoCredito +" | "+debitoCreditoAux);
			// logger.logInfo("VD -> "+memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
			
			if(dataMovimento.equals("")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = "";
			
			
			// if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("*")) continue;
			
			
			/*String valorDocumentoStr = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
			
			if (!valorDocumentoStr.contains("R$")) {
				valorDocumentoStr = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1);
			}*/
			
			// try{valorDocumento = DecimalUtil.toDecimal(cutString(valorDocumentoStr,"R$"));}
			String valorDocumentoStr = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), " ");
			valorDocumentoStr = valorDocumentoStr.replaceAll("-", "").replaceAll("\\+", "").replaceAll(",", "").replaceAll("\\.", "");
			// logger.logInfo("stgVD -> " + valorDocumentoStr);
			valorDocumentoStr = valorDocumentoStr.replaceAll("R$", "");
			// logger.logInfo("stgVD2 -> " + valorDocumentoStr);
			try{valorDocumento = Double.parseDouble(valorDocumentoStr)/100;}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			valorDocumento = Math.abs(valorDocumento);
			
			 // logger.logInfo("VDZIN " + valorDocumento + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + ivalorDocumento + " | " +valorDocumentoStr
							// + " | " + debitoCredito + " | " + debitoCreditoAux);
			
			if (valorDocumento == 0) continue;

			// valorDocumento = 2100; // valor para teste
			nomeOrigem      = "";
			
			documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
			nomeOrigem		= cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem), 0, "R$");
			complemento02 	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);

			// logger.logInfo("MF " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + tipoLancamento);
			logger.logInfo("MF2 " + nomeOrigem);
			// logger.logInfo();

			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			// logger.logInfo("NOE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

		// Inserir caso Chave nao encontrada.
		

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}


public boolean readExtratoBKBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBMGPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

     
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-BRASILIA-EXCEL @##############################################*/
public boolean readExtratoBrasiliaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBTGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	// logger.logInfo("Entrou readExtrato C6");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";
	
	boolean naoLeMais = false;
	boolean padrao    = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    
	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
	int icomplemento03	= 4;
	String nomeOrigemAnterior = "";
	boolean desloca = false;
	boolean posicoesDesloca = false;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
	
		if (memFile.getStringField(ivalorDocumento).contains("/")) { //Data na coluna de valor
			continue;
		}
        
		//if (line.contains("DATA") && line.contains("LANCAMENTO") && line.contains("DCTO") && line.contains("CREDITO") && line.contains("DEBITO")) {
		//if memFile getFieldsSize() == 5
		if (line.contains("DATA") && line.contains("DESCRICAO") && line.contains("VALOR") && line.contains("DOC")) {
			idataMovimento	= -1;
			inomeOrigem		= -1;
			ivalorDocumento	= -1;
			
			for (int i = 0; i < memFile.getFieldsSize(); i++) {
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRICAO")) inomeOrigem = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC")) idocumento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")
					&& ivalorDocumento == -1) ivalorDocumento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("D/C")) icomplemento03 = i;
			}
 			continue;
		}
		
      
		// nomeOrigem = "";
		String dataString = "";
		dataMovimento = "";
		posicoesDesloca = true;
		nomeOrigem = "";
		
		try {

			
			//try{
			//	dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim());
			//}catch(Exception e){ dataMovimento = "" }

			if(memFile.getStringFieldRemoveEspCharsUpper(0).trim().length() > 10){
				padrao = true;
				dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).indexOf(" ")).replaceAll("\"","");
				nomeOrigem		= cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).indexOf(" ")).replaceAll("\"","").replaceAll("\\?","").trim();
				documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento-1).replaceAll("\"","").trim();
			
				complemento02 = documento;
				
				complemento03		= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03-1).trim();
				
				if(nomeOrigem.equals("SALDO DISPONIVEL")) continue;
				
				try{valorDocumento = memFile.getDoubleField(ivalorDocumento-1);}
				catch (Exception vlrd) { valorDocumento = 0; }
			}else{
				padrao = false;
				dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
			}
							
			try {
				Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				dataString = dataMovimento;
			} catch (Exception dt1) {
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					dataString = dataMovimento;
				} catch (Exception dt2) {
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						dataString = dataMovimento;
					} catch (Exception dt2) {
						dataString = "";
					}
				}
			}
		
			// valorDocumento  = 0;
			// debitoCredito = "";
			
			if(!padrao){
				if(dataMovimento.equals("")) continue;
				if(memFile.getFieldsSize() > 6){ 
					desloca = true;
					ivalorDocumento = memFile.getFieldsSize()-2;
					icomplemento03 = memFile.getFieldsSize()-1;
					idocumento = memFile.getFieldsSize()-3;
					// logger.logInfo("IDOMENTOI: " + idocumento);
					for(int j = 1 ; j < idocumento ; j++){
						nomeOrigem = (nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(j).replaceAll("\"","").replaceAll("\\?","").trim()).trim();
					}
				}

				if(!desloca) nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				
				try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
				catch (Exception vlrd) { valorDocumento = 0; }
				
				complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).trim();
				
				documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
				
				complemento02 	= documento;
			}else{
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();				
				
				documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
				
				complemento02 	= documento;
				
				complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).trim();
				
				try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
				catch (Exception vlrd) { valorDocumento = 0; }
			}
		
			// Douglas adicionado para ignorar lançamentos que não contém data e passado o continue do SALDO DISPONIVEL para baixo ## chamado #2307-010534
			if (!memFile.getStringFieldRemoveEspCharsUpper(0).contains("/202")) continue;
			if(nomeOrigem.equals("SALDO DISPONIVEL")) continue;
			// logger.logInfo("Vd -> " + valorDocumento);
			// logger.logInfo("Dt -> " + dataMovimento);
			
			// logger.logInfo("dm -> " + dataMovimento + " vd- > " + valorDocumento + " cpl03 -> " + complemento03);
			if (valorDocumento < 0 || complemento03.equals("D")) debitoCredito = "EXTRATO-DEBITO";
			if (valorDocumento > 0 && complemento03.equals("C")) debitoCredito = "EXTRATO-CREDITO";
			valorDocumento = Math.abs(valorDocumento);
			
			if (valorDocumento == 0) continue; 			
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
			if (dataMovimento.equals("")) continue;

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

		// Inserir caso Chave nao encontrada.
		
			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
			//logger.logInfo(debitoCredito + " | nomePortador:" + nomePortador + " | dataMovimento:" + dataMovimento + " | nomeOrigem:" + nomeOrigem + " | valorDocumento:" +  valorDocumento + " | " + complemento01);	
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
     }
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	logger.logInfo("Dentro da caixa");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento		= 1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
	int icomplemento02	= 3;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			//logger.logInfo("Line i caixa -> "+line);
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			
			String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
			if (!dataString.equals("")) {
				String dataMovimentoAux	  = getCampoDate(dataString);
				if (dataMovimentoAux.contains("/")) {
					dataMovimento     = getCampoDate(dataString);
					dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
					
				}
				if (!dataString.equals("") && dataMovimento.equals("")) {
					if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
						String pattern = "";
						if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
							if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
								pattern = "yyyy-MM-dd hh:mm:ss";
							} else {
								pattern = "yyyy-MM-dd";
							}
							dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
						} else {
							try {
								pattern = "ddddd";
								dataString = cutString(dataString, 0, 5);
								Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
								int datanum = Integer.parseInt(dataString);
								Calendar calSerial = Calendar.getInstance();
								calSerial.setTime(dt);
								calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
								dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
							} catch (Exception dt2) {dataMovimento = "";}
						}
						if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
					}
				}
			}
			
			//logger.logInfo("IDATA = "+idataMovimento+" -- data == "+dataMovimento);

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
			
			
			if (complemento02.contains("C") || complemento02.contains("D")){
				if (complemento02.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				if (complemento02.contains("D")) debitoCredito = "EXTRATO-DEBITO";
			}else{
				if (!complemento02.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				if (complemento02.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			}	

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato CEF Excel", readExtratoException);
        }
    }
    return true;
}



/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	//logger.logInfo("PADRAO CAIXA PDF123");


    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao  = "";

	String valorDocAux = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

	boolean tipoUmSemSaldo = false;
	String linhaRun = "";

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINHA"))   linhaRun   = jDados.optString("LINHA");

	if(tipoPadrao.equals("001") && linhaRun.contains("DATA") && !linhaRun.contains("SALDO")) tipoUmSemSaldo = true;

	//logger.logInfo("Tipo: "+tipoPadrao);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.contains("SALDO") && line.contains("DIA")) continue;
		if (line.contains("SAC") && line.contains("CAIXA")) continue;
		if (line.contains("PESSOAS") && line.contains("DEFICIENCIA")) continue;
		if (line.contains("OUVIDORIA") && line.contains("0800")) continue;
		if (line.contains("ALO CAIXA") && line.contains("0800")) continue;
		if (line.contains("HELP") && line.contains("DESK")) continue;
		if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("INTERNETBANKING") && line.contains("IMPRIME")) continue;
		if (line.contains("CAIXA.GOV.BR")) continue;


		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + cutString(line,line.lastIndexOf("|"),line.length()).replaceAll(";", " ");
		}
		//Douglas. Feito para o Chamado #2304-003957 para leitura das colunas 1 2 e 3
		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " / " + memFile.getStringFieldRemoveEspCharsUpper(2) + " / " + memFile.getStringFieldRemoveEspCharsUpper(3);
		}
		
		if(tipoPadrao.equals("010")){
			String linhaLimpa = line.replaceAll("  ", " ");
			if(linhaLimpa.contains("  ")){
				boolean limpouu = true;
				while(limpouu){
					if(linhaLimpa.contains("  ")){
						linhaLimpa = linhaLimpa.replaceAll("  ", " ");
					}else{
						limpouu = false;
					}
				}
			}
			String[] linhaArray = linhaLimpa.split(" ");

			dataMovimento = getCampoDate(linhaArray[0]);

			documento = linhaArray[1];

			nomeOrigem = "";
			for(int i = 2; i < (linhaArray.length-4); i++){
				nomeOrigem += " " + linhaArray[i];
			}
			try{
				valorDocumento = Double.parseDouble(linhaArray[linhaArray.length-4].replaceAll("\\.", "").replaceAll(",", ""))/100;
			}catch(Exception e){
				valorDocumento = 0;
			}
			debitoCreditoAux = linhaArray[linhaArray.length-3];
		}

		// logger.logInfo("DENTRO DO EXTRAto tipoPadrao -> " + tipoPadrao);
		//logger.logInfo("linelength " + line.length());
		if(tipoPadrao.contains("002")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				// logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}
		}
		if(tipoPadrao.contains("001")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				 logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					// if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i+1;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i; //Correção do chamado BUG CAIXA -> 2401-027811
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}

			if(line.startsWith("SALDO")) continue;
		}
		if(tipoPadrao.contains("003")){
			if (line.contains("MOVIMENTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO")) {
				idataMovimento	= -1;
				idocumento      = -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOVIMENTO"))      idataMovimento = i;
					ivalorDocumento = 4;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento + " | LIN == "+line);
				continue;
			}
			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}
		if(tipoPadrao.contains("004")){
			idataMovimento = 0;

			if (memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("C") || memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("D")) {
				inomeOrigem = 2;
				idocumento = 2;
				ivalorDocumento = 5;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(3);
			}
			else {
				inomeOrigem = 1;
				idocumento = 1;
				ivalorDocumento = 4;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}

        if (memFile.getFieldsSize() == 1 && !tipoPadrao.equals("010")) {
			if(tipoPadrao.equals("001") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().startsWith("EXTRATO")) {
				continue;
			} else {
				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			}
        } else {
				// logger.logInfo("DTS " + dataString);
            try {
				
				if(!tipoPadrao.equals("010")){

					String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");


					if (dataString.equals("000000")) continue;
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt1) {
						try {
							Date dt = memFile.getDateField(idataMovimento);
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) {
							try {
								dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
								Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
								dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							} catch (Exception dt2) { continue; }
						}
					}



					if (dataMovimento.equals("")) continue;

					valorDocumento  = 0;
					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
					try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
					catch (Exception vlrd) { valorDocumento = 0; }

					//2401-026791
					if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo) valorDocumento = 1;

					if (valorDocumento == 0) continue;


					nomeOrigem      = "";
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
					if (nomeOrigem.contains("SALDO C/C")) continue;
					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;
				
				}

				//2401-026791
				if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo){
					if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("C")){
						ivalorDocumento = memFile.getFieldsSize()-2;
					} else {
						ivalorDocumento = memFile.getFieldsSize()-1;
					}
					valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
					valorDocumento  = 0;
					try{valorDocumento = Double.parseDouble(valorDocAux);}
					catch (Exception vlrd) { valorDocumento = 0; }

					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);

					documento = memFile.getStringFieldRemoveEspCharsUpper(1);

					for(int i = 2; i < ivalorDocumento; i++){
						if(i == 2) nomeOrigem = "";
						nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(i);
					}
				}


				if(tipoPadrao.equals("003")){
					if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
					if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-CREDITO";
				}
				else if (tipoPadrao.equals("004")) {
					if (complemento03.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if (complemento03.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				}
				else{
                if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
				}
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );



                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

				// Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(documento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoCefPDF4(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
	if (nomeArquivo.toUpperCase().contains("CSV")) {
		memFile.setFieldSeparator(";");
	}

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

	//logger.logInfo("LOG IDATAMOVIMENTO - " + idataMovimento);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("AGENCIA:")) {
            nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
        }
		if (line.startsWith("FILE:")) {naoLeMais = true;}
        if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("EXTRATO POR PERIODO")) {naoLeMais = true;}
        if (line.startsWith("DATA DE")) {
            naoLeMais = false;
            continue;
        }
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("SALDO DIA")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("BLOQ.SALDO")) {continue;}
        if (naoLeMais) continue;
        try {
            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            //Tenta capturar o valor caso o memFile.getDoubleField tenha falhado
            if (valorDocumento == 0 && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches("[\\d\\.\\)\\-,\\s\\(]*")) {
                try {
                    valorDocumento = capturaValor(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                } catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
            }
            if (valorDocumento == 0) continue;
            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			documento       = "";
			documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}

//2312-024906
public boolean readExtratoCefPDF6(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

	int colunaVerificado = 0;
    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	//if (nomeArquivo.toUpperCase().contains("CSV")) {
	//	memFile.setFieldSeparator(";");
	//}

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		logger.logInfo("Linha: "+line);

		colunaVerificado = 0;

        if (naoLeMais) continue;
        try {

			for(int i = 0; i < 2; i++){

				idataMovimento = -1;
				idocumento = -1;
				inomeOrigem = -1;
				ivalorDocumento = -1;

				//Tratamento para pegar as colunas de cada lancamento a partir da coluna com a data
				for(int col = colunaVerificado; col < memFile.getFieldsSize(); col++){
					if(memFile.getStringFieldRemoveEspCharsUpper(col).trim().length() == 10 && !memFile.getStringFieldRemoveEspCharsUpper(col).contains(",") &&
					memFile.getStringFieldRemoveEspCharsUpper(col).contains("/")){
						idataMovimento = col;
						idocumento = col + 1;
						inomeOrigem = col + 2;
						ivalorDocumento = col + 3;

						colunaVerificado = col + 4;
						break;
					}
				}

				if(idataMovimento == -1 && ivalorDocumento == -1) continue;

				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}

				logger.logInfo("Data: "+dataMovimento);

				if(dataMovimento.equals("")) continue;

				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

				if (debitoCreditoAux.contains("D")) {
					debitoCredito = "EXTRATO-DEBITO";
				} else if(debitoCreditoAux.contains("C")) {
					debitoCredito = "EXTRATO-CREDITO";
				}

				valorDocumento  = 0;

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }

				logger.logInfo("Valor: "+valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();

				documento       = "";
				documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();
				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			}
        } catch (Exception ex) {
        }
    }
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


//CONVERSOR ANTIGO

public boolean readExtratoCiviaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoCoraExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
	
}


public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoCrehnorPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    //#fabrica
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento    = "";

    String cpfCnpj           = "";
    String dataLote          = "";
    String documento         = "";
    String historico         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String dataMovimento     = "";
    String debitoCredito     = "";

    String anoAux            = "";
    String agencia           = ""; 
	String anoData			 = "";
    String contaCorrente     = "";
    String contLinhaExtrato  = "";
	String cabecalhoPlanilha = "";
    String strValorDocumento = "";

    double valorJuros        = 0.0;
    double valorMulta        = 0.0;
    double valorDesconto     = 0.0;
    double valorDocumento    = 0.0;
    double valorPagamento    = 0.0;
    
	Date dataArmazenada = null;
    
	int ivalorDocumento = -1;
	
	if(jDados.has("CODEMPRESA"))        codEmpresa      = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo     = jDados.optString("NOMEARQUIVO").trim();
	if(jDados.has("NOMEPORTADOR"))    	nomePortador    = jDados.optString("NOMEPORTADOR").trim();
    if(jDados.has("TIPOLANCAMENTO"))    tipoLancamento  = jDados.optString("TIPOLANCAMENTO").trim();
	if(jDados.has("CABECALHOPLANILHA")) cabecalhoPlanilha = jDados.optString("CABECALHOPLANILHA").trim();

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            if(line.contains("SALDO ANTERIOR")) continue;
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("AGENCIA:") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA:"))
                nomePortador = line.replaceAll("\\|" , "");
				
			if (cabecalhoPlanilha.toUpperCase().contains("PERIODO CONSULTADO:")) {
				anoData = cutString(cabecalhoPlanilha,"PERIODO CONSULTADO:", "|");
				anoData = cutString(anoData,anoData.lastIndexOf("/")+1, anoData.length());
			}
			
            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            // nomeOrigem      = "";
            documento       = "";
            historico       = "";

            // valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

                // if(naoLeMais) continue;
            
				String dataPattern = "";
				String dataCandidate = memFile.getStringFieldRemoveEspCharsUpper(0);
				

				if (dataCandidate.matches("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
					dataPattern = "yyyy-MM-dd hh:mm:ss";
				} else {
					if (dataCandidate.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}")) {
						dataPattern = "yyyy-MM-dd";
					} else {
						dataPattern = "dd/MM/yyyy";
					}
				}
				
				if (!dataCandidate.equals("")) {
					if (dataCandidate.replaceAll("[0-9]", "").trim().equals("/") || dataCandidate.matches("[0-9]{2}/[0-9]{2}")) {
						try{
							dataMovimento     = (dataCandidate + "/" + anoData);
							dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
						}catch(Exception e){
							dataMovimento   = "";
							dataLote        = "";
						}
					} else {
						String dataMovimentoAux = "";
						if(!anoData.equals("") && dataCandidate.contains("-")){
							dataCandidate = anoData+"-"+cutString(dataCandidate,dataCandidate.indexOf("-")+1,dataCandidate.length());
							dataMovimentoAux  = getCampoDate(dataCandidate, dataPattern, "dd/MM/yyyy");
						}else{
							dataMovimentoAux  = getCampoDate(dataCandidate, dataPattern, "dd/MM/yyyy");
						}
						if (dataMovimentoAux.contains("/")) {
							try {
								dataMovimento     = dataMovimentoAux;
								dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
							} catch (Exception ex) {
								dataMovimento = "";
								dataLote = "";
							}
						}
					}
					if (!dataMovimento.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}")) dataMovimento = "";
				}
			
            if(dataMovimento.equals("")) continue;
            
            nomeOrigem      += " " + memFile.getStringFieldRemoveEspCharsUpper(2);
			ivalorDocumento = -1;
            if(!memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("[^0-9]", "").equals("")){ ivalorDocumento = 3; debitoCredito = "EXTRATO-DEBITO";}
            if(!memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("[^0-9]", "").equals("")){ ivalorDocumento = 4; debitoCredito = "EXTRATO-CREDITO";}
			if(ivalorDocumento != -1)
				try {
					valorDocumento = memFile.getDoubleField(ivalorDocumento);
					nomeOrigem      =  memFile.getStringFieldRemoveEspCharsUpper(2);
					contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				} catch(Exception e) {
					logger.logInfo("caiu catch ");
					valorDocumento = 0;
				}

            valorDocumento = Math.abs(valorDocumento);
            logger.logInfo("DT -> " + dataMovimento + " VD-> " + valorDocumento);
            complemento02   = memFile.getStringFieldRemoveEspCharsUpper(1);
			documento = memFile.getStringFieldRemoveEspCharsUpper(1);

            // contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO, HISTORICO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(nomeOrigem)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        
		} catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
		
	}

    return true;
}


public boolean readExtratoEfiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	  return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


		
		/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String linha         	 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
	

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINHA"))  linha  = jDados.optString("LINHA");
	
	if(linha.contains("CONTA:")){
		nomePortador = cutString(linha, "CONTA:", "-");
	}

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

			if(line.contains("DATA MOVIMENTACAO") && line.contains("DESCRICAO") && line.contains("DETALHE") && line.contains("VALOR")){
				for(int i = 0; i < memFile.getFieldsSize(); i++){
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA MOVIMENTACAO")) idataMovimento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRICAO")) inomeOrigem = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
				}
				if(idataMovimento == -1 || ivalorDocumento == -1 || inomeOrigem == -1){
					inomeOrigem = 2;
					idataMovimento = 0;
					ivalorDocumento = 5;
				}
				continue;	
			}
			
			
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
            complemento01   = "";
			complemento01   = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"","");

            if (!complemento01.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if ( complemento01.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;

                }

                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

		} catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read Fibra PDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String dia				 = "";
	String mes				 = "";
	String ano				 = "";
	String dataAux			 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;

    boolean naoLeMais = false;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= -1;
	int inomePortador	= -1;
	int inomeOrigem		= -1;
	int ivalorDocumento	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("Line Amazonia pdf -> "+line);
		
		idataMovimento	= 0;
		inomeOrigem		= 0;
		ivalorDocumento	= 1;
        
		try {
            dataMovimento = "";
			if(!memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO")){
                dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).indexOf("DE")-3, "DE");
                try {
                    mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(0), "DE", memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf("DE")));
                }catch(Exception e) {
                    mes = "";
                }
                try {
                ano		= cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf(" ")+1);
                }catch(Exception e) {
                    logger.logInfo("CATCH"+e);
                }
                dataAux = dia+"/"+mes+"/"+ano;
                continue;
            }

            try {
                if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) dataMovimento = dataAux;
                else dataMovimento = "";
            }catch(Exception e) {
                logger.logInfo("CATCH1"+e);
            }
			if (dataMovimento.equals("")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = "";
			
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			if (valorDocumento == 0) continue;

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

			nomeOrigem      = "";
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			// logger.logInfo("NOE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}








public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
 }


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read Guanabara PDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String dataString = "";

    String strValorDocumento = "";
    String restoNomeOrigem   = "";
    String contLinhaExtrato  = "";
	
	String tipo = "";

    double valorDocumento    = 0.0;

    boolean naoLeMais = true;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= -1;
	int inomePortador	= -1;
	int inomeOrigem		= -1;
	int ivalorDocumento	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	
	
	List arquivoCompleto = memFile.getLines();

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("Line Guanabara pdf -> "+line);
		
		idataMovimento	= 0;
		inomeOrigem		= 1;
		ivalorDocumento	= 2;
		
		restoNomeOrigem = "";
		
		if(nomePortador.contains("C/C:")){
			tipo = "002";
		}
		
		if(tipo.equals("002")){
			ivalorDocumento = memFile.getFieldsSize() - 1;
			inomeOrigem = memFile.getFieldsSize() - 2;
		}
		
		if(line.contains("C/C:")){ 
			nomePortador = memFile.getStringFieldRemoveEspCharsUpper(7).replaceAll(";", "") +" "+ memFile.getStringFieldRemoveEspCharsUpper(8).replaceAll(";", "");
		}
        
		try {
            if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/20") && !tipo.equals("002")){
                dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).indexOf("/")-2).replaceAll("\"","");
                
				continue;
            }

            if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && !tipo.equals("002")){
                if (dataString.equals("000000")) continue;
                try {
                    dataMovimento = getCampoDate(dataString);
                    dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                } catch (Exception dt1) {
                    logger.logInfo("ERRO: "+dt1);
					continue;
                }
            }
			
			if(tipo.equals("002")){
				dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
			}
			
			//Padrão 2 - Pega resto de nomeOrigem quando tem quebra linha
			if(tipo.equals("002")){
				int indiceProximaLinha = memFile.getCurrentIndex() + 1;
				String proximaLinha = (String) arquivoCompleto.get(indiceProximaLinha);
				
				if(proximaLinha.contains("Impresso em")){
					proximaLinha = (String) arquivoCompleto.get(indiceProximaLinha + 13);
				}
				// logger.logInfo("Proxima linha: "+proximaLinha);

				if(!proximaLinha.contains("SALDO") && !proximaLinha.contains("Saldo") && !proximaLinha.contains(dataMovimento)){
					restoNomeOrigem = proximaLinha;
				} else {
					restoNomeOrigem = "";
				}
				
				
				
			}
			
			if (dataMovimento.equals("")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = "";

			try{
                strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if(!strValorDocumento.matches("[-]?([0-9][.]?[,]?)+") && !tipo.equals("002")){
                    strValorDocumento = cutString(strValorDocumento, 0, strValorDocumento.indexOf(",")+3);
					restoNomeOrigem = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).indexOf(",")+3);
                }
				
				if (strValorDocumento.contains("R")) strValorDocumento = cutString(strValorDocumento, " ");
    
                valorDocumento = Double.parseDouble(strValorDocumento.replaceAll("\\.", "").replaceAll(",", "."));
                valorDocumento = Math.abs(valorDocumento);
				
				
            }catch (Exception vlrd) { valorDocumento = 0; }
			// logger.logInfo("VALOR STRING == "+strValorDocumento);
			// logger.logInfo("valorDocumento: "+valorDocumento);
			if (valorDocumento == 0) continue;

            debitoCreditoAux = strValorDocumento;
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			
			nomeOrigem      = "";
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			nomeOrigem      = nomeOrigem + " " + restoNomeOrigem;
			nomeOrigem      = nomeOrigem.trim();
			
			if (tipo.equals("") && nomeOrigem.contains("R$")) nomeOrigem = cutString(nomeOrigem, 0, "R$");
			
			if(tipo.equals("002")) {
				documento = "";
			}
			
			if(memFile.getFieldsSize() > 3 && tipo.equals("002")){ 
				documento = memFile.getStringFieldRemoveEspCharsUpper(1);
			} 
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			// logger.logInfo("NOE " + tipo + " | " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento + " | " + dataMovimento);
			
			//logger.logInfo("Lancamento - Data: "+dataMovimento+" Nome: "+nomeOrigem+" Valor: "+valorDocumento+" DC: "+debitoCredito+" Documento: "+documento);

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}


/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoHSBCExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	

    return true;
}


public boolean readExtratoHSBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


		
		/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	logger.logInfo("ENTROU INDUSTRIAL EXCEL -> ");
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String linha         	 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int inomePortador	=-1;
	int inomeOrigem		= 5;
	int ivalorDocumento	= 14;
	

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINHA"))  linha  = jDados.optString("LINHA");
	
	
	
	

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			
			if(line.contains("DATA") && line.contains("LANCAMENTO") && line.contains("DETALHE") && line.contains("VALOR")){
				for(int i = 0; i < memFile.getFieldsSize(); i++){
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DETALHE") &&
						memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) inomeOrigem = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
				}
				if(idataMovimento == -1 || ivalorDocumento == -1 || inomeOrigem == -1){
					inomeOrigem = 5;
					idataMovimento = 1;
					ivalorDocumento = 14;
				}
				continue;	
			}
			
			
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
            complemento01   = "";
			complemento01   = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"","");

            if (!complemento01.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if ( complemento01.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;

                }

                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

		} catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoInfinitePayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
     
    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercantilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNextPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoAux 			 = "";
	String dataString 		 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
 	int idataMovimento	= 0;
	int idocumento      = -1;
	int inomePortador	= -1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
	
   

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    // if(jDados.has("ANOAUX"))  	   anoAux  		= jDados.optString("LINE");
	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("LINE -> " + line); 
		if(line.contains("CONTA:")){
			nomePortador = cutString(line, "CONTA:");
			nomePortador = "EXTRATO ORIGINAL - "+nomePortador;
			continue;
		}
		
		
		complemento01 = nomePortador.replaceAll("\\?","");
		// logger.logInfo("LIN -> " + line + " |FS -> " + memFile.getFieldsSize());
		if (memFile.getFieldsSize() == 1) {
			nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
			
		
		}else{
		
			try {
				// #Fabrica(2019-05-20)
				try {
					dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoAux;
					Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					dataString = dataMovimento;
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						dataString = dataMovimento;
					} catch (Exception dt2) {
						try {
							Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							dataString = dataMovimento;
						} catch (Exception dt2) {
							dataString = "";
						}
					}
				}
				
				// logger.logInfo("DM "+idataMovimento+" -> "+dataMovimento+" MF DATA = "+memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
				
				if (dataMovimento.equals("")) continue;

				valorDocumento  = 0;
				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento-1);
				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }

				// logger.logInfo("VD "+ivalorDocumento+" -> "+valorDocumento);
				if (valorDocumento == 0) continue;


				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				// documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
				// complemento02   = documento;

				if (debitoCreditoAux.contains("CREDITO")) debitoCredito = "EXTRATO-CREDITO";
				if (debitoCreditoAux.contains("DEBITO")) debitoCredito = "EXTRATO-DEBITO";
	 
				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();

			
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			} catch (Exception ex) {
			}
		}
     }
    return true;
}


public boolean readExtratoOteroBankExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPagPixBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


				
		/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String linha         	 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
	

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINHA"))  linha  = jDados.optString("LINHA");
	
	

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

			if(line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOCTO") && line.contains("CREDITO") && line.contains("DEBITO")){
				for(int i = 0; i < memFile.getFieldsSize(); i++){
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCTO")) idocumento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CREDITO")) ivalorDocumento = i;
				}
				if(idataMovimento == -1 || idocumento == -1 || inomeOrigem == -1){
					idocumento = 2;
					inomeOrigem = 1;
					idataMovimento = 0;
					ivalorDocumento = 3;
				}
				continue;	
			}
			
			
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            valorDocumento  = 0;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1).equals("")){
				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento+1));}
				catch (Exception vlrd) { valorDocumento = 0; }
			}
			
			if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1).equals("")){
				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }
			}
			
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
            complemento01   = "";
			complemento01   = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"","");

            if (!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) debitoCredito = "EXTRATO-CREDITO";
            if (!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1).equals("")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;

                }

                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

		} catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoPinkPayPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPlannerPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPoupeCrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  
  return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
 
    return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
   
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


public boolean readExtratoSicoobCapitalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readExtratoSicoobConveniosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public boolean readExtratSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


	/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String line = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	int idocumento  = -1;
	int inomeOrigem = -1;
	int idataMovimento  = -1;
	int ivalorDocumento = -1;
	
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("LINE"))  line = jDados.optString("LINE");

    while (memFile.hasNextLine()) {
		// logger.logInfo("LIN -> " + line);
		for(int i =0; i < memFile.getFieldsSize(); i++){
			String campo = memFile.getStringFieldRemoveEspCharsUpper(i);
			if(campo.contains("DATA")) idataMovimento = i;
			if(campo.contains("HISTORICO") || campo.contains("LANCAMENTO")) inomeOrigem = i;
			if(campo.contains("N") && campo.contains("DOCUMENTO")) idocumento = i;
			if(campo.contains("VALOR")) ivalorDocumento = i;
		}
		// logger.logInfo("IDOC -> " + idocumento);
		if(idataMovimento == -1 || inomeOrigem == -1 || idocumento == -1 || ivalorDocumento == -1){
			idataMovimento = 0;
			inomeOrigem = 2;
			idocumento = 8;
			ivalorDocumento = 9;
		}
		
		
			try {
				line = memFile.nextLine();
				line = StringUtil.removeSpecialCharsToUC(line);
				// logger.logInfo("LIN -> " + line + " |FS -> " + memFile.getFieldsSize());
				if(memFile.getFieldsSize() == 3){
					// logger.logInfo("wFOI ESSA LINHA " + line);
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("HISTORICO")
						.where("CHAVE = ? ")
						.param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(2))
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						// logger.logInfo(" memfile  n existe " + sqlUpdateException.getMessage());
					}
					continue;
				}
				
				complemento01   = nomePortador;
				complemento02   = "";
				complemento03   = "";
				complemento04   = "";
				complemento05   = "";

				complemento06   = "";
				complemento07   = "";
				complemento08   = "";
				complemento09   = "";
				complemento10   = "";

				cpfCnpj         = "";

				nomeOrigem      = "";
				documento       = "";
				historico       = "";
				

				valorDocumento  = 0;
				valorJuros      = 0;
				valorDesconto   = 0;
				valorMulta      = 0;
				valorPagamento  = 0;

				// if (memFile.getStringField(0).equals("")) continue;
				
				
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dateException01) {
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");    // --- VERIFICAR
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dateException02) {
						continue;
					}
				}
				
				logger.logInfo("MF.VD -> " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
				strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
				if(strValorDocumento.contains("-")){
					strValorDocumento = strValorDocumento.replaceAll("-", "").replaceAll("\\.", "").replaceAll(",", "\\.");
					// logger.logInfo("strVD -> " + strValorDocumento);
					valorDocumento = Double.parseDouble("-"+strValorDocumento);
				}
				if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")){	
					try {
						valorDocumento = memFile.getDoubleField(ivalorDocumento);
					} catch (Exception valorException01) {
						valorDocumento = 0;
					}
				}
				// logger.logInfo("OTT -> " + " |VD=" + valorDocumento);
				// if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-"))
					// valorDocumento = valorDocumento * -1;
				// logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento);
				if (valorDocumento > 0 || memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("+")) debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0 || memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
				if (valorDocumento == 0) continue;

				valorDocumento = Math.abs(valorDocumento);

				nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
				complemento02 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
				documento	  = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
				
			  

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();

				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
					// Atualizar Chave caso encontrada.
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			} catch (Exception readExtratoException) {
				logger.logError("Erro de leitura de Extrato Padrão Sofisa", readExtratoException);
			}
    }
    return true;
}



//####################################################################################################################################
//									EXTRATO SOFISA PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	//logger.logInfo("Entrou read Sofisa");
	
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String anoData	         = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String dataLote          = "";
    String documento         = "";
    String historico         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
	String tipoPlanilha 	 = "";
    String complemento01     = "";
    String complemento02     = "";
    String dataMovimento     = "";
    String debitoCredito     = "";
	String debitoCreditoAux  = "";
	

	String line 			 = "";
    String contLinhaExtrato  = "";
    String strValorDocumento = "";
	String tipo 			 = "";

    double valorJuros        = 0.0;
    double valorMulta        = 0.0;
    double valorDesconto     = 0.0;
    double valorDocumento    = 0.0;
    double valorPagamento    = 0.0;
	
	int inomeOrigem 	= 1;
	int idataMovimento  = 0;
	int idebitoCredito 	= 4;
	int ivalorDocumento = 3;
	int idocumento = 2;
	
	if(jDados.has("LINE"))  	   line 		= jDados.optString("LINE");
	if(jDados.has("TIPOPLANILHA")) tipoPlanilha = jDados.optString("TIPOPLANILHA");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("NOMEPORTADOR")) nomePortador = jDados.optString("NOMEPORTADOR");
	
	
	
	List arquivoCompleto = memFile.getLines();

    while (memFile.hasNextLine()) {
		
		// logger.logInfo("LIN -> " + line);

        try {
            line = memFile.nextLine();
			line = StringUtil.removeSpecialCharsToUC(line);
			
			// logger.logInfo("Linha: " + memFile.getStringFieldRemoveEspCharsUpper(0) + " | " + memFile.getStringFieldRemoveEspCharsUpper(3) + " | " + line); 
			
			if(line.contains("SALDO")){
				continue;
			}
			
			if(tipo.equals("")){
				if(arquivoCompleto.toString().toUpperCase().contains("SOFISA NETBANKING")){
					tipo = "002";
				} else{
					tipo = "001";
				}
			}
			
			
			
			
			if(tipo.equals("001")){
				idebitoCredito 	= 3;
				ivalorDocumento = 3;
			}
			
			
			if (memFile.getFieldsSize() == 1 && !line.contains("POSICAO EM")) {
				//logger.logInfo("AGUI " + line + " |vaidale " + nomeOrigem + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));
				nomeOrigem	+= " " +  memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
				continue;
			}
			
			documento       = "";
            historico       = "";
            complemento01   = "";
            complemento02   = "";
			
            valorJuros      = 0;
            valorMulta      = 0;
            valorDesconto   = 0;
            valorDocumento  = 0;
            valorPagamento  = 0;
			
           
			// if (memFile.getFieldsSize() < 3) continue;
			
			
			
			// if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA CORRENTE:")) nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
			
			try {
				Date dt = memFile.getDateField(idataMovimento);
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				//dataMovimento = getCampoDate(dt);
			} catch (Exception dateException01) {
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");    // --- VERIFICAR
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dateException02) {
					continue;
				}
			}
			
			// logger.logInfo("DMZIN " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
			
			if(dataMovimento.equals("")) continue;
			
			if(tipo.equals("001") && memFile.getFieldsSize() == 3){
				ivalorDocumento = 2;
				idebitoCredito = 2;
			}
			
			String valorDocumentoStr = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
			valorDocumentoStr = valorDocumentoStr.replaceAll("-", "").replaceAll("\\+", "").replaceAll(",", "").replaceAll("\\.", "").replaceAll(" ", "");
			
			try{valorDocumento = Double.parseDouble(valorDocumentoStr)/100;}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(idebitoCredito);
			
			
			
			if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
			
			if (tipo.equals("001") && memFile.getFieldsSize() == 5) {
				if (memFile.getStringFieldRemoveEspCharsUpper(4).contains("-")) debitoCredito = "EXTRATO-DEBITO";
			}
			valorDocumento = Math.abs(valorDocumento);
			
			// logger.logInfo("VDZIN " + valorDocumento + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + ivalorDocumento + " | " +valorDocumentoStr
							// + " | " + debitoCredito + " | " + debitoCreditoAux);
			
			if (valorDocumento == 0) {
				continue;
			}
			
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
			
			documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
			
			if(tipo.equals("001") && memFile.getFieldsSize() == 3){
				documento = "0";
			}
			
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
			
			// logger.logInfo("NOO " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento + " | " + dataMovimento + " | " + debitoCredito);
			//logger.logInfo("VD DT DC - "+ valorDocumento + " | " + dataMovimento + " | " + debitoCredito);
			
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato PadraoSofisa", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoSulcrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}



public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

 

	return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}



//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    
	int inomeOrigem		= 1;
	int idataMovimento	= 0;
	int idocumento      =-1;
	int inomePortador	=-1;
	int ivalorDocumento	= 3;	//(VALOR POSITIVO RC, NEGATIVO PG)
	int icomplemento01	=-1;	//#coluna D contem(Conta) 
	int icomplemento02	= 2;
	int icomplemento04	= 1;
	
    complemento01 = nomePortador;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        
		//if(memFile.getStringFieldRemoveEspCharsUpper(3).contains("CONTA:")) nomePortador = cutString(memFile.getStringFieldRemoveEspCharsUpper(3), "CONTA: ");
		
		try {
			if(memFile.getFieldsSize() <= 5){
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { continue; }
					}
				}

				valorDocumento	= 0;
				nomeOrigem		= "";
				complemento02	= "";
				complemento04	= "";
				
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").trim();
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","").trim();
				complemento04	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).replaceAll("\"","").trim();
			   
				if(memFile.getStringFieldRemoveEspCharsUpper(4).equals("")){
					complemento02 = "";
					ivalorDocumento = 2;
				}else{
					ivalorDocumento = 3;
				}
			   
				if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
					try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
					catch (Exception vlrd) { valorDocumento = 0; }
				}
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
					try{valorDocumento = memFile.getDoubleField(ivalorDocumento+1);}
					catch (Exception vlrd) { valorDocumento = 0; }
				}

				if (valorDocumento == 0) continue;
				
				if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0) {
					debitoCredito = "EXTRATO-DEBITO";
					valorDocumento = Math.abs(valorDocumento);
				}
			}
			if(memFile.getFieldsSize() > 5){
				
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { continue; }
					}
				}
				
				valorDocumento	= 0;
				nomeOrigem		= "";
				complemento02	= "";
				complemento04	= "";
				
				for(int i = 1; i < memFile.getFieldsSize()-3; i++){
					nomeOrigem	+= " " + memFile.getStringFieldRemoveEspCharsUpper(i).replaceAll("\"","").trim();
				}
				
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-3).replaceAll("\"","").trim();
				complemento04	= nomeOrigem.replaceAll("\"","").trim();
				  
				  
				if(!memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2).equals("")){
					try{valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-2);}
					catch (Exception vlrd) { valorDocumento = 0; }
				}
				
				if (valorDocumento == 0) continue;
				
				if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0) {
					debitoCredito = "EXTRATO-DEBITO";
					valorDocumento = Math.abs(valorDocumento);
				}
				
			}

			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

            // Inserir caso Chave nao encontrada.
            

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) { }
    }
    return true;
}



public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


		
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String linha         	 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento      = 10;
	int inomePortador	=-1;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 14;
	

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINHA"))  linha  = jDados.optString("LINHA");
	
	

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

			if(line.contains("DATA") && line.contains("LANCAMENTO") && line.contains("DOCUMENTO") && line.contains("VALOR")){
				for(int i = 0; i < memFile.getFieldsSize(); i++){
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) inomeOrigem = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
				}
				if(idataMovimento == -1 || ivalorDocumento == -1 || inomeOrigem == -1 || idocumento == -1){
					idataMovimento	= 1;
					idocumento      = 10;
					inomeOrigem		= 3;
					ivalorDocumento	= 14;
				}
				continue;	
			}
			
			
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			documento      = "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
            complemento01   = "";
			complemento01   = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"","");

            if (!complemento01.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if ( complemento01.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;

                }

                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

		} catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}


				
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantim2Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String linha         	 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento      = 3;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 5;
	

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINHA"))  linha  = jDados.optString("LINHA");
	
	

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

			if(line.contains("DATA") && line.contains("LANCAMENTO") && line.contains("DOCUMENTO") && line.contains("VALOR")){
				for(int i = 0; i < memFile.getFieldsSize(); i++){
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) inomeOrigem = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
					if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
				}
				if(idataMovimento == -1 || ivalorDocumento == -1 || inomeOrigem == -1 || idocumento == -1){
					idataMovimento	= 0;
					idocumento      = 3;
					inomeOrigem		= 1;
					ivalorDocumento	= 5;
				}
				continue;	
			}
			
			
            // if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if(!memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("SALDO DO DIA")){
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}
				continue;
			}

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			documento      = "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
            complemento01   = "";
			complemento01   = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"","");

            if (!complemento01.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if ( complemento01.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;

                }

                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

		} catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	// logger.logInfo("read Votorantim PDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;

    boolean naoLeMais = true;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= -1;
	int inomePortador	= -1;
	int inomeOrigem		= -1;
	int ivalorDocumento	= -1;
	int idocumento      = -1;
	int icomplemento02  = -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logInfo("Line Votorantim pdf -> "+line);

		if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("CC:")) nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);

		if(line.contains("DATA") && line.contains("LANCAMENTOS") && line.contains("DOCUMENTO") && line.contains("VALOR")) naoLeMais = false;

		if(naoLeMais) continue;
		
		idataMovimento	= 0;
		inomeOrigem		= 1;
		ivalorDocumento	= 3;
		icomplemento02  = 2;
		idocumento      = 2;
        
		try {
            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
			if (dataString.equals("000000")) continue;
			try {
				Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
				dataLote = DateUtil.dateToString(dt, "yyyy-MM");
			} catch (Exception dt1) {
				try {
					Date dt = memFile.getDateField(idataMovimento);
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt2) {
					try {
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
						Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) { continue; }
				}
			}
			if (dataMovimento.equals("")) continue;
			if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

			valorDocumento  = 0;
			debitoCreditoAux = "";
			
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			if (valorDocumento == 0) continue;

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

			nomeOrigem      = "";
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			
			complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","").trim();
			documento   	= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			// logger.logInfo("NOE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
	JSONObject extratoEmpresa = new JSONObject();

	String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	
	String dataString 		 = "";
	String lote              = "";
	
    double valorDocumento    = 0.0;

    boolean naoLeMais = false;

	int idataMovimento	= -1;
	int inomePortador	= -1;
	int inomeOrigem		= -1;
	int ivalorDocumento	= -1;
	int idocumento      = -1;
	int icomplemento02  = -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
	if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
		memFile.setFieldSeparator(";");	
	
    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		if(line.contains("PAGINA") || line.contains("EXTRATO DE CONTA VINCULADA")) naoLeMais = true;
        if(line.contains("O EXTRATO")) {
			naoLeMais = false;
			continue;
		}
		
		if(line.contains("DATA") && line.contains("LANCAMENTO")) {
			naoLeMais = false;
			continue;
		};
		
        if(naoLeMais) continue;
		
		idataMovimento	= 0;
		inomeOrigem		= 0;
		ivalorDocumento	= memFile.getFieldsSize() - 1;
		icomplemento02  = 1;
		idocumento      = 1;
        
	
		
		try {
            //---Quando o campo no indice idataMovimento nao for uma data, sera capturado o nomeOrigem, para aproveitar a condicao---
            if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).matches("\\d{2}/\\d{2}/\\d{4}")){
                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");	
				//logger.logInfo("LOG DATA STRING - " + dataString);
                continue;
            }

            else{
                nomeOrigem      = "";
			    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
            }
			
            if (dataMovimento.equals("000000")) continue;
			
			valorDocumento  = 0;
			debitoCreditoAux = "";
			
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
			
			//logger.logInfo("LOG VALOR DOCUMENTO E PORTADOR - " + valorDocumento + " | " + nomePortador);
            if (valorDocumento == 0) continue;

			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			
			complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","").trim();
			documento   	= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
			
			contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

			chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			
			
			lote = (codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento);
			
			//logger.logInfo("LOG CHAVE EXTRATO - " + chaveExtrato);
			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			
			extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();
			
			//logger.logInfo("LOG EXTRATO EMPRESA - " + extratoEmpresa);

			if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
				try {
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				} catch (Exception sqlInsertException) {
					logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
					continue;
				}
			} else {
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
					logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
					continue;
				}
			}
		} catch (Exception ex) {
		}
        
    }
    return true;
}


public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BB-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_SicoobPDFF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}




public HashMap readFrancesinhaCresolPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readFrancesinhagrupoAilosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readExtratoItauCsvFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}



public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSafraPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


public HashMap readFrancesinhaSantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSisprimeExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


//2312-024960
public HashMap readFrancesinhaUnicrediPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinhaBanrisulTXT(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoXLSX (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readFrancesinha_CefPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-INTERFOC @##############################################*/
public HashMap readInterfocGenesysMCP002(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readPosto_Ravanello(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ ERP-LINX @##############################################*/

public HashMap readLinx_AutoSystem_ExtratoBancario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_ContasPagas(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_MovimentacaoContas(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_Recebimentos(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ ERP-SOFTPHARMA @##############################################*/
public HashMap readLinxSoftpharmaFCPA200(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


public HashMap readNotasCorretagemXP(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPR00308(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}

/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPR00428(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}

/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPRX004815(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}




/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-SINDISOFT @##############################################*/
public HashMap readSindiSoft(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


/*#############################################@ ERP-SISJURIS @##############################################*/
public HashMap readSisjuriBCSFinanceiro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
	
    return mapaVariavel;
}


/*#############################################@ ERP-SYSTEXTIL @##############################################*/
public HashMap readSystextil(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}

