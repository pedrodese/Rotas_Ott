{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
{import: io_contabil.Ottimizza_MeuCaixa};
{import: io_contabil.Lancamentos};


// TEMPLATE 26.05.2022
// Colocado tipoPlanilha no Lote Encerrado
// colocado para trocar XLSX por CSV se marcado no roteiro 

public JSONArray run(InoutLogger logger) throws Exception {

	JSONArray  records  = new JSONArray();
	JSONObject ultimoJS = new JSONObject();

	// gera seguranca nas conexoes com Heroku
	// Create a trust manager that does not validate certificate chains
	javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
		new javax.net.ssl.X509TrustManager(){
			public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

			public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

			public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
		}
	};

	// Install the all-trusting trust manager
	try {
		javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
		sc.init(null, trustAllCerts, new java.security.SecureRandom());
		javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	} catch (Exception e) {
		// 
	}
	
	
	// Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	SysProperties propsEmp = SysProperties.getInstance();
	JSONObject roteiroCRMPrincipal = getRoteiro();
	JSONObject roteiroCRM = getRoteiro();
	JSONObject jStatus = new JSONObject();
	
 
	props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	//Contectar na Base de Dados depara do heroku(nuvem)
	DBPostgreSQL dbIODepara = null;

 	String empresa = getNomeEmpresa();
	
	
	String codEmpresa = props.get(empresa + "_COD_EMPRESA");
	 
	if (codEmpresa == null) {
		empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
		codEmpresa = props.get(empresa + "_COD_EMPRESA");		
	}
	
 
	String tipoProduto = "";
	try {
		tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
	} catch (Exception xx) {tipoProduto = "OIC_PACOTE";}
	
	
	if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";
	
 	
	String processaOud = "";
	try {
		processaOud = props.get("PROCESSA_OUD");
	} catch (Exception e) {processaOud = "FALSE";}
	if (processaOud.equals("")) processaOud = "FALSE";

	String ERPContabil = props.get("ERP_CONTABILIDADE");
	String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
	String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
	String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
	String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM");
	
 	
	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";
	
	String tipoLancamento = getNomeRota();
	if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
	if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


	String compDirName = nomeEmpresa + "_#" + codEmpresa;
	String dirName = "";
	if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
	if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

	String backupDirName = dirName + "/Processado";

	boolean erroShrink = false;
	boolean geraCabecalhoCordilheira = true;
	boolean cabecalhoNaoEncontrada        = true;
	boolean apagaExtrato        = false;
	boolean apagaContaT         = false;
	boolean geraRegraPortador   = false;
	boolean comparaRazao        = false;
	boolean encontrouComplemento = true;
	String tipoEmail            = "";
	String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
	int    contadorArquivo      = 0;

	HashMap mapaVariavel		= new HashMap();
	HashMap mapaLote			= new HashMap();
	HashMap mapaDePara			= new HashMap();
	HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();
	HashMap mapaArquivo 		= new HashMap();
	HashMap mapaDocumento 		= new HashMap();

	JSONObject recordF = new JSONObject();


	String cruzaExtrato			= "";
	String Cruza_Extrato_com_Extrato = "";
	String mesAnoAnterior		= "";
	String mesAno2Anterior		= "";
	String mesAnoAtual			= "";
	int mesRef					= 0;
	int anoRef					= 0;
	String contaJuros			= "";
	String contaDesconto		= "";
	String contaMulta			= "";
	String contaTransitoria		= "";
	String contaEmpresaBranco	= "";
	String movimentoPortador	= "";
	String contaFixaDebito		= "";
	String contaFixaCredito		= "";
	String contaPortador		= "";		//pg - cred | rec - deb
	String contaMovimento		= "";		//pg - deb | rec - cred
	String tabelaContabil       = "";
	String dataMovimento        = "";
	String classificaPlano      = "";
	String classificaFornec     = "";

	boolean geraFiscal			= false;
	String [] loteFiscal		= new String[20];
	boolean apagaStatus         = false;

	String Conta_Fixa_Cruzamento_Extrato = "";
	String contaInvertida	= "";
	String contaBuscaPlano	= "";
	String nomeArquivo      = "";
	String chave			= "";
	String classificacao	= "";
	String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
	String lote						= "";
 	String regraContaMovimento 		= "";
	String regraHistorico 			= "";
	String separadorCsv				= "";
	String separadorTxt				= "";
	String tipoPlanilha				= "";
	String contaTemp				= "";
	String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
	boolean primeiroArquivo 		= true;
	boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	boolean forcarPartidaDobrada	= false;
	
	boolean logs = false;
	StringBuilder logsTxt = new StringBuilder();
	
	
	String zerarColAlternativo		= "";
	JSONObject deParaObj 			= new JSONObject();
	logger.logInfo("nme Empresa -> " + nomeEmpresa);
	//if (mantemArquivo.equals("SIM"))
		// logger.logInfo("Especifico empresa");
	
	try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
		// liberado em 25/11/2020 @DiMaz
		// se precisar alterar somente as quantidades qX e qY 
		// cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
		// aumentar muito o XLSX pode causar TRAVAMENTOS
		int qX	= 9;	//ofx,csv,txt
		int qY	= 3;	//xlsx,pdf
		int qTotal = (qX*3)+(qY*2);
		String extensao = "";
		for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
			if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC";
			if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".csv,.CSV";
			if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
			if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT";
			if (extArquivo >= (3*qX+qY))							extensao = ".pdf,.PDF"; 
			
			if (roteiroCRMPrincipal.has("ignoraExel") && roteiroCRMPrincipal.optString("ignoraExel").toUpperCase().equals("TRUE")) {
				extensao = extensao.replace(".XLSX",".CSV").replace(".xlsx",".csv");
			}			
			boolean ignoraAbas = false;
			
			// ------------------------------------------------------------------------------------------
			// colocado para nao ler pelo template mais de 3 planilhas xlsx por rodada
			// Motivo: quando tem planilha grande em excel para ler na personalizada
			// o sistema roda varias vezes a leitura da planilha no template e depois tudo de novo na personalizada.
			if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;
			// ------------------------------------------------------------------------------------------
 
			for (int porAba = 0; porAba < 60; porAba++) {

				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
				
				String apagaArquivo		= backupDirName;
				String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
				abasEspecificas 		= abasEspecificas.replace(",",";"); 

				if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
				// if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
				if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

				// liberado em 25/11/2020 @DiMaz
				// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				String abasFor = "";
				if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
					try {
						int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
						int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
						for (int k = a; k <= b; k++){
							if (k < b) abasFor += k+";";
							else abasFor += k;
						}
					} catch (Exception fr) {}
					if(!abasFor.equals("")) abasEspecificas = abasFor;
				}

				
				if (abasEspecificas.equals("")) {
					if (porAba > 0) break;
				}
				if (!abasEspecificas.equals("")) {
					if (!abasEspecificas.contains(String.valueOf(porAba))) {
						continue;
					}

					String ultimaAba = abasEspecificas;
					if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
					if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
				}

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV e TXt
				
 
 				if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, props, logger);
  				if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, props, logger);
				

 
 				
				// #DOCUMENTACAO
				// carregamento do arquivo
				
				if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
				// salva arquivo no hasmap para posterior eliminacao 

 
				
				FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
				int[] abas = {porAba};
				fileLoader.setSheetsToRead(abas);
				fileLoader.loadFiles();
				
				try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); } 
				catch (Exception bl) {forcarPartidaDobrada = false;}
				
				for (MemoryFile memFile: fileLoader.getMemFiles()) {
				
					contadorArquivo++;

					
					// =======================  =================   =======================
					// =======================  VARIAVEIS PADROES   =======================
					// =======================  =================   =======================
					String historico      = "";

					String codCcOrigem    = "";
					String cpfCnpj        = "";
					String nomeOrigem     = "";
					String nomePortador   = "";
					String nomePortador2  = "";
					String documento      = "";
					int    parcelaDoc     = 1;
					double valorDocumento = 0.00;
					double valorPagamento = 0.00;
					double valorDesconto  = 0.00;
					double valorJuros     = 0.00;
					double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
					int icodCcOrigem    = -1;
					int icpfCnpj        = -1;
					int inomeOrigem     = -1;
					int inomePortador   = -1;
					int idocumento      = -1;
					int idataMovimento  = -1;
					int ivalorDocumento = -1;
					int ivalorAlternativo = -1;
					int ivalorPagamento = -1;
					int ivalorDesconto  = -1;
					int ivalorJuros     = -1;
					int ivalorMulta     = -1;
					int icomplemento01  = -1;
					int icomplemento02  = -1;
					int icomplemento03	= -1;
					int icomplemento04  = -1;
					int icomplemento05	= -1;
					int icomplemento06	= -1;
					int icomplemento07	= -1;
					int icomplemento08	= -1;
					int icomplemento09	= -1;
					int icomplemento10	= -1;
					int idataFake		= -1;

					String contaGetConta	= "";
					contaPortador	= "";		//pg - cred | rec - deb
					contaMovimento	= "";		//pg - deb | rec - cred 

					String complemento01	= "";
					String complemento02	= "";
					String complemento03	= "";
					String complemento04	= "";
					String complemento05	= "";
					String complemento06	= "";
					String complemento07	= "";
					String complemento08	= "";
					String complemento09	= "";
					String complemento10	= "";
					String codCentroCusto	= "";
					String codFilial        = "";

					double valorTotalDoc	= 0.0;
					double valorTotalJuros	= 0.0;
					double valorTotalDesc	= 0.0;
					
					double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};  

					String classJur			= "";
					String classDes			= "";
					String classMul			= "";

					String codErroString	= "";
					int cont				= 0;
					String linhasProblema	= "";
					String idEmpresa        = "";
					String idRoteiro  	    = "";

					String histAux			= "";
					String anoData			= "";
					boolean zerar			= true;
					boolean filtro			= true;

					String lerAposPrincipal   = "";
					boolean isLinhaPrincipal  = false;
					boolean ignorarAntes	  = false;
					boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";

					double partidaDobradaJuros		= 0;
					double partidaDobradaDesconto	= 0;
					double partidaDobradaMulta		= 0;
					double valorSomaArray			= 0;

					String numSeparadorDuplicata = ""; //convertido em int depois
					
					StringBuilder cabecalhoPlanilha = new StringBuilder();
					StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
					
					int  	      contadorCabecalho = 0; 
					
					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
					if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
					if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
					if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);
					
					if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
						if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
					}
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
					
					 
					nomeArquivo = memFile.getFilename().replace("%",""); 
					
 
					
 					
					String abaArquivo = String.valueOf(porAba);
					if (porAba == 0) abaArquivo = "0";

					// colocado para nao importar 2x o mesmo arquivo e mesma aba
					ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
					if (ttArq          == null) {
						ttArq          = new ttArquivo();
						ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;
					
					} else continue;
					mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);
					
					// putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);
	
					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
					if (dbIOCont == null) {
						dbIOCont = connectIOContabil(props, logger);
					}

					if (dbIODepara == null) {
						dbIODepara = connectDeParaDb(logger);
					}
					
					if(primeiroArquivo) {
						limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
						primeiroArquivo = false;
					}

					//########################################################################

					contaJuros		    = roteiroCRM.optString("contaFixaJuros");
					contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
					contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
					contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
					contaMulta		    = roteiroCRM.optString("contaFixaMulta");
					idEmpresa      	    = roteiroCRM.optString("idEmpresa");
					idRoteiro   	    = roteiroCRM.optString("idRoteiro");
					movimentoPortador   = roteiroCRM.optString("movimentoPortador");
					classificaPlano     = roteiroCRM.optString("classificaPlano");
					classificaFornec    = roteiroCRM.optString("classificaFornec");
					cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
					Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
					numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

					tipoPlanilha = "MOVIMENTO";
					boolean enviaEmailExtrato = false;
					boolean naoLeMais = false;

					tipoEmail = "CLIENTE";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

					String debitoCredito   		 = "";
					String chaveExtrato    		 = ""; 

					//if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano"); 

					// =======================  ========================   =======================
					// =======================  VARIAVEIS PERSONALIZADAS   =======================
					// =======================  ========================   =======================


					JSONObject objetoParametro = new JSONObject();
					ttMovimentoPadrao ttMov2 = new ttMovimentoPadrao();
					boolean pegaBanco = false;

					// #DOCUMENTACAO
					// busca de indices da planilha principal
					if (tipoPlanilha.equals("MOVIMENTO")) {
						roteiroCRM = getRoteiro();

						inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
					}
					jStatus = new JSONObject();
					// logger.logInfo("PUTSTATUS 524 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
					if (memFile.getTotalValidLines() > 0) {
						// logger.logInfo("PUTSTATUS 527 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
						putStatus(dirName, "", jStatus, logger);
					}
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {
							// logger.logInfo("PUTSTATUS WHILE " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba);
							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);
								
 								
								// logger.logInfo("Line -> "+tipoPlanilha + "<<>>" + porAba + "<<>>" + cutString(line,0,30));
								// logger.logInfo("TP = "+tipoPlanilha+" | LN = "+line);
								
								contadorCabecalho++;
								if (contadorCabecalho<15) {
									cabecalhoPlanilha.append(line).append(" "); 
									cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								}
								else {
									cabecalhoPlanilha = new StringBuilder();
									
									// ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario 
									if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && porAba > 2) ignoraAbas = true;
								}
								// logger.logInfo("PUTSTATUS 550");
								if (cont < 10)   putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + "-" + cont + ".status", jStatus, logger);  
								   

								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								JSONObject jDadosPadrao = new JSONObject();
								jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento);
								jDadosPadrao.put("NOMEEMPRESA",    nomeEmpresa);
								jDadosPadrao.put("CODEMPRESA",     codEmpresa);
								jDadosPadrao.put("CONTABILIDADE",  roteiroCRM.optString("contabilidade"));
								jDadosPadrao.put("NOMEARQUIVO",    nomeArquivo);
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OMC
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								if (nomeArquivo.toUpperCase().contains(".OMC")) {
 
									tipoPlanilha = "OTT-MEUCAIXA";
									jDadosPadrao.put("TIPOPLANILHA",   tipoPlanilha);
 
									mapaVariavel = readOttimizzaMeuCaixa(memFile, dbIOCont, jDadosPadrao, mapaVariavel, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "",  new JSONObject(), logger);
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									break;
								}

								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
								// logger.logInfo("NAOFX NO TEMPLATE " + nomeArquivo.toUpperCase() + " | " + mantemArquivo + " | " +tipoProduto);
								if (nomeArquivo.toUpperCase().contains(".OFX") && 
									(!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE"))) {
									tipoPlanilha = "EXTRATO-OFX";  

									// quando o OFX vem em apenas 1 linha todas as informacoes
									// quebramos linha e geramos um novo arquivo para gerar como um ofx normal
									if (line.contains("ACCTID")) {
										String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
										FileWriter writer = new FileWriter(fileOfx);
										writer.writeNewFile(line.replaceAll("><",">\r\n<"));	
									}
									putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
 									jDadosPadrao.put("CODEMPRESA", codEmpresa);
									jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento);
									jDadosPadrao.put("NOMEEMPRESA",    nomeEmpresa);
									jDadosPadrao.put("NOMEARQUIVO",    nomeArquivo);
									if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
									readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
									jStatus = new JSONObject();
									// logger.logInfo("PUTSTATUS 615");
									putStatus(dirName, "",  new JSONObject(), logger);
									break;
								}
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do roteiro movimento (principal), OFX e demais devem ficar para a rota normal
								/*if(codEmpresa.equals("1869")){
									logger.logInfo("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha + " | " + tipoProduto);									
								}*/
 								if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE"))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());
									
									
									
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									// logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									// logger.logInfo("NP2 == "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										// logger.logInfo("PUTSTATUS 657");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE")){

 
									jDadosPadrao.put("erpContabilidade",  roteiroCRMPrincipal.optString("erpContabilidade"));
 									jDadosPadrao.put("LINE",              line);
									jDadosPadrao.put("PRIMEIRAVEZ",       primeiraVezDuplicata);   
									jDadosPadrao.put("DIRNAME",      		dirName);   
 									jDadosPadrao.put("TIPOPLANILHA",      tipoPlanilha);
									jDadosPadrao.put("TIPOLANCAMENTO",    tipoLancamento);
									
									if (!numSeparadorDuplicata.equals("")) jDadosPadrao.put("NUMSEPARADOR", numSeparadorDuplicata);
									
									if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
										jDadosPadrao.put("CONTROLAPARCELA",  true);  

									} 
 
									primeiraVezDuplicata = leituraDuplicataPadrao(jDadosPadrao, memFile, mapaVariavel, dbIOCont, logger);

									if(!primeiraVezDuplicata){
										jStatus = new JSONObject();
										// logger.logInfo("PUTSTATUS 687");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								} 


								
								/// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
								if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE") && 
								   roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {

 									
									if (line.contains("DOCUMENTO") && 
										line.contains("EMISSAO") && 
										line.contains("V. PARCELA") && 
										line.contains("DEVOLUCAO") && 
										line.contains("SALDO") && 
										line.contains("SITUACAO")) {
										
 
										tipoPlanilha = "DUPLICATA-DOMINIO"; 

										if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

										JSONObject jIndices = new JSONObject();
										 
										jIndices.put("IVENCIMENTO", 9);
										jIndices.put("INOMEORIGEM", 4);
										jIndices.put("IDUPLICATA", 4);
										jIndices.put("IVALORPARCELA", 12);									 
										
										
										jIndices.put("CODEMPRESA", codEmpresa);
										jIndices.put("TIPOPLANILHA", tipoPlanilha);

										primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
										primeiraVezDuplicata = false;
										jStatus = new JSONObject();
										// logger.logInfo("PUTSTATUS 730");
										putStatus(dirName, "", jStatus, logger);

										break;
									}
								}
																
								
									
								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								// logger.logInfo("CPTS " + cabecalhoPlanilha.toString());
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								
								tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								// if(codEmpresa.equals("3881")){
									// logger.logInfo("TP -> "+tipoPlanilha+" | CPTOSTRI = "+cabecalhoPlanilha.toString());
								// }
 
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									
									// Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
									if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(porAba))) continue;

								}
								
								if(nomeArquivo.toUpperCase().contains("OTTIMIZZA")){
									if(!logsTxt.toString().contains("MANTEMARQUIVO"))logsTxt.append("STATUS;").append("DATA;").append("VALOR;").append("DOCUMENTO;").append("CLIENTE/FORNECEDOR;").append("PORTADOR;").append("COMPLEMENTO01;").append("COMPLEMENTO02;").append("COMPLEMENTO03;").append("COMPLEMENTO04;").append("COMPLEMENTO05;").append("COMPLEMENTO06;").append("TIPOPLANILHA;").append("MANTEMARQUIVO;").append("PROCESSAOUD;").append("LINHA;");
									logs = true;
								}

								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								try {
									fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
								} catch (IllegalArgumentException e) {
									//TODO: handle exception
									erroShrink = true;
									logger.logError("Deu ruim no shrink \n"+e);
									break;
								}
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
 

 								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "");
									histobj.put("mesAnoAnterior", "");
									histobj.put("mesAno2Anterior", "");
									histobj.put("mesAnoAtual", "");
									histobj.put("contaMovimento", "");
									histobj.put("contaPortador", "");
									histobj.put("contaDebito", "");
									histobj.put("contaCredito", "");
									histobj.put("contaJuros", contaJuros);
									histobj.put("contaDesconto", contaDesconto);
									histobj.put("contaMulta", contaMulta);
									histobj.put("valorDocumento", "");
									histobj.put("valorJuros", "");
									histobj.put("valorDesconto", "");
									histobj.put("valorMulta","");
									histobj.put("codFilial", "");
									histobj.put("numeroAba", String.valueOf(porAba));
									histobj.put("tipoPlanilha", tipoPlanilha);
									histobj.put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

								// if (codEmpresa.equals("125")) logger.logInfo("OTT ->" + " |TP=" + tipoPlanilha + " | " + nomeArquivo);

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;
								
								 if (tipoPlanilha.equals("MOVIMENTO")) {
										if (memFile.getStringFieldRemoveEspCharsUpper(15).contains("CONTA")) continue;
									 }
									
									// if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && memFile.getStringFieldRemoveEspCharsUpper(10).equals("PAGAMENTO") && memFile.getStringFieldRemoveEspCharsUpper(15).equals("")) continue;
									
									
								
								


								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									// logger.logInfo("LIN -> " + line);
									
									// #Fabrica(2019-05-20)
									if (tipoPlanilha.contains("OTTCARTAO")) {
										try{
											String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
											if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
												dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
											}else{
												dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											}	
 											
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
									if (!tipoPlanilha.contains("OTTCARTAO")) {
										// #Fabrica(2019-05-20)
										try{
											dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
									// logger.logInfo("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+dataMovimento);
									// logger.logInfo("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+line);
									
									
 								   
									// leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
								
									
									if (!zerarColAlternativo.equals("")) {
										if (zerarColAlternativo.contains("documento"))		documento		= "";
										if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
										if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
										if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
										if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
										if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
										if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
										if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
										if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
										if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
										if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
										if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
										if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
									}
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									
									if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
											try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
											try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
											try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
											try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
											try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
											try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
									}
									
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorDocumentoArray[0] = 0;
									valorDocumentoArray[1] = 0;
									valorDocumentoArray[2] = 0;
									valorDocumentoArray[3] = 0;
									valorDocumentoArray[4] = 0;
									valorDocumentoArray[5] = 0;
									valorDocumentoArray[6] = 0;
									valorDocumentoArray[7] = 0;
									valorDocumentoArray[8] = 0;
									valorDocumentoArray[9] = 0;
									
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									
									// quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto 
									// no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
									// no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
									if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
										try{
											if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
											else valorDesconto = 0;
										} catch(Exception vlrd) {}
									}
									
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									// if(tipoPlanilha.equals("MOVIMENTO")){
										// if(Math.abs(valorDocumento) > 0){
											// complemento08 = "TROCAPORTADOR";
										// }
										// if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") 
											// && !memFile.getStringFieldRemoveEspCharsUpper(16).equals("DATA") 
											// && !memFile.getStringFieldRemoveEspCharsUpper(16).equals("PAGAMENTO")){
											
											// Iterator itAuxCaptura = mapaVariavel.keySet().iterator();
											// while (itAuxCaptura.hasNext()) {

												// String key = (String)itAuxCaptura.next();
												// ttMovimentoPadrao ttMovAux = (ttMovimentoPadrao)mapaVariavel.get(key);
												// if(ttMovAux != null){
													// if(ttMovAux.complemento08.equals("TROCAPORTADOR")){
														// ttMovAux.nomePortador = nomePortador;
														// ttMovAux.complemento08 = "";
													// }
												// }
											// }
											// continue;
										// }
									// }
									
									// logger.logInfo("TP -> "+tipoPlanilha+" - DM "+idataMovimento+" -> "+dataMovimento+" - VD "+ivalorDocumento+" -> "+valorDocumento);
									if(logs && cont <= 200){
										
										logsTxt.append("\r\n");
										logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
										logsTxt.append(dataMovimento); 												logsTxt.append(";");
										logsTxt.append(valorDocumento);												logsTxt.append(";");
										logsTxt.append(documento);													logsTxt.append(";");
										logsTxt.append(nomeOrigem);													logsTxt.append(";");
										logsTxt.append(nomePortador);												logsTxt.append(";");
										logsTxt.append(complemento01);												logsTxt.append(";");
										logsTxt.append(complemento02);												logsTxt.append(";");
										logsTxt.append(complemento03);												logsTxt.append(";");
										logsTxt.append(complemento04);												logsTxt.append(";");
										logsTxt.append(complemento05);												logsTxt.append(";");
										logsTxt.append(complemento06);												logsTxt.append(";");
										logsTxt.append(tipoPlanilha);												logsTxt.append(";");
										if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE (SIM)");	logsTxt.append(";");
										if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO (NAO)");	logsTxt.append(";");
										logsTxt.append(line);														logsTxt.append(";");
																	
									}

									// logger.logInfo("ROTEIRO coluna Extra => " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " |TP => " + tipoPlanilha);
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
										String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
										valorSomaArray = 0;
										for(int iv = 0; iv < indiceValores.length; iv++) {
											// try{
												// logger.logInfo("IDValores -> " + indiceValores[iv].toString());
												// if(!indiceValores[iv].contains("*") && !indiceValores[iv].contains("/") && !indiceValores[iv].contains("+") && !indiceValores[iv].contains("-") && !indiceValores[iv].contains("#")){
													// logger.logInfo("ENTROU IF");
													// String rotuloColuna = "";
													// String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");
													// logger.logInfo("ROTULO ARRAY => " +rotuloArray[iv].toString());
													// indiceValores[iv]	= getIndiceCabecalhoExtra(rotuloArray[iv], memFile);
													// logger.logInfo("INDICE dps => " +indiceValores[iv].toString());
												// }
											// }catch(Exception xx){
												// logger.logInfo("CAIU CATCH");
											// }
												
											//ssss
											double denomidador = 0; 
											int indiceDenominador = -1;
											String sinal = "";
											boolean multiplica100 = false;
											boolean divide100 = false;
											
											if (indiceValores[iv].contains("*100")) multiplica100 = true;
											if (indiceValores[iv].contains("/100")) divide100 = true;
											indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");
											
											if (indiceValores[iv].contains("*")) sinal = "*";
											if (indiceValores[iv].contains("/")) sinal = "/";
											if (indiceValores[iv].contains("+")) sinal = "+";
											if (indiceValores[iv].contains("-")) sinal = "-";										

																					
											if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
 												try {
													if (!indiceValores[iv].contains("#")) {
														denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
													}
													else {
														denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
													}
												} catch (Exception xx) {denomidador = 0;}
												indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
											} 
											 	
											
											try{
											
												valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
												if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
												if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
												if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
												if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
												if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
												if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;
												
 
												
 											}
											catch (Exception vlrd) { 

 
 
												valorDocumentoArray[iv] = 0; 
											}
											
											if(valorDocumentoArray[iv] < 0){
												valorDocumentoArray[iv] = 0;
											} 
											
											valorSomaArray += valorDocumentoArray[iv];
										}
									}
									
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
									
									if (tipoLancamento.equals("PAGAR"))
										debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER"))
										debitoCredito = "EXTRATO-CREDITO";
								
									
									////////////////////////////////////////////////
									////	busca Coluna Alternativa 
									JSONObject obj1 = new JSONObject();
									String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
									obj1.put("validar",			validar);
									obj1.put("documento",		documento);
									obj1.put("nomeOrigem",		nomeOrigem);
									obj1.put("nomePortador",	nomePortador);
									obj1.put("dataMovimento",	dataMovimento);
									obj1.put("complemento01",	complemento01);
									obj1.put("complemento02",	complemento02);
									obj1.put("complemento03",	complemento03);
									obj1.put("complemento04",	complemento04);
									obj1.put("complemento05",	complemento05);
									obj1.put("complemento06",	complemento06);
									obj1.put("complemento07",	complemento07);
									obj1.put("complemento08",	complemento08);
									obj1.put("complemento09",	complemento09);
									obj1.put("complemento10",	complemento10);
									obj1.put("codCentroCusto",	codCcOrigem);
									obj1.put("tipoPlanilha",	tipoPlanilha);
									obj1.put("numeroAba",		String.valueOf(porAba));
									obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());
									JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
									String changed = alternativeObj.optString("changeIt");
									
									if(!changed.equals("")) {
										zerarColAlternativo = changed;
										if (changed.contains("dataMovimento")) {
											dataMovimento	= alternativeObj.optString("dataMovimento");
											dataLote		= alternativeObj.optString("dataLote");
										}
										if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
										if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
										if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");
										
										if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
										if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
										if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
										if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
										if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
										if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
										if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
										if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
										if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
										if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");
										
										if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");
										
										if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
										if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
										if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
										if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
									}
									

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if((ivalorDocumento < 0 || tipoPlanilha.contains("PADRAOOTTIMIZZA")) && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									

									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {
											
										continue;
									}
								}
								
 

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
  
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
  
   
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
 										}
									}
  									
  
									// ajusta data quando vem no formato 01012021  
									if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
										try {
											Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
											dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
											dataLote = DateUtil.dateToString(dts, "yyyy-MM");
											if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
												dataMovimento = "";
												continue;
											}
										} catch (Exception dt1) {
											continue;
										}
									}
  
 
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									
									if (tipoPlanilha.contains("OTTCARTAO")) {
									    String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
										if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
									}

									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

									if (tipoLancamento.equals("PAGAR")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-CREDITO";

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									
									// if(logs && cont <= 200){
										// logsTxt.append("\r\n");
										
										// logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
										// logsTxt.append(dataMovimento); 												logsTxt.append(";");
										// logsTxt.append(valorDocumento);												logsTxt.append(";");
										// logsTxt.append(documento);													logsTxt.append(";");
										// logsTxt.append(nomeOrigem);													logsTxt.append(";");
										// logsTxt.append(nomePortador);												logsTxt.append(";");
										// logsTxt.append(complemento01);												logsTxt.append(";");
										// logsTxt.append(complemento02);												logsTxt.append(";");
										// logsTxt.append(complemento03);												logsTxt.append(";");
										// logsTxt.append(complemento04);												logsTxt.append(";");
										// logsTxt.append(complemento05);												logsTxt.append(";");
										// logsTxt.append(complemento06);												logsTxt.append(";");
										// logsTxt.append(tipoPlanilha);												
										// if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE");		logsTxt.append(";");
										// if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO");			logsTxt.append(";");
										// logsTxt.append(line);														logsTxt.append(";");
																		
									// }
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && valorDocumento > 0)		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								
								
								
								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								
								//Removemos o replace de AMP por conta de um efeito colateral #202212-0022861
								//nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								// nomeOrigem = stringNormalizer(nomeOrigem, true);
								nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);
								
								// 202301-0023496 JWR Coloquei esse balde com o X para remontar o nomeOrigem
								// Descomentar caso d? problema com caracteres especiais
								/*String letrasPermitidas = "ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789.-/&";
								String nomeOrigemNovo = "";
								for (int xx = 0; xx < nomeOrigem.length(); xx++) {
									if (nomeOrigem.length() > xx) {
										if (letrasPermitidas.contains(nomeOrigem.substring(xx, xx+1))) {
											nomeOrigemNovo = nomeOrigemNovo + nomeOrigem.substring(xx, xx+1);
										}
									}
								}
								nomeOrigem = nomeOrigemNovo;*/

								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								nomePortador = stringNormalizer(nomePortador, true);

								complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

								// logger.logInfo("DAMA " + dataMovimento + " | " + valorDocumento + " | " + isLinhaPrincipal);
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								if(cont == 0) continue;

								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 

								//feita limpeza de campo para poder pegar melhor os juros e descontos.
								documento     = getLimpaCamposAvancado("documento", documento, histobj);


								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
									if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									// logger.logInfo("PUTSTATUS 1550");
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								
								// logger.logInfo("PUTSTATUS 1591");
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								
								// quando usa o getColunaAlternativa tem que refatorar o datalote
								dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");								
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								chave = lote + "-" + String.valueOf(porAba) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

								if(codEmpresa.equals("174")) logger.logInfo("DATA == "+dataMovimento+" | LOTEEE == "+lote+" | TP === "+tipoPlanilha+" | COD ROT == "+roteiroCRMPrincipal.optString("codigo"));
								
								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								histobj.put("line", line.toUpperCase());
								histobj.put("cabecalhoRegra", cabecalhoRegra.toString());
  								
								String modificaData = getModificaData(histobj);
								
								if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
								if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
								if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
								if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
								if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
								if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);
								
								
								// METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
								// EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
								// UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
								nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
								nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
								documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
								complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
								complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
								complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
								complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
								complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
								complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
								complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
								complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
								complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
								complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);
								 

								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								partidaDobradaJuros		= 0;
								partidaDobradaDesconto	= 0;
								partidaDobradaMulta		= 0;

								if (forcarPartidaDobrada) {
									partidaDobradaJuros		= valorJuros;
									partidaDobradaDesconto	= valorDesconto;
									partidaDobradaMulta		= valorMulta;
									valorJuros				= 0;
									valorDesconto			= 0;
									valorMulta				= 0;
								}
								
								if (tipoPlanilha.contains("OTTCARTAO")) {
									
									if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
									if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
									complemento01 = tipoPlanilha;
									complemento02 = "VENDA";
									
									nomePortador = tipoPlanilha;
									
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
 									
								} else {
								
									// quando se mantem o arquivo, somente devem ser processados arquivos padroes
									// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
									// Trocado para validar se a planilha comeca como movimento - importante por causa da iguacu, Onnegestao, confialtiva que tinham movimento no roteiro secundario e estavam sendo bloqueados
									if (mantemArquivo.equals("SIM") && !tipoPlanilha.contains("PADRAOOTTIMIZZA") && 
									   !roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES") && 
									   (tipoPlanilha.contains("SECUNDARIO") || tipoPlanilha.startsWith("MOVIMENTO"))) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   
									   // Colocado este IF para dar mais performance, ou seja, se ja tiver lido mais de 15 linhas
									   // e planilha for para ser rodada na personalizada
									   // break agiliza a saida da leitura da planilha. Xavier em 19.08
									   if (contadorCabecalho < 15) continue;
									   break;
									  }
									
								}
								//#FABRICA 31/08/2022 - @sergio - 202208-0017778
								//Estavamos processando as planilhas padroes sem apaga-las no processo
								//O if abaixo faz com que paguemos a planilha, ap?s processar pelo padrao
								
								// logger.logInfo("TPAQ " + tipoPlanilha);
								
								if(tipoPlanilha.contains("PADRAOOTTIMIZZA")){
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									
								}
					
								// logger.logInfo("ANTES ttMov2");
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMov2 = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(porAba);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;
									
									// logger.logInfo("TTMOVTP -> "+tipoPlanilha);


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
								// logger.logInfo("TEPE " + tipoPlanilha + " | " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " | " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
								
								if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

									for (int iv =0; iv < 10; iv++) { 
										
										if (valorDocumentoArray[iv] == 0) continue;
										
										String rotuloColuna = "";
										String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";"); 
										
										try {
											rotuloColuna = rotuloArray[iv];
										} 
										catch (Exception xx) {
											continue;
										}
										
										if (rotuloColuna.equals("")) continue;
										
									
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + rotuloColuna + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										histobj.put("dataMovimento", dataMovimento);
										
										ttTemp.complemento05 = rotuloColuna;
										histobj.put("complemento05", rotuloColuna);
										
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										
										ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

										if (tipoPlanilha.contains("OTTCARTAO")) {
											ttTemp.complemento01 = tipoPlanilha;
											ttTemp.complemento02 = rotuloColuna;
										}
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
									}
								}
								
								// Para cartoes, criamos o modelo de gerar tafifa por regra
								if (tipoPlanilha.contains("OTTCARTAO")) {

									histobj.put("complemento02", "TARIFA");
									histobj.put("complemento03", complemento03);
									histobj.put("dataMovimento", dataMovimento);
									histobj.put("complemento05", "TARIFA");									
 									
									double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);
  									 
									
									if (taxaTarifa > 0) {
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + "TARIFA" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										
										
										ttTemp.complemento05 = "TARIFA";
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

 										ttTemp.complemento01 = tipoPlanilha;
										ttTemp.complemento02 = "TARIFA";
										
 										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
									}
								}
								
								

									
								if (forcarPartidaDobrada) {
									if (partidaDobradaJuros		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(porAba) + "-DOBRADA_JUR-" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento = partidaDobradaJuros;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
									}
									
									if (partidaDobradaDesconto	> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(porAba) + "-DOBRADA_DES-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaDesconto;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
									}
									
									if (partidaDobradaMulta		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(porAba) + "-DOBRADA_MUL-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaMulta;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
									}
								}								
							} catch (Exception e) {
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

			}
			try {
				Iterator itArquivo = mapaArquivo.keySet().iterator();
				while (itArquivo.hasNext()) { 
					String key = (String)itArquivo.next();
					ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
					
					try {
		 
						FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
					} catch (Exception xx) {}
				}
			} catch (Exception xx) {} 
					
			

		}
	} catch (Exception ee) {
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		logger.logError("EndpointA: ", ee);
	}
	
	
	
	try {
		Iterator itArquivo = mapaArquivo.keySet().iterator();
		while (itArquivo.hasNext()) { 
			String key = (String)itArquivo.next();
			ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
			
			try {
 
				FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
			} catch (Exception xx) {}
 		}
	} catch (Exception xx) {} 
			

	if(erroShrink){
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		throw new Exception();
	}
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
		   
		try {
			JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);
			

			if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
				for (int t=0; t<extratoEmpresa.length(); t++) {

					JSONObject recMov = extratoEmpresa.optJSONObject(t);

					recMov.put("CODEMPRESA", codEmpresa);
					recMov.put("NOMEEMPRESA", nomeEmpresa);

					//QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
					if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
						recMov.put("NOMEARQUIVO", nomeArquivo);
					}
					else {
						recMov.put("NOMEARQUIVO", "");
					}

					recMov.put("TIPOLANCAMENTO", tipoLancamento);
					recMov.put("CONTAMOVIMENTO", "");
					recMov.put("CONTAPORTADOR", "");
					recMov.put("CONTLINHATEXTO", String.valueOf(t));

					ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
					if (nomeArquivo.toUpperCase().contains("FILTRO_")){
						boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
						if(!filtro) continue; 
					} 
					String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
					ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;
					
					String leuCnpj = "";
					if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);
						
						if (!leuCnpj.equals("")) {
							ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
						}	
					}	
					if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
						if (!leuCnpj.equals("")) {
							ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
						}
					}
					
					mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
					apagaExtrato    = true;

				}
			}
		}
		catch (Exception xx) {
			logger.logInfo("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
		}

	} // if tipo planilha nao igual extrato
	
	// logger.logInfo("ETAPA 03 TEMPLATE ");
	
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
	StringBuilder[] txtFiscal = new StringBuilder[20];
  	for (int i= 0; i < 20; i++) {
		txtFiscal[i] = new StringBuilder("");
		loteFiscal[i] = "";		
	}

	StringBuilder txtFornecedor = new StringBuilder();
	StringBuilder txtPortador   = new StringBuilder();
	String nomePortadorAnterior = "";
	
	// if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("PAGAR")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // JWR 01022021
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("RECEBER")) txtFiscal[0].append("PGTOCLI").append(cnpjEmpresa).append("\r\n"); // JWR 01022021

	StringBuilder ResumoTxt = new StringBuilder();
	String rn = "\r\n";
	ResumoTxt = new StringBuilder();
	ResumoTxt.append("");
	ResumoTxt.append(rn);
	ResumoTxt.append(rn);

	ResumoTxt.append("STATUS;").append("DATA;TIPO DATA;").append("VALOR;").append("DOCUMENTO;").append("CLIENTE/FORNECEDOR;").append("PORTADOR;").append("COMPLEMENTO01;").append("COMPLEMENTO02;").append("COMPLEMENTO03;").append("COMPLEMENTO04;").append("COMPLEMENTO05;").append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;").append("DATA;").append("DEBITO;").append("CLASS DEB;").append("NOME CONTA;").append("CREDITO;").append("CLASS CRED;").append("NOME CONTA;").append("VALOR;").append("HISTORICO;");
	ResumoTxt.append("ORIGEM");

	StringBuilder txtDePara = new StringBuilder();

	txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
	txtDePara.append("\r\n");
	
	
	// logger.logInfo("DIRNAME " + dirName);
	if (mantemArquivo.equals("SIM")) {
		File fileDepoisLista = new File(dirName);
		File [] filesDepois = fileDepoisLista.listFiles(); 
		
		if (filesDepois.length > 1) putStatus(dirName, "", jStatus, logger);
	}
	// logger.logInfo("TEMPLATE ETAPA 03 ");


	int contRegra = -1;
	
	String loteEtapaTres = "";
	
	try {
		Iterator itExtrato = mapaVariavel.keySet().iterator();
		while (itExtrato.hasNext()) {
			String chaveExtrato     = "";

			String key = (String)itExtrato.next();
			ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			
 			loteEtapaTres = ttMov.lote;
 
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+ 
				             cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			

			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			// ajusta o ott_oud__ para poder reprocessar o arquivo automaticamnete pelo portal
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");
			if (!ttMov.lote.toLowerCase().contains("ott_oud__") && ttMov.lote.toLowerCase().contains("ott_oud_")) {
				ttMov.lote = ttMov.lote.replace("ott_oud_","ott_oud__");
			}
 
			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
			ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
			if (ttJ != null && ttJ.valorLido == 0) {
				ttMov.valorJuros  = ttJ.valorJur;
				ttJ.valorLido     = 1;
				mapaJuros.put(chaveJuros,ttJ);

			}

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
			ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
			if (ttD != null && ttD.valorLido == 0) {
				ttMov.valorDesconto  = ttD.valorDesc;
				ttD.valorLido     = 1;
				mapaDesconto.put(chaveDesconto,ttD);

			}
			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			//logger.logInfo("ANTES 3 DE 4");
 			if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			
			logger.logInfo("TST " + ttMov.nomePortador);
			//logger.logInfo("TPPORTTEMPLATE " + ttMov.tipoPlanilha + "-" + ttMov.lote );
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("\'","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\'","");
			ttMov.complemento02 = ttMov.complemento02.replaceAll("\'","");
			ttMov.complemento03 = ttMov.complemento03.replaceAll("\'","");
			ttMov.complemento04 = ttMov.complemento04.replaceAll("\'","");
			ttMov.complemento05 = ttMov.complemento05.replaceAll("\'","");
   			
			classificaPlano     = roteiroCRM.optString("classificaPlano");
			classificaFornec    = roteiroCRM.optString("classificaFornec");
			cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
			Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
			String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
			String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();

			if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
 
  
			// ------------------------------------------------------------------------------------------------------------------
			// 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------
			String DATAMOVIMENTO   = "";
			String PORTADOR        = "";
			String CHAVE           = "";
			boolean jaCruzou       = false;

			// ajuste 11/2020 @DiMaz
			if (ttMov.valorDocumento == 0) continue;
 

			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
			if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();
				String transferencia = "NAO";

				if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
				if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

				if (transferencia.equals("SIM")) {
					for (int xx = 0;xx<1;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;

							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");

					ttMov.complemento04 = ttMov.nomeOrigem;
					ttMov.nomeOrigem    = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;
					ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();
					jaCruzou = true;

				}
			}

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
			if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

				Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm   = new Date();
				Date dataMovimentoDateMenosDois = new Date();
				Date dataMovimentoDateMenosTres = new Date();
				Date dataMovimentoDateMaisUm    = new Date();
				Date dataMovimentoDateMaisDois  = new Date();
				Date dataMovimentoDateMaisTres  = new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();

				String transferencia = "NAO";

				if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
					for (int xx = 0;xx<7;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;
							if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
							if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
							if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
							if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
							if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
							if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");
					if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

					ttMov.nomePortador  = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();

				}

			}


			// ------------------------------------------------------------------------------------------------------------------
			// 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------




			classificacao = "";

			String key2 = ttMov.chave;

			if(ttMov.dataMovimento.length() > 9){
				mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
				anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
				mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
			}

			String trimestreMesAnoAnterior	    = "";
			String trimestreMesAnoAtual   	    = "";
			String descricaoPlanoContaPortador  = "";
			String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
			if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


			if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
			ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
			if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

			contaJuros        = roteiroCRM.optString("contaFixaJuros");
			contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
			contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
			contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
			contaMulta        = roteiroCRM.optString("contaFixaMulta");



			contaMovimento = "";
			contaPortador  = "";


			if(ttMov.tipoLancamento.contains("PAGAR")) {
				contaMovimento = contaFixaDebito;
				contaPortador  = contaFixaCredito;
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				contaPortador  = contaFixaDebito;
				contaMovimento = contaFixaCredito;
			}
			
			
			
			// exemplo de como vem um registro do complemento_lancaments 
			// 54999667000179-PAG-ANTONIO FLAVIO DE ARAUJO JUNIOR-2021-05-21-180.0
 			
			if (contaMovimento.equals("") && encontrouComplemento){
				try {
				
					String chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 3) + "-" + ttMov.nomeOrigem + "-" + 
					                          cutString(ttMov.dataMovimento, 6) + "-" + cutString(ttMov.dataMovimento, "/", "/") + "-" + cutString(ttMov.dataMovimento, 0, "/") + "-" + 
											  ttMov.valorDocumento;
											  
 																				
											  
 					ttPlano ttP  = (ttPlano)mapaDePara.get(chaveComplemento); 
					if (ttP == null) {							
						ttP  = new ttPlano(); 
						ttP.descricaoPlano = chaveComplemento;
						ttP.contaAnalitica = "";
						ttP.contaContabil     = "";
						mapaDePara.put(chaveComplemento,ttP);
							
						try{
							deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
							}
						catch (Exception e) { 
						}
						if (deParaObj != null && !deParaObj.toString().equals("{}")) {
							if (ttMov.tipoPlanilha.contains("EXTRATO")) {
									ttMov.complemento02 = deParaObj.optString("complemento");
							} else {
								ttMov.complemento01 = deParaObj.optString("complemento");
							}
 							

						} else {
						
							//	 verifica se banco de dados possui ao menos algum lancamento de complemento
							//   se nao encontrar, joga false na encontrouComplemento para ter mais performance e nao buscar no 
							//   banco  de dados a toa
							chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 2);
							try{
								deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
								}
							catch (Exception e) { 
							}
							if (deParaObj == null || deParaObj.toString().equals("{}"))  encontrouComplemento = false;
 						
						}
						

					}  
				} catch  (Exception Ee) {}
			}
			
 
			// Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
			// joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
			if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
				if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
				if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
			}


			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
			contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
			ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
			if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			JSONObject histobj = new JSONObject();

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

			ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			
			// Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
			String parcelaString = "1";
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

			try {
				ttMov.parcelaDoc = Integer.parseInt(parcelaString);
			}
			catch (Exception xx) { ttMov.parcelaDoc = 1;}
			
			// logger.logInfo("TTMS " + ttMov.tipoPlanilha + " | " + ttMov.complemento01 + " | " + ttMov.nomeOrigem + " | " + ttMov.complemento02);
			
			contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			// contaMovimento = getContaMovimento4(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			// Soares - Mudanca no template referente a uma parte do chamado =>> 202208-0017982
			
			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
					if(!ttMov.cpfCnpj.equals("")){
						contaMovimento = ttMov.cpfCnpj;
						if((roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().startsWith("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("PROSOFT")) && !ttMov.cpfCnpj.equals(""))
							contaMovimento = ttMov.cpfCnpj + "P";
					}
				}
				else {ttMov.cpfCnpj = "";}
			}
 			
			regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			// logger.logInfo("CONTINHA "  + contaMovimento + " | " + regraContaMovimento);

			double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
				ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
				ttMov.valorDocumento = valorPrincipal;
			}
			
			ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
			ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
			ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
			
			// logger.logInfo("Contabilidade - "+roteiroCRM.optString("contabilidade")+" - empresa => "+roteiroCRM.optString("empresa"));
			// logger.logInfo("TP - "+tipoPlanilha+" - conta fixa => "+roteiroCRM.optString("contaFixaJuros")+""+roteiroCRM.optString("contaFixaMulta")+""+roteiroCRM.optString("contaFixaDesconto")+"");
			// logger.logInfo("ttMov.contaJuros - "+ttMov.contaJuros+" - ttMov.contaDesconto - "+ttMov.contaDesconto+" - ttMov.contaMulta - "+ttMov.contaMulta);

			// quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
			if (!contaMovimento.contains("IGNORA")) { // colocado para ignorar os lancamentos de partida dobrada quando o lancamento principal eh ignorado 20122022 JWR
				if (ttMov.chave.contains("DOBRADA_DES")) {
				// Altera??o feita 17/01/2023 ap?s solu??o dos chamados # 202212-0023050 && 202212-0023049, a partir desta altera??o n?o ser? mais necess?rio a cria??o de regras para a 
				// invers?o de contas em desconto, Contas Pagas.
					if(ttMov.tipoLancamento.equals("PAGAR")){
						contaMovimento = contaPortador;
						contaPortador = ttMov.contaDesconto;
					}
					if(ttMov.tipoLancamento.equals("RECEBER")){
						contaMovimento = ttMov.contaDesconto;
					}
				}
				if (ttMov.chave.contains("DOBRADA_MUL")) contaMovimento = ttMov.contaMulta; 
			}
			

			boolean regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

		   //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);
				}
			}

			regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
 			
			if (contaMovimento.equals("")){
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					//JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					
					if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
					if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							
							try{
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
 								
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								if (contaMovimento == null) contaMovimento = "";
								
								// Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota 
								if (contaMovimento.contains("T")) {
									apagaContaT    = true;
								}
								
								
							}else contaMovimento = "";
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/
							
							// RETIRA  T DA CONTA MOVIMENTO
							contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
							ttP.contaContabil     = contaMovimento;
							mapaDePara.put(ttMov.nomeOrigem,ttP);
						
						} 
						else {
							contaMovimento = ttP.contaContabil;
						}
						
						
					}  
				} catch  (Exception Ee) {}
			}
			
 			
			if(roteiroCRMPrincipal.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresa)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
				try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
				}
				catch  (Exception Ee) {}
			}

			String contaTipoFornecedor = "999333";

			boolean eFornecedor = false;
			String  razaoSocial = ttMov.nomeOrigem;
			String  razaoSocialDuplicata = ttMov.nomeOrigem;
			if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

			if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresa)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

				if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					eFornecedor = true;
				}  
			}

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(cutString(contaPortador,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(cutString(contaPortador,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = cutString(contaPortador,0, 20);
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
			}
			
			if(ttMov.tipoLancamento.contains("PAGAR")) {
				ttMov.contaDebito  = cutString(contaMovimento,0, 20);
				ttMov.contaCredito = cutString(contaPortador,0, 20);
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				ttMov.contaCredito  = cutString(contaMovimento,0, 20);
				ttMov.contaDebito   = cutString(contaPortador,0, 20);
			}
			
			// logger.logInfo("CONTASTEMP " + ttMov.contaDebito + " | " + ttMov.contaCredito);
			
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
  				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.valorDocumento);    ResumoTxt.append(";");
				ResumoTxt.append(ttMov.documento);         ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomeOrigem);        ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomePortador);      ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento01);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento02);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento03);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento04);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento05);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento06);     ResumoTxt.append(";;");

				ResumoTxt.append(ttMov.contaDebito);       ResumoTxt.append(";");
				ResumoTxt.append(ttMov.contaCredito);      ResumoTxt.append(";");
				ResumoTxt.append(regraContaMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.historico);         ResumoTxt.append(";");
				
				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
 				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.valorDocumento);    ResumoTxt.append(";");
				ResumoTxt.append(ttMov.documento);         ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomeOrigem);        ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomePortador);      ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento01);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento02);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento03);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento04);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento05);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento06);     ResumoTxt.append(";;");

				ResumoTxt.append(ttMov.contaDebito);       ResumoTxt.append(";");
				ResumoTxt.append(ttMov.contaCredito);      ResumoTxt.append(";");
				ResumoTxt.append(regraContaMovimento);     ResumoTxt.append(";");
				ResumoTxt.append(ttMov.historico);         ResumoTxt.append(";");
 				
 				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			String parcelaAtualeFinal = "";
			String parcelaAtual       = "";

			int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
			if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

			ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
										   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
										   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
			histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);
			histobj.put("contaDebito", ttMov.contaDebito);
			histobj.put("contaCredito", ttMov.contaCredito);
			histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("contaDesconto", ttMov.contaDesconto);
			histobj.put("parcelaAtual", parcelaAtual);
			histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
			histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
			histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
			histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
			histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

			if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresa)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
			if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
												   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


			// quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
			if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
			if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
			if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta; 
			
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

			String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			if (!ttMov.codFilial.equals("")) {
				ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
			}
						
			if (!codParticipante.equals("")) {
				ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
			}

			ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
			if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
				ttMov.historico += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
			}

			// ------------------------------------------------
			//           GERA ARQUIVO PARA O FISCAL
			// ------------------------------------------------
			ttMov.documento = ttMov.documento.trim();
			if (ttMov.documento.startsWith("0")) {
				for (int xx=0;xx<10;xx++) {
					if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
				}
			}

			JSONObject jDescricaoDupl = new JSONObject();
			if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

			if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){

				apagaStatus = true;
				
				//JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
				//Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
				if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
					ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
				}
				
				String dataVencimentoTTMov = "";
				
				if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
				}	
					
				 
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
					if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  jDados.put("CODEMPRESA",     codEmpresa + "-%");
 
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  jDados.put("DATAVENCIMENTO", dataVencimentoTTMov); 

					
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					
					
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					// #Fabrica(2019-05-20)
					// Descomentar a proxima linha para testar a razaoSocial do movimento com a jDescricaoDupl.optString("RAZAOSOCIAL") que vem das duplicatas em aberto!
					// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, razaoSocial);      //IDENTIFICAMOS UMA FALHA LOGICA
					// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem); //USAR ESSE
					// #Fabrica(2019-07-30)
					// Descomentar a proxima linha para testar o codigo de filial do movimento com a jDescricaoDupl.optString("SITUACAO") que vem das duplicatas em aberto! OBS: Lembrando que deve existir regra de c?digo filial no CRM
					// if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorFilial(jDescricaoDupl, ttMov.codFilial);
					// #Fabrica(2019-07-31)
					// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
					
					// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						// if (roteiroCRMPrincipal.has("validaFornecedorFiscal")) jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						// jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					// }
					
					if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
						jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					}
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
					}

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  {
								txtFiscal[0].append(cutString(jDescricaoDupl.optString("CODEMPRESA"), "-"));
							}
							else {
								txtFiscal[0].append(jDescricaoDupl.optString("CODEMPRESA"));
							}
							
							txtFiscal[0].append(";");
							txtFiscal[0].append("1;");
							txtFiscal[0].append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOC"));
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.", ","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.", ","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.", ","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.", ","));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
				
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil questor
							dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
							contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");
							
							if(dupliNaoEncontContabil){
								contaMovimento = contaTemp;
								if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
								if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

								histobj.put("contaMovimento", contaMovimento);
								ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
							}else {
								if(cabecalhoNaoEncontrada){
									txtFornecedor.append("Codigo");
									txtFornecedor.append(";");
									txtFornecedor.append("Fornecedor/Cliente");
									txtFornecedor.append(";");
									txtFornecedor.append("Duplicata");
									txtFornecedor.append(";");
									txtFornecedor.append("Data");
									txtFornecedor.append(";");
									txtFornecedor.append("Valor bruto");
									txtFornecedor.append(";");
									txtFornecedor.append("Valor liquido");
									txtFornecedor.append(";");
									txtFornecedor.append("Banco");
									txtFornecedor.append(";");
									txtFornecedor.append("Obs:");
									txtFornecedor.append("\r\n");
									cabecalhoNaoEncontrada = false;
								}
								String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
								jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
								txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
								txtFornecedor.append(";");
								txtFornecedor.append(razaoSocialDuplicata);
								txtFornecedor.append(";");
								txtFornecedor.append(ttMov.documento);
								txtFornecedor.append(";");
								txtFornecedor.append(ttMov.dataMovimento);
								txtFornecedor.append(";");
								txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
								txtFornecedor.append(";");
								txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
								txtFornecedor.append(";");
								txtFornecedor.append(ttMov.nomePortador);
								txtFornecedor.append(";");
								txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
								txtFornecedor.append("\r\n");

								jDescricaoDupl.put("TIPO","FORNECEDOR");

								geraFiscal = true;
								loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								
								if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
								
								if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
								
								ttMov.tipoPlanilha = "NAO LER";
								mapaVariavel.put(key,ttMov);
								continue;
							}
						}
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("VALORMULTA",  ttMov.valorMulta);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
						
						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorAcrecimoAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros+ttMov.valorMulta));
						
						double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta;
						String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
						
						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {
						
													

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorAcrecimoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					  
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					
					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							if(geraCabecalhoCordilheira) {
								txtFiscal[0].append("DATA DE VENCIMENTO;DATA DO PAGAMENTO;CNPJ DO CLIENTE;DOCUMENTO;NOME/RAZAO;NUMERO DA PARCELA;VALOR ORIGINAL;VALOR PAGO;VALOR JUROS;VALOR DESCONTO;FORMA DE PAGAMENTO;NUMERO DA NOTA");
								txtFiscal[0].append("\r\n");
								geraCabecalhoCordilheira = false;
							}

							txtFiscal[0].append(jDescricaoDupl.optString("DATAVENCIMENTO"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.dataMovimento);
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.cpfCnpj);
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal[0].append(";");
							txtFiscal[0].append(cutString(ttMov.documento, 0, "-"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.nomeOrigem);
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOC"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("VALORPARCELA").replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto)).replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(String.format("%.2f",ttMov.valorDesconto).replaceAll("\\.",","));
							txtFiscal[0].append(";");
							txtFiscal[0].append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal[0].append(";");
							txtFiscal[0].append(ttMov.documento);
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}

				// if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

					// JSONObject jDados = new JSONObject();
					// jDados.put("CODEMPRESA",     codEmpresa);
					
					// //usando a filial do questor em duplicatas em aberto
				   
					// jDados.put("RAZAOSOCIAL",    razaoSocial);
					// jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					// jDados.put("DOCUMENTO",      ttMov.documento);
					// jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					// jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					// jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					// jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					// jDados.put("VALORJUROS",     ttMov.valorJuros);
					// jDados.put("VALORMULTA",     ttMov.valorMulta);
					// jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					// jDados.put("TABELACONTABIL", tabelaContabil);
					// jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					// Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					// dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					// double valorSaldoDuplicata2 = 0;
					// if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					// valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					// ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					// if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						// if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							// String separadorFiscal = "";
							// String dataVencimento  = "";
							// //String parcela		   = "1";
							// String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							// txtFiscal[0].append(cnpjEmpresa);
							// txtFiscal[0].append("    ");

							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							// txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie
							
							// txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
							// txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
							// txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));
							
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							// txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							// if(contaPortador.length() > 1){
								// contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								// if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							// }
							
							// txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// //txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							// txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							// txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita
							
							// txtFiscal[0].append("\r\n");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// } else {
							// if(cabecalhoNaoEncontrada){
								// txtFornecedor.append("Codigo");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Fornecedor/Cliente");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Duplicata");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Data");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor bruto");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor liquido");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Banco");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Obs:");
								// txtFornecedor.append("\r\n");
								// cabecalhoNaoEncontrada = false;
							// }
							// String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							// jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							// txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							// txtFornecedor.append(";");
							// txtFornecedor.append(razaoSocialDuplicata);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.documento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.dataMovimento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							// txtFornecedor.append(";");
							// txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.nomePortador);
							// txtFornecedor.append(";");
							// txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							// txtFornecedor.append("\r\n");

							// jDescricaoDupl.put("TIPO","FORNECEDOR");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// }
					// }
				// }
				
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					JSONObject jDados = new JSONObject();
					
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("LER DA DUPLICATA MAIS ANTIGA"))  {
						
						
						if (dataVencimentoTTMov.equals("")) {
						
							JSONObject recordsDupVenc = new JSONObject();  
							try {
								String sql = "SELECT VENCIMENTO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.DUPLICATA = ? ORDER BY VENCIMENTO LIMIT 1"; 
								recordsDupVenc = dbIOCont.sql(sql)
								.setFields("VENCIMENTO")
								.param(codEmpresa)
								.param(ttMov.documento)
								.debug(logger)
								.queryUnique();	

							} catch (Exception e1) {
								logger.logInfo("ERROR: " + e1.getMessage());
							}
						
							if(recordsDupVenc != null && recordsDupVenc.has("VENCIMENTO")){
								dataVencimentoTTMov = cutString(recordsDupVenc.optString("VENCIMENTO"), 8, 10) + "/" +cutString(recordsDupVenc.optString("VENCIMENTO"), "-", "-") + "/" + cutString(recordsDupVenc.optString("VENCIMENTO"), 0, "-") ;
							}
						}   
						
						
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}else if(!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}else if(roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					 
					
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

					// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 
					   if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
					}

					String chaveParcela = ttMov.documento + "-PARCELA";
					ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
					if (ttP == null) {
						ttP  			= new ttParcelaDominio();
						ttP.documento   = ttMov.documento;
						ttP.ultimaParcela = 0;
					}
					ttP.ultimaParcela++;
					
					mapaParcelaDominio.put(chaveParcela,ttP);
					
					jDados.put("PARCELADOC", ttP.ultimaParcela);                 
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);	

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
 
					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";
					
					String serie = "";
					String subSerie = "";
					String especie = "";
					double valorSegmento = 0;

					JSONArray recordsDup = new JSONArray();

					/*
					DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
					VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
					COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
					*/
					// if (ttMov.tipoPlanilha.equals("MOVIMENTO")) {
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 

						 boolean isData = false;
						 Date dtV = new Date();
						 try{ 
							 dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
							isData = true; 
							 if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(dataVencimentoTTMov))) isData = false; 
						 } catch(Exception ii){ 
							isData = false; 
						 }
						 if(!chaveDuplicata.equals("")){
							if(isData){
								try {
									String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? "; 
									recordsDup = dbIOCont.sql(sql)
									  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  .param(codEmpresa)
									  .param(chaveDuplicata + "%")
									  .param(dtV)
									  .debug(logger)
									  .query();								
								} catch (Exception e1) {
									logger.logInfo("ERROR: " + e1.getMessage());
								}
							}
							// if(!isData){
								// try {
									// String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
									// recordsDup = dbIOCont.sql(sql)
									  // .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  // .param(chaveDuplicata + "%")
									  // .debug(logger)
									  // .query();								
								// } catch (Exception e1) {
									// logger.logInfo("ERROR: " + e1.getMessage());
								// }
							// }
						 }
					}

					 else  { 
						if(!chaveDuplicata.equals("")){
							try {
								// INSERIDO O WHERE CODEMPRESA = ? PARA CORRE??O DO CHAMADO 202301-0023064.
								String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? "; 
								recordsDup = dbIOCont.sql(sql)
								  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
								  .param(codEmpresa)
								  .param(chaveDuplicata + "%")
								  .debug(logger)
								  .query();	

							} catch (Exception e1) {
								logger.logInfo("ERROR: " + e1.getMessage());
							}
						}
					}
					/* EXEMPLO DE COMO TEM QUE SAIR
					
					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject(); 
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);
					
					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");
					}

					double valorSaldoDuplicata = 0;
					double valorSomaSegmentos  = 0;
					
					// soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos 
					// continua sendo o valor origial (total) da nota fiscal
					// utilizado para achar a proporcao do valor para cada segmento
					for (int seg =0; seg<recordsDup.length(); seg ++) {
						recordsDupSeg =  recordsDup.optJSONObject(seg);
						if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
							valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
						}		
					}

					boolean leuDuplicata = false;
					
					// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
					
					if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
						jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					}
					
					if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

					valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));
					
					if (!especie.equals("") || !serie.equals("")) {
						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
							double valorTotalBaixado = 0;
							for (int seg =0; seg<recordsDup.length(); seg ++) {
							
								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";
								
								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE 
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
									if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }	
								}	

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

								// (zerado para validacao)
								diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
									ttMov.contaDebito   = contaPortador;
									ttMov.contaCredito  = contaMovimento;
									codContabil = "5200";
									if(especie.equals("39")) codContabil = "5300";
									
									histobj.put("especie", especie);
									String codigoFiscalNovo = getCampoFiscal("", histobj);
									if (!codigoFiscalNovo.equals("")) codContabil = codigoFiscalNovo;
								}

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal[0].append(tipoSerie);
                                    txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
                                    txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                                    txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append(ttMov.dataMovimento);
                                    txtFiscal[0].append(delimitador);
									
									 
									
									ttDocumento ttDoc    = (ttDocumento)mapaDocumento.get(ttMov.documento+"-"+seg);
									if (ttDoc == null) {
										ttDoc  = new ttDocumento();
										ttDoc.documento  = ttMov.documento;
										ttDoc.valorDocumento  = 0;
 									}
									
									double valorBaixar = 0;
									
									ttDoc.valorDocumento   = ttDoc.valorDocumento + DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));
									valorBaixar = DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));										
									
  
									if ((valorSegmento - ttDoc.valorDocumento) <= 0.02 && (valorSegmento - ttDoc.valorDocumento) > 0) valorBaixar = valorBaixar  + (valorSegmento - ttDoc.valorDocumento);
									if ((ttDoc.valorDocumento - valorSegmento) <= 0.02 && (ttDoc.valorDocumento - valorSegmento) > 0) valorBaixar = valorBaixar  - (ttDoc.valorDocumento - valorSegmento);
									
									 valorTotalBaixado += valorBaixar; 
									 
 									 
 									
									// calcula se o valor a ser baixado somando os segmentos eh maior que o valor pago pelo cliente
									// quando isto ocorrer, deve-se ajustar no ultimo segmento o valor
									 if ((valorTotalBaixado - ttMov.valorDocumento) <= 0.02 && (valorTotalBaixado - ttMov.valorDocumento) > 0) {
										 valorBaixar = valorBaixar  - (valorTotalBaixado - ttMov.valorDocumento);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (valorTotalBaixado - ttMov.valorDocumento);
									 }
									
									 if ((ttMov.valorDocumento - valorTotalBaixado) <= 0.02 && (ttMov.valorDocumento - valorTotalBaixado) > 0) {
										 valorBaixar = valorBaixar  - (ttMov.valorDocumento - valorTotalBaixado);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (ttMov.valorDocumento - valorTotalBaixado);
									 }
									 
 									
									mapaDocumento.put(ttMov.documento+"-"+seg,ttDoc);									
									
									txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    // txtFiscal[0].append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||");
                                    txtFiscal[0].append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||||");
                                    
									if(ttMov.tipoLancamento.contains("PAGAR")) {
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(jDescricaoDupl.optString("CPFCNPJ"));
										txtFiscal[0].append(delimitador);
									}
									txtFiscal[0].append(segmento);
                                    txtFiscal[0].append(delimitador);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
										codContabil = codContabil.replaceAll("00","10");

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.contaDebito);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.contaCredito);
										txtFiscal[0].append(delimitador);
										 
										txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historico.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historico, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(cutString(ttMov.historico, 0, "Filial:"), 0 ,"Codigo"));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

									if (ttMov.valorDesconto > 0 && seg == 0) {

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(ttMov.contaDebito);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(contaDesconto);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(contaDesconto);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(ttMov.contaCredito);
										}
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(cutString(ttMov.historicoDesconto, 0, "Filial:"), 0 ,"Codigo"));

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaJuros);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(contaJuros);
										}
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(cutString(ttMov.historicoJuros, 0, "Filial:"), 0 ,"Codigo"));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(codContabil);
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(ttMov.dataMovimento);
										txtFiscal[0].append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaMulta);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito);
											txtFiscal[0].append(delimitador);
											txtFiscal[0].append(contaMulta);
										}
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append(cutString(cutString(ttMov.historicoMulta, 0, "Filial:"), 0 ,"Codigo"));
										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										txtFiscal[0].append(delimitador + codEmpresa + delimitador);
										txtFiscal[0].append("\r\n");
									}

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    
									if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
									
									eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
							jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
							eFornecedor = true;
						}
					}
				}


				if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
							jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
							jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
							jDescricaoDupl.put("VALORFINAL",  valorFinal);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
								txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
							}
							else {
								txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
																
							}							
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
				}
			}
			
			/*	
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";
					
 				
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
					}	
					
						
					JSONObject jDados = new JSONObject();
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
 					
 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");	 
				
						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logInfo("ERROR: " + e2.getMessage());
						continue;
					}
					
 					
					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) { 

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
	 
						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;
						
						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
						 
 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) { 
 
							String codContabil = "5700";								 							
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}
								
								
							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");								 
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}
							
 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio
							 
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);
							
						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}
			
			*/
			
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);


				}
			}
			 //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			}
			
 

			chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
			chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
			ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
			String keyAc = chave;
			
			// logger.logInfo("EMPR " + nomeEmpresa + " | " + tipoProduto + " | " + mantemArquivo + " | " + processaOud);
			
			if (((!tipoProduto.equals("OIC_PACOTE") && mantemArquivo.equals("SIM"))  || processaOud.equals("TRUE")) && !ttMov.lote.toUpperCase().contains("_OUD_")) {
				ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
			}
			else {
				if (ttMov.nomeArquivo.contains(".omc")) {
					ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
				}
			}
			
			// logger.logInfo("LOTEE " + ttMov.lote);
 
 			
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);		
			

			ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
			if (ttMov3  == null) {
				ttMov3                = new ttMovimentoPadrao(ttMov);
				ttMov3.valorDesconto   = 0;
				ttMov3.valorJuros      = 0;
				ttMov3.valorDocumento  = 0;
				ttMov3.valorMulta      = 0;
				ttMov3.documento       = "";
			}
			if (ttMov3.documento.equals("")) {
				ttMov3.documento         = ttMov.documento;
			} else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


			ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
			ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
			ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
			ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
			ttMov3.chave = chave;


			// logger.logInfo("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador);
			String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
 			if (!testeChavePortador.equals("")) ttMov3.contador = 3;
			
			if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("DYAD") ||//removido o erp FORTES dessa valida??o - 202301-0023113
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")) ttMov3.contador = 3;
				
			//logger.logInfo("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador+" - AGORA E AGORA -> "+roteiroCRMPrincipal.optString("erpContabilidade"));

			mapaVariavel.put(key,ttMov);
			mapaOficial.put(keyAc,ttMov3);
  			
			
			 			
 
			if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
				if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			}else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			
			if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
			

			if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
				chave = chave.replaceAll("CTB","CTBPORT");
				if (!testeChavePortador.equals("")) chave = testeChavePortador;

				key = chave;
				ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
				if (ttMov2  == null) {
					ttMov2                = new ttMovimentoPadrao(ttMov);
					ttMov2.contador        = 0;
					ttMov2.valorDesconto   = 0;
					ttMov2.valorJuros      = 0;
					ttMov2.valorDocumento  = 0;
					ttMov2.valorMulta      = 0;
					ttMov2.classificacao     = ttMov.classificacao;

				}
				ttMov2.tipoMovimento     = "CTBPORT";
				ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
				ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
				ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
				ttMov2.chave             = chave;
				ttMov2.chaveExtrato      = "";
				ttMov2.documento         = ttMov3.documento;
				ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
				ttMov2.contador          = ttMov2.contador + ttMov3.contador;
				if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
					ttMov2.naturezaContabil  = "C";
					ttMov2.contaDebito       = "";
					ttMov2.contaCredito      = ttMov.contaCredito;
				}
				if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
					ttMov2.naturezaContabil  = "D";
					ttMov2.contaDebito       = ttMov.contaDebito;
					ttMov2.contaCredito      = "";
				}
				if (ttMov2.valorDocumento == 0) continue; //JWR
				ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
				
				//Descomentar caso haja problema com a perna de portador do lancamento
				if (!ttMov2.codFilial.equals("") && !ttMov2.historico.contains("Filial:")) ttMov2.historico = ttMov2.historico + " Filial:" + ttMov2.codFilial;
				
				String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
					if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
  					ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
				}

				mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
			}
		}
		if(contRegra == -1){
			String codEmp = props.get(empresa + "_COD_EMPRESA");
			String nomeEmp = props.get(empresa + "_NOME_EMPRESA");
			
			String info = tipoPlanilha + ";" + roteiroCRM.optString("codigo");
			compDirName = nomeEmp + "_#" + codEmp;
			String tipoPlanilhaDirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/" + compDirName + "/DePara/Processado/";
			String tipoPlanilhaPath = tipoPlanilhaDirName + "TIPOPLANILHA" + ".txt";
			// inout/contabil/Depaula/vektor_#123/Depara/TIPOPLANILHA.txt
			FileWriter 	arquivoTp = new FileWriter(tipoPlanilhaPath);
			arquivoTp.writeNewFile(info);
			//sssssss
		}


		//-------------------------------------------------------------------------
		// GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
		//-------------------------------------------------------------------------
		if (geraFiscal) {

			String auxExtencao = ".txt";
			if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtFiscal[0].toString());

			loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
			
			// if (nomeArquivo.toUpperCase().contains("_ID") && !loteFiscal[0].contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + tipoLancamento;

			filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
			writer = new FileWriter(filename);
			writer.writeNewFile(txtFornecedor.toString());
			
			
		}


		//-------------------------------------------------------------------------
		//--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
		//-------------------------------------------------------------------------


		
		mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			// logger.logInfo("PUTSTATUS 4745");
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
		// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
		// =======================================================================================
  	   
		
		Iterator itLote = mapaLote.keySet().iterator();
		while (itLote.hasNext()) {

			String key = (String)itLote.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			 lote = ttLot.lote;

			try {
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_MOVIMENTO")
				.where("LOTE=?")
				.param(lote)
				.execute();
				
 				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_MOVIMENTO")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param("%_" + tipoLancamento + "%")
					.param(nomeEmpresa + "_" + "%")
					
					.execute();
					
				}
				
				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_ARQUIVOS")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param(cutString(lote, 0, "_") + "%")
					.param("%" + tipoLancamento + "%")
					.execute();
					
				}
				
				
			} catch (Exception eDel) {
				logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
			}
		}
		// logger.logInfo("ETAPA 04 TEMPLATE ");
	
	
		contRegra = -1;
		Iterator it = mapaOficial.keySet().iterator();
		while (it.hasNext()) {
			
			String chaveExtrato     = "";

			String key = (String)it.next();
			ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
			try {
				ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
			}
			catch (Exception xx) { continue;}

  
			if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
				if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

			}
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			// quando cliente escolhe para agrupar tudo em um unico lote, mudamos o nome do arquivo.
			
			String idLote = cutString(ttMov.lote, "ott_oud", ttMov.lote.indexOf("ott_oud") + 16);//202302-0025707
			if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) {
				if (ttMov.lote.contains("_CORA_")) {
					ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_CORA_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
				} 
				
				else {
					if (ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) {

						ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_OTTIMIZZA_PROJETO_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
					}
					else {
						if (ttMov.lote.toUpperCase().contains("_OUD_")) {
	
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_ott_oud__" + idLote + "_" + arquivoAgora  + "_OUD_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						}
					
						else {
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						
						}
					}
				}
				
				
			}
  			
			 
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);
			

			if(tipoLancamento.contains("PAGAR")){
				ttMov.naturezaContabil = "D";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
			}
			if(tipoLancamento.contains("RECEBER")){
				ttMov.naturezaContabil = "C";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
			}

			JSONObject extratoEmpresa = new JSONObject();


			// CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				chaveExtrato = ttMov.chaveExtrato;

				extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
				.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
				.param(chaveExtrato + "%")
				.queryUnique();

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					if (extratoEmpresa.has("EXTRATOLIDO")) {

						double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

						if (extratoLido == 1) continue;

						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(1)
						.param(chaveExtrato)
						.execute();

					}
				}

			}


			// -----------------------------------------------------------------------------------------------------------
			// COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
			// QUANDO O CLIENTE FINAL ESTIVER RODANDO.
			// -----------------------------------------------------------------------------------------------------------

			if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

				String tipoData = "MOVIMENTO";

				comparaRazao = true;


				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm= new Date();
				Date dataMovimentoDateMenosDois= new Date();
				Date dataMovimentoDateMenosTres= new Date();
				Date dataMovimentoDateMaisUm= new Date();
				Date dataMovimentoDateMaisDois= new Date();
				Date dataMovimentoDateMaisTres= new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;

				String valorFinal = String.format("%.2f", ttMov.valorDocumento);
				valorFinal = valorFinal.replaceAll("\\.",",");

				JSONArray registro = new JSONArray();

				

				JSONObject histobj = new JSONObject();
				ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
				ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
				ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
				ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
				ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
				ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
				ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
				ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
				ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
				ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
				ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
				ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
				ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

				histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
				histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
				histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
				histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
				histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
				histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
				histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
				histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
				histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
				histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
				histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

				String contaPrincipal = "";
				String contraSecundaria = "";

				if (tipoLancamento.contains("PAGAR")) {
					contaPrincipal = ttMov.contaDebito;
					contraSecundaria = ttMov.contaCredito;

				}
				if (tipoLancamento.contains("RECEBER")) {
					contaPrincipal = ttMov.contaCredito;
					contraSecundaria = ttMov.contaDebito;
				}

				regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

				 
				ResumoTxt.append("\r\n");
				ResumoTxt.append("NAO ENCONTRADO;");
				ResumoTxt.append(ttMov.dataMovimento);
				ResumoTxt.append(";");
				ResumoTxt.append(tipoData);
				ResumoTxt.append(";");
				ResumoTxt.append(valorFinal);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.documento);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomeOrigem);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.nomePortador);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento01);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento02);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento03);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento04);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento05);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.complemento06);
				ResumoTxt.append(";;");

				ResumoTxt.append(ttMov.contaDebito);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.contaCredito);
				ResumoTxt.append(";");
				ResumoTxt.append(regraContaMovimento);
				ResumoTxt.append(";");
				ResumoTxt.append(ttMov.historico);
				ResumoTxt.append(";");
				ResumoTxt.append(regraHistorico);
				ResumoTxt.append(";;");
				ResumoTxt.append(ttMov.nomeArquivo);
				ResumoTxt.append(";");
				 
			}			
 
			if(tipoLancamento.contains("PAGAR")){

				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
				if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
			}
			if(tipoLancamento.contains("RECEBER")){
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
				if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
			}

			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

			String classificacaoFinal = classificacao + ttMov.classificacao + "01";

			if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}
			
			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			
			//Feito para retirar os indices apos o tipoPlanilha, estavam impactando nas regras do oud
			if(!ttMov.tipoPlanilha.equals("")){
				String sequencia = "";
				try{
					sequencia = cutString(ttMov.tipoPlanilha, ttMov.tipoPlanilha.length()-4).replaceAll("[^0-9]", "");
				}catch(Exception s1){}
				if(ttMov.tipoPlanilha.contains(sequencia)){
					try{
						ttMov.tipoPlanilha = cutString(ttMov.tipoPlanilha, 0, sequencia);
						
					}catch(Exception s2){}
				}
			}

 
			if (classificacao.startsWith("X")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("CONTADEBITO", ttMov.contaDebito);
				js.put("CONTACREDITO", ttMov.contaCredito);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave  + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

 
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
 
				}
					
  				 

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
 				

				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

					//records.put(rec3);
				}
				continue;
			}

			String classJur = "";
			String classDes = "";
			String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}
			}
			
			
			if(tipoLancamento.contains("RECEBER")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}

				}
			}
			  


			if (ttMov.tipoMovimento.equals("CTBPORT")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTBPORT");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTBPORT");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
			 
				//records.put(js);
			}
			if (ttMov.tipoMovimento.equals("CTB")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTB");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);

				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
					//records.put(rec3);
				}

				 
				if (ttMov.valorJuros > 0)  {
					classificacaoFinal = classJur;
					JSONObject jsJUR = new JSONObject(js.toString());
					jsJUR.put("LOTE", ttMov.lote);
					jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
					jsJUR.put("DOCUMENTO", ttMov.documento);
					jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
					jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
					jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsJUR.put("HISTORICO", ttMov.historicoJuros);
					jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
					jsJUR.put("VALORJUROS", ttMov.valorJuros);
					jsJUR.put("VALORMULTA", ttMov.valorMulta);
					jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
					jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
					jsJUR.put("NATUREZACONTABIL", "D");
					jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
					jsJUR.put("SERIE", ttMov.serie);
					jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
					jsJUR.put("CLASSIFICACAO", classificacaoFinal);

					jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
					jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
					jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
					jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
					jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
					jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
					jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
					jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
					jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
					jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
					jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
						jsJUR.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsJUR.put("CONTADEBITO",  "");
						jsJUR.put("CONTACREDITO", ttMov.contaJuros);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
				
					//records.put(jsJUR);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsJUR.toString());
						 rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorDesconto > 0)  {
					classificacaoFinal = classDes;
					JSONObject jsDES = new JSONObject(js.toString());
					jsDES.put("LOTE", ttMov.lote);
					jsDES.put("CNPJEMPRESA", cnpjEmpresa);
					jsDES.put("DOCUMENTO", ttMov.documento);
					jsDES.put("CODEMPRESA", ttMov.codEmpresa);
					jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsDES.put("TIPOMOVIMENTO", "CTBDES");
					jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsDES.put("HISTORICO", ttMov.historicoDesconto);
					jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
					jsDES.put("VALORJUROS", ttMov.valorJuros);
					jsDES.put("VALORMULTA", ttMov.valorMulta);
					jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
					jsDES.put("CENTROCUSTO", ttMov.centroCusto);
					jsDES.put("NATUREZACONTABIL", "C");
					jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
					jsDES.put("SERIE", ttMov.serie);
					jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
					jsDES.put("CLASSIFICACAO", classificacaoFinal);

					jsDES.put("COMPLEMENTO01", ttMov.complemento01);
					jsDES.put("COMPLEMENTO02", ttMov.complemento02);
					jsDES.put("COMPLEMENTO03", ttMov.complemento03);
					jsDES.put("COMPLEMENTO04", ttMov.complemento04);
					jsDES.put("COMPLEMENTO05", ttMov.complemento05);
					jsDES.put("COMPLEMENTO06", ttMov.complemento06);
					jsDES.put("COMPLEMENTO07", ttMov.complemento07);
					jsDES.put("COMPLEMENTO08", ttMov.complemento08);
					jsDES.put("COMPLEMENTO09", ttMov.complemento09);
					jsDES.put("COMPLEMENTO10", ttMov.complemento10);
					jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsDES.put("CONTADEBITO", "");
						jsDES.put("CONTACREDITO", ttMov.contaDesconto);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
						jsDES.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
					//records.put(jsDES);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsDES.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorMulta > 0)  {
					classificacaoFinal = classMul;
					JSONObject jsMUL = new JSONObject(js.toString());
					jsMUL.put("LOTE", ttMov.lote);
					jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
					jsMUL.put("DOCUMENTO", ttMov.documento);
					jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
					jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
					jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsMUL.put("HISTORICO", ttMov.historicoMulta);
					jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
					jsMUL.put("VALORJUROS", ttMov.valorJuros);
					jsMUL.put("VALORMULTA", ttMov.valorMulta);
					jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
					jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
					jsMUL.put("NATUREZACONTABIL", "D");
					jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
					jsMUL.put("SERIE", ttMov.serie);
					jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
					jsMUL.put("CLASSIFICACAO", classificacaoFinal);

					jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
					jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
					jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
					jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
					jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
					jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
					jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
					jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
					jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
					jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
					jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
						jsMUL.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsMUL.put("CONTADEBITO",  "");
						jsMUL.put("CONTACREDITO", ttMov.contaMulta);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
					
					//records.put(jsMUL);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsMUL.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
					   //records.put(rec3);
					}
				}
			}
		}
		// 14122022 JWR comentado pois validamos no workflow
		/*if (!loteEtapaTres.equals("") && contRegra < 0) {
			// adiciona o campo ProtocoloID para avisar o OUD que o arquivo foi processado.
			if(loteEtapaTres.toUpperCase().contains("_ID")) {
				String protocolo_id = cutString(loteEtapaTres.toUpperCase(), "_ID", "_");
				 
				// roda requisicao para atualizar o satus do protocolo
				JSONObject bodyProtocolo = new JSONObject();
				
				bodyProtocolo.put("status", "3");	
				bodyProtocolo.put("mensagem", "Conseguimos ler a planilha mas devido alguma regra, nenhuma linha foi processada. (Codigo erro 3)");
				
				LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
				String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://beta-integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
			}
		}*/

		if (apagaExtrato) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_EXTRATO")
				.where("CODEMPRESA=?")
				.param(codEmpresa)
				.execute();
			} catch (Exception e) {
				logger.logInfo("PROBLEMA APAGAR EXTRATO " + e.getMessage());
			}
		}
		
		
		// Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras 
		if (apagaContaT) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				
				if (tipoLancamento.contains("PAGAR")) {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
				else {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
			} catch (Exception e) {
				logger.logInfo("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
			}
		}
		// resumo comparativo com razao
		if (comparaRazao) {
			String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerRazao.writeNewFile(ResumoTxt.toString());
		}
		
		if(logs){
			String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
			FileWriter writerLogs = new FileWriter(filenameLogs);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerLogs.writeNewFile(logsTxt.toString());
		}

		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
		//-------------------------------------------------------------------------------------
		String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
		// Cria o arquivo de DE-PARA FORNECEDOR
		FileWriter writer = new FileWriter(filename);
		writer.writeNewFile(txtDePara.toString());

		Iterator ite = mapaLote.keySet().iterator();
		while (ite.hasNext()) {
			String key = (String)ite.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			// =======================================================================================
			// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
			// =======================================================================================
			lote = ttLot.lote;     

  			
			ultimoJS = new JSONObject();
			ultimoJS.put("LOTE", lote);
			ultimoJS.put("DOCUMENTO", "");
			ultimoJS.put("CODEMPRESA", codEmpresa);
			ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
			ultimoJS.put("DATAMOVIMENTO", "");
			ultimoJS.put("TIPOMOVIMENTO", "");
			ultimoJS.put("TIPOLANCAMENTO", "");
			ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
			ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
			ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
			ultimoJS.put("VALORLIQUIDACAO", 0);
			ultimoJS.put("VALORDOCUMENTO", 0);
			ultimoJS.put("VALORDESCONTO", 0);
			ultimoJS.put("VALORJUROS", 0);
			ultimoJS.put("VALORMULTA", 0);
			ultimoJS.put("NOMEPORTADOR", "");
			ultimoJS.put("CENTROCUSTO", "");
			ultimoJS.put("NATUREZACONTABIL", "");
			ultimoJS.put("NOMEORIGEM", "");
			ultimoJS.put("CPFCNPJ", "");
			ultimoJS.put("SERIE", "");
			ultimoJS.put("STATUSMOVIMENTO", 0);
			ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
			ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
			ultimoJS.put("STATUSMOVIMENTO", 1);
			records.put(ultimoJS);
			// Resumo Planilha
			try {
				String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
				File file = new File(dirName1);
				try {
					String diretorio = dirName1;
					File file2 = new File(diretorio);
					File[] files = file2.listFiles();
					if (FileUtil.dirHasFiles(diretorio)) {
						for (File fl: files) {
							if (fl.isFile()){
								if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
									// ELIMINA ARQUIVO IMPORTADO
									file = new File(dirName1);
									if (file.exists()){
										FileUtil.deleteFile(dirName1+fl.getName());
									}
								}
							}
						}
					}
				} catch (Exception ee) {
					logger.logError(ee);
				}
			}catch (Exception e) {
				logger.logError(e);
			}
		}
	} catch (Exception ee) {
		logger.logError("EndpointA: ", ee);
	} finally {
	
		try {
			if (dbIOCont != null) {
				dbIOCont.closeConnection();
			}
			if (dbIODepara != null) {
				dbIODepara.closeConnection();
			}
		} catch (Exception ee) {}
	}
	return records;
}

class ttLote {
	public String lote;
	public String tipoPlanilha;
	public ttLote(){}
	public ttLote(ttLote tt){
		lote=tt.lote;
		tipoPlanilha=tt.tipoPlanilha;		
	}
}

class ttArquivo {
	public String arquivo;
	public String abas;
	public ttArquivo(){}
	public ttArquivo(ttArquivo tt){
		arquivo=tt.arquivo;
		abas=tt.abas;
	}
}

class ttDocumento {
    public String documento;
	public double valorDocumento;
     public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
 		valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
	public String documento;
	public double valorJur;
	public int valorLido;
	public ttJuros(){}
	public ttJuros(ttJuros ttJ){
		documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
	}
}

class ttDesconto {
	public String documento;
	public double valorDesc;
	public int valorLido;
	public ttDesconto(){}
	public ttDesconto(ttDesconto ttD){
		documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
	}
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttFornecedor {
	public String nomeOrigem;
	public String contaMovimento;
	public ttFornecedor(){}
	public ttFornecedor(ttFornecedor ttF){
		nomeOrigem 	 = ttF.nomeOrigem;
		contaMovimento = ttF.contaMovimento;
	}
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

	try {
		if(extensao.contains("CSV")) {

			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
				if (memFile.getFilename().toUpperCase().contains("CSV")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length < fields2.length) { separadorCsv = ","; break; }
								if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
		
		
		
		if(extensao.contains("TXT")) {
			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							String [] fields3 = line.split("\t");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
								if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
								if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
	
	}
	 catch(Exception xx) {}
	
	return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
	int validaCampo = -1;
	try {
		if (!roteiroIndice.optString(nomeCampo).equals("")) {
			try {
				validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
			}
			catch (Exception xx) { validaCampo = -1;}
		}
	}
	catch (Exception xx) {validaCampo = -1;}
	return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
	ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
	if (ttMov4 == null) {
		ttMov4 = new ttMovimentoPadrao(ttMov2);
		ttMov4.chave                    = chave;
		if(gerarApenasValorDocumento){
			ttMov4.valorDesconto            = 0;
			ttMov4.valorMulta               = 0;
			ttMov4.valorJuros               = 0;
		}
		ttMov4.classificacao            = classificacao;
		switch(complemento){
			case 1: ttMov4.complemento01 = textoComplemento; break;
			case 2: ttMov4.complemento02 = textoComplemento; break;
			case 3: ttMov4.complemento03 = textoComplemento; break;
			case 4: ttMov4.complemento04 = textoComplemento; break;
			case 5: ttMov4.complemento05 = textoComplemento; break;
			case 6: ttMov4.complemento06 = textoComplemento; break;
		}
		mapaVariavel.put(chave, ttMov4);
	}
	return mapaVariavel;
}


public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
	JSONObject response	= new JSONObject();
	String validar		= objIn.optString("validar");
	String [] validaArr	= validar.split(";");
	String changeIt		= "";
	String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
	String changeDate	= "dataMovimento";
	String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

	for (String parameter : validaArr) {
		response.put(parameter,	"");

		// String indiceAux = "";
		String indiceAux = getColunaAlternativa(parameter,	objIn);
		if (!indiceAux.equals("")) {
			if (changeDate.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						if (!dataStrAux.equals("")) {
							String dataMovAux = getCampoDate(dataStrAux);
							if (dataMovAux.contains("/")) {
								String dataAlternativa = getCampoDate(dataStrAux);
								response.put(parameter,	dataAlternativa);
								response.put("dataLote", dataAlternativa);
								changeIt = changeIt+";"+parameter;
								
								//feito pra que as proximas iteracoes ja tenham o dado atualizado
								objIn.put(parameter, dataAlternativa);
							}
						}
					} catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
				}
				
			} else if (changeValue.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try {
						int iAux  = Integer.parseInt(indiceAux);
						if(iAux >=0){
							double valorAlternativo = memFile.getDoubleField(iAux);
							response.put(parameter, valorAlternativo);
							changeIt = changeIt+";"+parameter;
							
							//feito pra que as proximas iteracoes ja tenham o dado atualizado
							objIn.put(parameter, valorAlternativo);
						}
					} catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

				}
				if (indiceAux.contains(";")) {
					double valorAlternativo = 0;
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux = Integer.parseInt(k);
							valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
						}
					} catch (Exception ee) {logger.logInfo("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }
					
					if (valorAlternativo != 0) {
						response.put(parameter, valorAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, valorAlternativo);
					}
				}
			} else if (changeText.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					} catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
				}
				if (indiceAux.contains(";")) {
					String textoAlternativo = "";
					
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux	 = Integer.parseInt(k);
							textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
							textoAlternativo = textoAlternativo.trim();
						}
						if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();
						
					} catch (Exception ee) {logger.logInfo("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }
					
					if (!textoAlternativo.equals("")) {
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					}
				}
			} else {
				response.put(parameter, "");
				objIn.put(parameter, "");
			}
		}
	}
	
	response.put("changeIt",	changeIt);
	return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
	
	nomeArquivo = StringUtil.removeSpecialCharsToUC(nomeArquivo);


	if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
	if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
	if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
	if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
	if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}









































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-1136164");
    js.put("idRoteiro", "a0A6R000017NGN1");
    js.put("idEmpresa", "a0q6R000008wgGDQAY");
    js.put("idContabilidade", "a091C00001RT2Ci");
    js.put("CnpjContabilidade", "07.310.888/0001-08");
    js.put("CnpjEmpresa", "04.748.235/0001-17");
    js.put("fornecedor", "#COLUNA A CONTEM(FORNECEDOR) COLUNA E");
    js.put("dataMovimento", "DT. PAG.");
    js.put("portador", "17");
    js.put("documentoNF", "NUMERO");
    js.put("valorDocumento", "23");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "DESCRICAO");
    js.put("complemento02", "0");
    js.put("complemento03", "PLANO DE CONTAS");
    js.put("complemento04", "#COLUNA A CONTEM(FORNECEDOR) COLUNA E");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "2858");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Altoumuaramacombustiveis");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "PORTADOR");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "NOTAS A PAGAR");
    js.put("Planilhas_Padroes", "Extratos OFX;Extrato_BB_PDF;Extrato_Sicoob_PDF;Extrato_Sicoob_PDF;Extrato_CEF_PDF;Extrato_CEF_PDF");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "(23,24)");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "DESCRICAO");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "PLANO DE CONTAS");
    js.put("Rotulo_Complemento_04", "FORNECEDOR");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroMOVIMENTOPAGGRUPOOPEL11() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-1237392");
    js.put("idRoteiro", "a0A6R000017NGN1");
    js.put("idEmpresa", "a0q6R000008whiNQAQ");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "00.000.000/0000-00");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "10");
    js.put("dataMovimento", "#COLUNA A CONTEM(DATA :)COLUNA B");
    js.put("portador", "#COLUNA A CONTEM (CONTA N)");
    js.put("documentoNF", "7");
    js.put("valorDocumento", "19");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "14");
    js.put("complemento02", "");
    js.put("complemento03", "3");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "16");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Altoumuaramacombustiveis");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "COMPLEMENTO01");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "RELATORIO PADRAO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroZZPADRAOOTTIMIZZAPAG2() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2021-1016997");
    js.put("idRoteiro", "a0A6R000017NGN1");
    js.put("idEmpresa", "a0q6R000007KGdjQAG");
    js.put("idContabilidade", "a091500001BVcOf");
    js.put("CnpjContabilidade", "10.000.000/0000-0");
    js.put("CnpjEmpresa", "1");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "2");
    js.put("dataMovimento", "0");
    js.put("portador", "6");
    js.put("documentoNF", "1");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "5");
    js.put("complemento01", "3");
    js.put("complemento02", "7");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Asercomg");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Altoumuaramacombustiveis");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "OFICIAL PLANILHA PADRAO OTTIMIZZA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    String [] campos1 = "RELATORIO EXTRATO BANCARIO;MNEMONICO".split(";");
    for (int x=0;x<campos1.length;x++) {
        if (!line.contains(campos1[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "MOVIMENTOPAGGRUPOOPEL11";
    achouTipo = true;
    String [] campos2 = "DATA PAGAMENTO;DOCUMENTO;FORNECEDOR;DETALHES DO PAGAMENTO".split(";");
    for (int x=0;x<campos2.length;x++) {
        if (!line.contains(campos2[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "ZZPADRAOOTTIMIZZAPAG2";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (nomeOrigem.contains("BYTEON") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "520428";
        contaMovimento = "520428";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DUPRINT")) {
        conta = "860973";
        contaMovimento = "860973";
    }
    if (nomeOrigem.contains("RAIZEN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "505585";
        contaMovimento = "505585";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SINPOSPETRO")) {
        conta = "4965";
        contaMovimento = "4965";
    }
    if (nomeOrigem.contains("UBERTRANS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4351";
        contaMovimento = "4351";
    }
    if (nomeOrigem.contains("PG") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("VR")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("BRINKS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "522981";
        contaMovimento = "522981";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DMAE")) {
        conta = "4476";
        contaMovimento = "4476";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EDNALDO")) {
        conta = "612550";
        contaMovimento = "612550";
    }
    if (nomeOrigem.contains("META") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "508417";
        contaMovimento = "508417";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MOURA")) {
        conta = "533642";
        contaMovimento = "533642";
    }
    if (nomeOrigem.contains("OLIVER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "845319";
        contaMovimento = "845319";
    }
    if (nomeOrigem.contains("DELLAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "508743";
        contaMovimento = "508743";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CEMTRAS")) {
        conta = "511024";
        contaMovimento = "511024";
    }
    if (nomeOrigem.contains("ELETROMAC") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "501548";
        contaMovimento = "501548";
    }
    if (tipoPlanilha.contains("EXTRATO") && complemento04.contains("RSHOP")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento01.contains("NF:000201985") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "741295";
        contaMovimento = "741295";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("KLAUDCOMP")) {
        conta = "508347";
        contaMovimento = "508347";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("0000000005472")) {
        conta = "53";
        contaMovimento = "53";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO")) {
        conta = "846173";
        contaMovimento = "846173";
    }
    if (nomeOrigem.contains("UBERLANDIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (complemento01.contains("CONTRIBUICAO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ASSOCIATIVA")) {
        conta = "4965";
        contaMovimento = "4965";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("BB") && nomeOrigem.contains("GIRO")) {
        conta = "1927";
        contaMovimento = "1927";
    }
    if (nomeOrigem.contains("EQUIPAMENT") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALFA")) {
        conta = "548178";
        contaMovimento = "548178";
    }
    if (nomeOrigem.contains("FERRAGISTA") && nomeOrigem.contains("SANDRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "511597";
        contaMovimento = "511597";
    }
    if (nomeOrigem.contains("PETROFIL") && nomeOrigem.contains("DISTRIBUIDORA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "858933";
        contaMovimento = "858933";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("UBERLANDIA") && nomeOrigem.contains("RDP")) {
        conta = "635401";
        contaMovimento = "635401";
    }
    if (nomeOrigem.contains("PREST CDC") && tipoPlanilha.contains("EXTRATO")) {
        conta = "5845";
        contaMovimento = "5845";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("LARCO") && nomeOrigem.contains("COMERCIAL")) {
        conta = "832958";
        contaMovimento = "832958";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMBALAGENS") && nomeOrigem.contains("ARPLAST")) {
        conta = "500673";
        contaMovimento = "500673";
    }
    if (complemento01.contains("ASERCO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ASERCO")) {
        conta = "500000";
        contaMovimento = "500000";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("AMBIENTAL") && nomeOrigem.contains("BIOETICA")) {
        conta = "543297";
        contaMovimento = "543297";
    }
    if (nomeOrigem.contains("CEMTRAS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CEMTRAS")) {
        conta = "511024";
        contaMovimento = "511024";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ELETROMAC") && complemento01.contains("ELETROMAC")) {
        conta = "501548";
        contaMovimento = "501548";
    }
    if (nomeOrigem.contains("MAFERCO") && nomeOrigem.contains("MADEIRAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "525524";
        contaMovimento = "525524";
    }
    if (nomeOrigem.contains("ATLAS") && nomeOrigem.contains("PAPELARIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "510127";
        contaMovimento = "510127";
    }
    if (nomeOrigem.contains("PAPELARIA") && nomeOrigem.contains("PIRAMIDE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "547901";
        contaMovimento = "547901";
    }
    if (nomeOrigem.contains("SERVITEC") && complemento03.contains("MANUTENCAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "559012";
        contaMovimento = "559012";
    }
    if (nomeOrigem.contains("IMPERMEABILIZANTES") && nomeOrigem.contains("ZAPI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "506572";
        contaMovimento = "506572";
    }
    if (complemento03.contains("MANUTENCAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALIANCA")) {
        conta = "761698";
        contaMovimento = "761698";
    }
    if (nomeOrigem.contains("ENVIO PIX") && tipoPlanilha.contains("EXTRATO")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (complemento03.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("GRF")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (complemento01.contains("NFE:") && complemento01.contains("052023") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (nomeOrigem.contains("TECNOLOGIA") && nomeOrigem.contains("CRISKAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "848691";
        contaMovimento = "848691";
    }
    if (nomeOrigem.contains("CRISTO") && nomeOrigem.contains("REI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "501684";
        contaMovimento = "501684";
    }
    if (nomeOrigem.contains("ENVIO TEV") && tipoPlanilha.contains("EXTRATO")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONECT") && nomeOrigem.contains("CYH")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SPR") && nomeOrigem.contains("AUTOMOTIVE")) {
        conta = "5193874";
        contaMovimento = "5193874";
    }
    if (complemento03.contains("ASSISTENCIAL") && complemento03.contains("CONTRIBUICAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4965";
        contaMovimento = "4965";
    }
    if (nomeOrigem.contains("PETROWORLD") && nomeOrigem.contains("COMBUSTIVEIS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5194230";
        contaMovimento = "5194230";
    }
    if (nomeOrigem.contains("SEMAPHORO UNIFORMES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "548185";
        contaMovimento = "548185";
    }
    if (nomeOrigem.contains("FERRAGISTA NOGUEIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "501496";
        contaMovimento = "501496";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MAGNUS") && nomeOrigem.contains("MADEIRAS")) {
        conta = "513533";
        contaMovimento = "513533";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ELETRO MAR")) {
        conta = "834437";
        contaMovimento = "834437";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VALFLUID") && nomeOrigem.contains("COM")) {
        conta = "506591";
        contaMovimento = "506591";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO UMUARAMA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MOVEIS ARAUJO")) {
        conta = "5196446";
        contaMovimento = "5196446";
    }
    if (nomeOrigem.contains("DISTRIBUIDORA MINEIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "857726";
        contaMovimento = "857726";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ZAPI IMPERMEABILIZQANTES")) {
        conta = "506572";
        contaMovimento = "506572";
    }
    if (nomeOrigem.contains("FACIL") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PJ") && nomeOrigem.contains("PACOTE")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (nomeOrigem.contains("PACOTE") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("DOC") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("EXTRATO") && complemento01.contains("UMUARAMA") && nomeOrigem.contains("MSM") && complemento04.contains("PIX")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (nomePortador.contains("0000000005472") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PREST") && nomeOrigem.contains("CDC")) {
        conta = "5845";
        contaMovimento = "5845";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DAS") && nomeOrigem.contains("IMPERIO") && nomeOrigem.contains("TINTAS")) {
        conta = "665987";
        contaMovimento = "665987";
    }
    if (nomeOrigem.contains("TAR") && nomeOrigem.contains("AGRUPADAS") && nomePortador.contains("148837") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DESPESA") && nomePortador.contains("148837") && nomeOrigem.contains("CARTORARIA")) {
        conta = "4555";
        contaMovimento = "4555";
    }
    if (nomeOrigem.contains("CEST") && nomePortador.contains("CEF") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DB")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PG ORG GOV")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("PROCES") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TAR") && nomeOrigem.contains("DEPOS")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && documento.contains("14") && nomeOrigem.contains("AZUL") && nomeOrigem.contains("BIT")) {
        conta = "861389";
        contaMovimento = "861389";
    }
    if (nomeOrigem.contains("CASA") && nomeOrigem.contains("BISA") && nomeOrigem.contains("DA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "524320";
        contaMovimento = "524320";
    }
    if (nomeOrigem.contains("LOGISTICA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONTRATA") && nomeOrigem.contains("TRANSPORTES")) {
        conta = "841564";
        contaMovimento = "841564";
    }
    if (nomeOrigem.contains("MATRIZ") && nomeOrigem.contains("MORAES") && nomeOrigem.contains("COSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "505268";
        contaMovimento = "505268";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("GAS") && nomeOrigem.contains("GAS") && nomeOrigem.contains("EXPRESSO")) {
        conta = "861390";
        contaMovimento = "861390";
    }
    if (nomeOrigem.contains("FELIX") && complemento03.contains("COMBUSTIVEL") && nomeOrigem.contains("DISTRIBUIDORA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "860376";
        contaMovimento = "860376";
    }
    if (nomeOrigem.contains("COMERCIO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OPCAO") && nomeOrigem.contains("PAPEIS")) {
        conta = "555438";
        contaMovimento = "555438";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SAARA") && nomeOrigem.contains("DISTRIBUIDORA") && complemento03.contains("COMBUSTIVEL")) {
        conta = "852924";
        contaMovimento = "852924";
    }
    if (nomeOrigem.contains("SADA") && complemento03.contains("COMBUSTIVEL") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMBUSTIVEIS")) {
        conta = "860590";
        contaMovimento = "860590";
    }
    if (nomeOrigem.contains("DEBITO PACOTE SERVICOS") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (nomeOrigem.contains("ELETRICA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MANOEL") && nomeOrigem.contains("SAO")) {
        conta = "549566";
        contaMovimento = "549566";
    }
    if (nomeOrigem.contains("UBERLANDIA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO") && nomeOrigem.contains("FERRAGISTA")) {
        conta = "518150";
        contaMovimento = "518150";
    }
    if (complemento03.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INMETRO") && complemento01.contains("INMETRO")) {
        conta = "10187";
        contaMovimento = "10187";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("-") && nomeOrigem.contains("UBERLANDIA") && nomeOrigem.contains("LOEL")) {
        conta = "508145";
        contaMovimento = "508145";
    }
    if (nomeOrigem.contains("UBERLANDIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MATRIZ") && complemento01.contains("UBERLANDIA")) {
        conta = "500489";
        contaMovimento = "500489";
    }
    if (complemento04.contains("IMPOSTOS") && nomeOrigem.contains("IMPOSTOS") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DARF")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("BLOQ.SALDO") && complemento04.contains("BLOQ") && complemento04.contains("SALDO")) {
        conta = "5442";
        contaMovimento = "5442";
    }
    if (nomeOrigem.contains("AZUL") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("MANUTENCAO") && nomeOrigem.contains("BIT")) {
        conta = "861389";
        contaMovimento = "861389";
    }
    if (nomeOrigem.contains("PETROTORQUE") && nomeOrigem.contains("JC") && nomeOrigem.contains("DISTRIB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5192540";
        contaMovimento = "5192540";
    }
    if (nomeOrigem.contains("RS") && nomeOrigem.contains("LOGISTICA") && nomeOrigem.contains("BOMBAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "859586";
        contaMovimento = "859586";
    }
    if (nomeOrigem.contains("DE") && nomeOrigem.contains("FILTROS") && nomeOrigem.contains("COMERCIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "854150";
        contaMovimento = "854150";
    }
    if (nomeOrigem.contains("COBRANCA DE I.O.F.") && tipoPlanilha.contains("EXTRATO")) {
        conta = "7602";
        contaMovimento = "7602";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && complemento03.contains("IMPOSTOS") && nomeOrigem.contains("UMUARAMA")) {
        conta = "1659";
        contaMovimento = "1659";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CASA DA BORRACHA")) {
        conta = "503049";
        contaMovimento = "503049";
    }
    if (complemento03.contains("USO") && nomeOrigem.contains("FERPEC") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("CONSUMO")) {
        conta = "5061177";
        contaMovimento = "5061177";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("COMPRA") && nomeOrigem.contains("COM") && nomeOrigem.contains("CARTAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("EQUIPAMENTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LEONE") && nomeOrigem.contains("AUTOMOTIVOS")) {
        conta = "548120";
        contaMovimento = "548120";
    }
    if (nomeOrigem.contains("WURTH DO BRASIL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "510302";
        contaMovimento = "510302";
    }
    if (complemento04.contains("1") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DISTRIBUIDORA MINEIRA")) {
        conta = "857726";
        contaMovimento = "857726";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("SERVICO DE TRANSPORTES")) {
        conta = "841564";
        contaMovimento = "841564";
    }
    if (nomeOrigem.contains("ALTO UMUARAMA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("PESSOAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("CHURRASCARIA PORTO ALEGRE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "563842";
        contaMovimento = "563842";
    }
    if (nomeOrigem.contains("DEBITO MAQUINA SAFRAPAY") && tipoPlanilha.contains("EXTRATO")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (nomeOrigem.contains("EDITORA E GRAFICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "843714";
        contaMovimento = "843714";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TAR") && nomeOrigem.contains("LIQUIDACAO") && complemento04.contains("TAR") && nomeOrigem.contains("CBR")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomePortador.contains("0000000005472") && nomeOrigem.contains("PJ") && nomeOrigem.contains("CEST") && nomeOrigem.contains("DB")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (complemento01.contains("SERVICO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MG") && nomeOrigem.contains("CREA") && complemento01.contains("PRESTACAO")) {
        conta = "5380";
        contaMovimento = "5380";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("PIX") && complemento04.contains("ENVIADO") && complemento04.contains("PIX") && nomeOrigem.contains("ENVIADO")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (nomeOrigem.contains("DE") && nomeOrigem.contains("EXTINTORES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ABC") && nomeOrigem.contains("MANUTENCAO")) {
        conta = "845770";
        contaMovimento = "845770";
    }
    if (complemento01.contains("PENSAO") && complemento01.contains("ALIMENTICIA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (nomeOrigem.contains("ANJOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DA") && nomeOrigem.contains("GUARDA") && complemento03.contains("MONITORAMENTO/VIGILANCIA")) {
        conta = "504360";
        contaMovimento = "504360";
    }
    if (complemento03.contains("MANUTENCAO") && nomeOrigem.contains("RAMOS") && nomeOrigem.contains("VIANA") && nomeOrigem.contains("DANIEL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "783821";
        contaMovimento = "783821";
    }
    if (nomeOrigem.contains("UBERLANDIA") && complemento01.contains("UBERLANDIA") && nomeOrigem.contains("FIC") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FILIAL")) {
        conta = "508299";
        contaMovimento = "508299";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PREFEITURA") && nomeOrigem.contains("UBERLANDIA") && nomeOrigem.contains("DE") && nomeOrigem.contains("MUNICIPAL")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (nomeOrigem.contains("LINK") && nomeOrigem.contains("DE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADMINISTRADORA") && nomeOrigem.contains("CARD")) {
        conta = "829412";
        contaMovimento = "829412";
    }
    if (nomeOrigem.contains("BRANCO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIST") && nomeOrigem.contains(".") && nomeOrigem.contains("RIO")) {
        conta = "505605";
        contaMovimento = "505605";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("12") && nomeOrigem.contains("AFONSO") && nomeOrigem.contains("PENA") && nomeOrigem.contains("CARIMBO")) {
        conta = "550078";
        contaMovimento = "550078";
    }
    if (nomeOrigem.contains("POSTUMOS") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("UNIVERSAL") && nomeOrigem.contains("PAZ") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "522864";
        contaMovimento = "522864";
    }
    if (nomeOrigem.contains("NO") && nomeOrigem.contains("SAQUE") && tipoPlanilha.contains("EXTRATO") && complemento04.contains("SAQUE") && nomeOrigem.contains("TAA")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (complemento04.contains("SISPAG") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("SISPAG") && nomeOrigem.contains("PAG") && complemento04.contains("PAG")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento01.contains("NFE:") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && complemento01.contains("072023")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (nomeOrigem.contains("TDC") && nomeOrigem.contains("DISTRIBUIDORA") && nomeOrigem.contains("DE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMBUSTIV")) {
        conta = "548735";
        contaMovimento = "548735";
    }
    if (nomeOrigem.contains("EFETIVADO") && nomeOrigem.contains("COMPE") && nomeOrigem.contains("TIT") && nomeOrigem.contains("DEB") && tipoPlanilha.contains("EXTRATO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("EDITORA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("E") && nomeOrigem.contains("GRAF") && complemento01.contains("UBERLANDIA")) {
        conta = "5193873";
        contaMovimento = "5193873";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ACO") && complemento01.contains("DE") && complemento01.contains("PORTAS") && complemento01.contains("UNIDAS")) {
        conta = "509261";
        contaMovimento = "509261";
    }
    if (nomeOrigem.contains("EDUARDO COURO E PLASTICO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "510287";
        contaMovimento = "510287";
    }
    if (nomeOrigem.contains("COMERCIO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PACALUB") && nomeOrigem.contains("E") && nomeOrigem.contains("LOGISTICA")) {
        conta = "848856";
        contaMovimento = "848856";
    }
    if (nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("INDUSTRIA") && nomeOrigem.contains("LUBRIFICANTES") && nomeOrigem.contains("MAX") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "848528";
        contaMovimento = "848528";
    }
    if (nomeOrigem.contains("TAR") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("TED") && nomeOrigem.contains("INTERNET") && complemento04.contains("TED") && complemento04.contains("INTERNET")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (nomePortador.contains("-") && nomePortador.contains("6") && nomeOrigem.contains("CBR") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("LIQUIDACAO") && nomePortador.contains("148837")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && complemento03.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DARF CONFINS")) {
        conta = "1552";
        contaMovimento = "1552";
    }
    if (complemento01.contains("DAM DA NF 463290") && complemento03.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1582";
        contaMovimento = "1582";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("IOF")) {
        conta = "7602";
        contaMovimento = "7602";
    }
    if (complemento04.contains("PJ") && nomeOrigem.contains("PACOTE") && nomeOrigem.contains("PJ") && nomeOrigem.contains("FACIL") && complemento04.contains("PACOTE") && complemento04.contains("FACIL") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (complemento04.contains("CERTA") && complemento04.contains("CONTA") && nomeOrigem.contains("TAR") && complemento04.contains("TAR") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("CONTA") && nomeOrigem.contains("CERTA")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (nomeOrigem.contains("RENDE") && tipoPlanilha.contains("EXTRATO") && complemento04.contains("FACIL") && complemento04.contains("RENDE") && complemento04.contains("BB") && nomeOrigem.contains("FACIL") && nomeOrigem.contains("BB")) {
        conta = "53";
        contaMovimento = "53";
    }
    if (nomeOrigem.contains("FGTS") && tipoPlanilha.contains("EXTRATO")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (nomeOrigem.contains("UMUARAMA") && complemento03.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DARF CONTRIBUICAO PREVIDENCIARIA") && nomeOrigem.contains("ALTO")) {
        conta = "1659";
        contaMovimento = "1659";
    }
    if (complemento01.contains("FGTS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ICMS")) {
        conta = "1542";
        contaMovimento = "1542";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("CONTRIBUICAO ASSISTENCIAL A RECOLHER") && complemento01.contains("CONTRIBUICAO PREVIDENCIARIA")) {
        conta = "1659";
        contaMovimento = "1659";
    }
    if (complemento01.contains("PENSAO FULHO DO DOUGLAS") && complemento03.contains("PENSAO ALIMENTICIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("RESCISAO")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CSLL")) {
        conta = "1553";
        contaMovimento = "1553";
    }
    if (complemento01.contains("IRPJ") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1545";
        contaMovimento = "1545";
    }
    if (nomeOrigem.contains("UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "505181";
        contaMovimento = "505181";
    }
    if (nomeOrigem.contains("DISTRIBUIDORA DE ELETRONICOS ROUTE 66 LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "508374";
        contaMovimento = "508374";
    }
    if (nomePortador.contains("CEF") && nomeOrigem.contains("APLICACAO") && tipoPlanilha.contains("EXTRATO")) {
        conta = "63";
        contaMovimento = "63";
    }
    if (nomeOrigem.contains("PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "852924";
        contaMovimento = "852924";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ENERGIA") && nomeOrigem.contains("FEDERAL")) {
        conta = "503116";
        contaMovimento = "503116";
    }
    if (complemento01.contains("RETIDO") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("ISSQN")) {
        conta = "1582";
        contaMovimento = "1582";
    }
    if (complemento01.contains("PENSAO DOS FILHOS DO WILSON") && complemento03.contains("PENSAO ALIMENTICIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (nomeOrigem.contains("PIX EMITIDO OUTRA IF - MESMA TIT.") && tipoPlanilha.contains("EXTRATO")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("REF NFS:357 - KUTY EXTINTORES") && nomeOrigem.contains("EXTINTORES") && nomeOrigem.contains("KUTY")) {
        conta = "851675";
        contaMovimento = "851675";
    }
    if (complemento01.contains("FUNCIONARIOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FOLHA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (complemento01.contains("MARCOS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("IRRF") && complemento01.contains("ANTONIO")) {
        conta = "1544";
        contaMovimento = "1544";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DEB") && nomeOrigem.contains("JUROS") && nomePortador.contains("CEF")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (nomeOrigem.contains("DISTRIBUICAO") && complemento01.contains("ENERGIA") && nomeOrigem.contains("CEMIG") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "500977";
        contaMovimento = "500977";
    }
    if (nomeOrigem.contains("DISTRIBUICAO") && complemento03.contains("ENERGIA") && nomeOrigem.contains("CEMIG") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "500977";
        contaMovimento = "500977";
    }
    if (complemento01.contains("DIFERENCA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DISSIDIO") && complemento01.contains("DE")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (complemento01.contains("FOLHA") && complemento01.contains("PAGAMENTO") && complemento01.contains("DE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (nomeOrigem.contains("IBAMA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TAXA IBAMA")) {
        conta = "10185";
        contaMovimento = "10185";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DARF  IRRF")) {
        conta = "1544";
        contaMovimento = "1544";
    }
    if (complemento01.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("CSRF") && complemento03.contains("IMPOSTOS")) {
        conta = "1580";
        contaMovimento = "1580";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("RESCISAO DOULAS SIQUEIRA")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("FGTS A RECOLHER")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (complemento04.contains("POS") && tipoPlanilha.contains("EXTRATO") && complemento04.contains("DEBITO") && complemento04.contains("ALUGUEL")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("COBRANCA") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("PACOTE")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (complemento01.contains("IPTU") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PREFEITURA") && nomeOrigem.contains("MUNICIPAL") && nomeOrigem.contains("DE")) {
        conta = "4668";
        contaMovimento = "4668";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && complemento01.contains("FERIAS") && complemento03.contains("PESSOAL")) {
        conta = "4333";
        contaMovimento = "4333";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && complemento01.contains("RESCISAO") && complemento01.contains("CONTRATUAL")) {
        conta = "4889";
        contaMovimento = "4889";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && complemento01.contains("RESCISAO") && complemento03.contains("PESSOAL")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("UMUARAMA") && complemento01.contains("DARF IRRF") && nomeOrigem.contains("ALTO")) {
        conta = "1544";
        contaMovimento = "1544";
    }
    if (nomeOrigem.contains("UMUARAMA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && complemento01.contains("GRF") && complemento01.contains("FGTS")) {
        conta = "5939";
        contaMovimento = "5939";
    }
    if (complemento01.contains("DARF PIS") && nomeOrigem.contains("UMUARAMA") && nomeOrigem.contains("ALTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1556";
        contaMovimento = "1556";
    }
    if (complemento01.contains("FGTS") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("RECOLHIMENTO")) {
        conta = "5939";
        contaMovimento = "5939";
    }
    if (nomeOrigem.contains("UMUARAMA") && complemento01.contains("FOLHA PAGAMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (complemento01.contains("DARF - CSLL") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("IMPOSTOS")) {
        conta = "1553";
        contaMovimento = "1553";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("SAMPAIO") && complemento01.contains("NATANAEL") && complemento01.contains("PAGTO") && complemento03.contains("RESCISAO")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (complemento03.contains("ICMS") && complemento03.contains("DE") && complemento03.contains("DIFERENCIAL") && complemento03.contains("ALIQUOTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5006";
        contaMovimento = "5006";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI")) {
        conta = "5380";
        contaMovimento = "5380";
    }
    if (nomeOrigem.contains("CARTORIO RTDPJ UBERLNDIA") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DESPESAS")) {
        conta = "4555";
        contaMovimento = "4555";
    }
    if (nomeOrigem.contains("DA") && nomePortador.contains("8928860009") && tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("LIMITE") && nomeOrigem.contains("JUROS") && nomeOrigem.contains("CONTA")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("VENCIMENTO CHEQUE ESPECIAL EMPRESARIAL:") && nomePortador.contains("SICOOB")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && complemento03.contains("IMPOSTOS") && complemento01.contains("DARF CSRF")) {
        conta = "1580";
        contaMovimento = "1580";
    }
    if (complemento01.contains("DARF IRPJ") && nomeOrigem.contains("UMUARAMA") && nomeOrigem.contains("ALTO") && complemento03.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1545";
        contaMovimento = "1545";
    }
    if (complemento03.contains("IMPOSTOS") && complemento01.contains("DARF CSLL") && nomeOrigem.contains("UMUARAMA") && nomeOrigem.contains("ALTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1553";
        contaMovimento = "1553";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (tipoPlanilha.contains("EXTRATO") && nomeOrigem.contains("DEBITO TAXA DE SERVICO IN")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (complemento01.contains("ICMS COMPLEMENTAR DE FRETE") && nomeOrigem.contains("ALTO") && nomeOrigem.contains("UMUARAMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1542";
        contaMovimento = "1542";
    }
    if (nomeOrigem.contains("PREFEITURA") && complemento01.contains("TAXA DE PUBLICIDADE") && nomeOrigem.contains("UBERLANDIA") && nomeOrigem.contains("MUNICIPAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (nomeOrigem.contains("TARIFA") && complemento04.contains("TARIFA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (complemento01.contains("TELEFONE") && complemento03.contains("TELEFONE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4478";
        contaMovimento = "4478";
    }
    if (nomeOrigem.contains("JUROS") && complemento04.contains("JUROS") && tipoPlanilha.contains("EXTRATO")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (complemento03.contains("FERIAS") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FERIAS")) {
        conta = "4333";
        contaMovimento = "4333";
    }
    if (nomeOrigem.contains("OURO") && nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("TARIFA") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (nomeOrigem.contains("DE") && nomeOrigem.contains("PREFEITURA") && nomeOrigem.contains("MUNICIPAL") && complemento03.contains("TAXA DE COLETA DE LIXO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (complemento01.contains("DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA")) {
        conta = "4555";
        contaMovimento = "4555";
    }
    if (tipoPlanilha.contains("EXTRATO") && complemento01.contains("0000000005472") && nomePortador.contains("0000000005472") && complemento04.contains("APLICACAO") && nomeOrigem.contains("APLICACAO")) {
        conta = "63";
        contaMovimento = "63";
    }
    if (complemento04.contains("MANUT") && complemento04.contains("TARIFA") && tipoPlanilha.contains("EXTRATO") && complemento04.contains("OURO") && complemento04.contains("CHEQUE")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("PAGAMENTO DECIMO TERCEIRO  PRIMEIRA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (nomeOrigem.contains("SEG") && nomeOrigem.contains("SEGURO") && nomeOrigem.contains("VIDA") && nomeOrigem.contains("EMPRESA") && nomeOrigem.contains("FLEX") && complemento04.contains("SEGURO") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4548";
        contaMovimento = "4548";
    }
    if (nomeOrigem.contains("JUROS") && nomePortador.contains("0000000005472") && complemento04.contains("JUROS") && complemento04.contains("DEB") && nomeOrigem.contains("DEB") && nomeOrigem.contains(".") && tipoPlanilha.contains("EXTRATO")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (tipoPlanilha.contains("EXTRATO") && complemento04.contains("FGTS") && nomePortador.contains("8928860009") && nomeOrigem.contains("GRF") && nomeOrigem.contains("-") && nomeOrigem.contains("FGTS") && nomeOrigem.contains("INT")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (nomeOrigem.contains("PACOTE") && nomeOrigem.contains("TARIFA") && nomePortador.contains("148837") && complemento04.contains("TARIFA") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("DE") && tipoPlanilha.contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (tipoPlanilha.contains("EXTRATO") && complemento04.contains("TAXA") && nomeOrigem.contains("DEBITO TAXA DE SERVICO OUT")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TOTAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TOTAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BYTEON") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "520428";
        contaMovimento = "520428";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUPRINT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "860973";
        contaMovimento = "860973";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIZEN") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "505585";
        contaMovimento = "505585";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINPOSPETRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "4965";
        contaMovimento = "4965";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTRANS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "4351";
        contaMovimento = "4351";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PG") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRINKS")) {
        conta = "522981";
        contaMovimento = "522981";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DMAE")) {
        conta = "4476";
        contaMovimento = "4476";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNALDO")) {
        conta = "612550";
        contaMovimento = "612550";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("META")) {
        conta = "508417";
        contaMovimento = "508417";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOURA")) {
        conta = "533642";
        contaMovimento = "533642";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVER")) {
        conta = "845319";
        contaMovimento = "845319";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAS")) {
        conta = "508743";
        contaMovimento = "508743";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS")) {
        conta = "511024";
        contaMovimento = "511024";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC")) {
        conta = "501548";
        contaMovimento = "501548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RSHOP")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NF:000201985")) {
        conta = "741295";
        contaMovimento = "741295";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KLAUDCOMP")) {
        conta = "508347";
        contaMovimento = "508347";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000005472")) {
        conta = "53";
        contaMovimento = "53";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "846173";
        contaMovimento = "846173";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST CDC") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "5845";
        contaMovimento = "5845";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TEV")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEMAPHORO UNIFORMES")) {
        conta = "548185";
        contaMovimento = "548185";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA NOGUEIRA")) {
        conta = "501496";
        contaMovimento = "501496";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PG ORG GOV") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRO MAR")) {
        conta = "834437";
        contaMovimento = "834437";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO PACOTE SERVICOS")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA DE I.O.F.")) {
        conta = "7602";
        contaMovimento = "7602";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DA BORRACHA")) {
        conta = "503049";
        contaMovimento = "503049";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "7602";
        contaMovimento = "7602";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WURTH DO BRASIL")) {
        conta = "510302";
        contaMovimento = "510302";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "852924";
        contaMovimento = "852924";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS")) {
        conta = "1542";
        contaMovimento = "1542";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO COURO E PLASTICO")) {
        conta = "510287";
        contaMovimento = "510287";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX EMITIDO OUTRA IF - MESMA TIT.")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL")) {
        conta = "1553";
        contaMovimento = "1553";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ")) {
        conta = "1545";
        contaMovimento = "1545";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  IRRF")) {
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT")) {
        conta = "505181";
        contaMovimento = "505181";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO DOULAS SIQUEIRA")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS A RECOLHER")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI")) {
        conta = "5380";
        contaMovimento = "5380";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA")) {
        conta = "4555";
        contaMovimento = "4555";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DECIMO TERCEIRO  PRIMEIRA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSOCIATIVA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "4965";
        contaMovimento = "4965";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "1927";
        contaMovimento = "1927";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "548178";
        contaMovimento = "548178";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANDRA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "511597";
        contaMovimento = "511597";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROFIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "858933";
        contaMovimento = "858933";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RDP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "635401";
        contaMovimento = "635401";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LARCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "832958";
        contaMovimento = "832958";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARPLAST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBALAGENS")) {
        conta = "500673";
        contaMovimento = "500673";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ASERCO")) {
        conta = "500000";
        contaMovimento = "500000";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOETICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMBIENTAL")) {
        conta = "543297";
        contaMovimento = "543297";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CEMTRAS")) {
        conta = "511024";
        contaMovimento = "511024";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ELETROMAC")) {
        conta = "501548";
        contaMovimento = "501548";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAFERCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS")) {
        conta = "525524";
        contaMovimento = "525524";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ATLAS")) {
        conta = "510127";
        contaMovimento = "510127";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIRAMIDE")) {
        conta = "547901";
        contaMovimento = "547901";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVITEC") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "559012";
        contaMovimento = "559012";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZAPI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERMEABILIZANTES")) {
        conta = "506572";
        contaMovimento = "506572";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANCA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "761698";
        contaMovimento = "761698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("052023")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISKAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA")) {
        conta = "848691";
        contaMovimento = "848691";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REI")) {
        conta = "501684";
        contaMovimento = "501684";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CYH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONECT")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SPR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVE")) {
        conta = "5193874";
        contaMovimento = "5193874";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSISTENCIAL")) {
        conta = "4965";
        contaMovimento = "4965";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROWORLD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS")) {
        conta = "5194230";
        contaMovimento = "5194230";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGNUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS")) {
        conta = "513533";
        contaMovimento = "513533";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALFLUID") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM")) {
        conta = "506591";
        contaMovimento = "506591";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA MINEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("1")) {
        conta = "857726";
        contaMovimento = "857726";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DAM DA NF 463290")) {
        conta = "1582";
        contaMovimento = "1582";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "63";
        contaMovimento = "63";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA")) {
        conta = "503116";
        contaMovimento = "503116";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO PREVIDENCIARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO ASSISTENCIAL A RECOLHER")) {
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO FULHO DO DOUGLAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RETIDO")) {
        conta = "1582";
        contaMovimento = "1582";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO DOS FILHOS DO WILSON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FUNCIONARIOS")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA IBAMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBAMA")) {
        conta = "10185";
        contaMovimento = "10185";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENCIMENTO CHEQUE ESPECIAL EMPRESARIAL:") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICOOB") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF - CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1553";
        contaMovimento = "1553";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TELEFONE")) {
        conta = "4478";
        contaMovimento = "4478";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JUROS")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO RTDPJ UBERLNDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DESPESAS")) {
        conta = "4555";
        contaMovimento = "4555";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FERIAS")) {
        conta = "4333";
        contaMovimento = "4333";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MSM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "5845";
        contaMovimento = "5845";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TINTAS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "665987";
        contaMovimento = "665987";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRUPADAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4555";
        contaMovimento = "4555";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROCES") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("14")) {
        conta = "861389";
        contaMovimento = "861389";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BISA")) {
        conta = "524320";
        contaMovimento = "524320";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "841564";
        contaMovimento = "841564";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ")) {
        conta = "505268";
        contaMovimento = "505268";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPRESSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS")) {
        conta = "861390";
        contaMovimento = "861390";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL")) {
        conta = "860376";
        contaMovimento = "860376";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPCAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPEIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO")) {
        conta = "555438";
        contaMovimento = "555438";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAARA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL")) {
        conta = "852924";
        contaMovimento = "852924";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL")) {
        conta = "860590";
        contaMovimento = "860590";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANOEL")) {
        conta = "549566";
        contaMovimento = "549566";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "518150";
        contaMovimento = "518150";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INMETRO")) {
        conta = "10187";
        contaMovimento = "10187";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "508145";
        contaMovimento = "508145";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "500489";
        contaMovimento = "500489";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.SALDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BLOQ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SALDO")) {
        conta = "5442";
        contaMovimento = "5442";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "861389";
        contaMovimento = "861389";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROTORQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIB")) {
        conta = "5192540";
        contaMovimento = "5192540";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOMBAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "859586";
        contaMovimento = "859586";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS")) {
        conta = "854150";
        contaMovimento = "854150";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERPEC") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONSUMO")) {
        conta = "5061177";
        contaMovimento = "5061177";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVOS")) {
        conta = "548120";
        contaMovimento = "548120";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MARCOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENERGIA")) {
        conta = "500977";
        contaMovimento = "500977";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA")) {
        conta = "500977";
        contaMovimento = "500977";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KUTY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("REF NFS:357 - KUTY EXTINTORES")) {
        conta = "851675";
        contaMovimento = "851675";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIFERENCA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OURO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA")) {
        conta = "1544";
        contaMovimento = "1544";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSRF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1580";
        contaMovimento = "1580";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF PIS")) {
        conta = "1556";
        contaMovimento = "1556";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA PAGAMENTO")) {
        conta = "1634";
        contaMovimento = "1634";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS COMPLEMENTAR DE FRETE")) {
        conta = "1542";
        contaMovimento = "1542";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRESTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MG") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "5380";
        contaMovimento = "5380";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIADO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INTERNET")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ABC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES")) {
        conta = "845770";
        contaMovimento = "845770";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA")) {
        conta = "1637";
        contaMovimento = "1637";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("6")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANJOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUARDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MONITORAMENTO/VIGILANCIA")) {
        conta = "504360";
        contaMovimento = "504360";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "783821";
        contaMovimento = "783821";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "508299";
        contaMovimento = "508299";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PJ")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CERTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONTA")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE")) {
        conta = "829412";
        contaMovimento = "829412";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO")) {
        conta = "505605";
        contaMovimento = "505605";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("12") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFONSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PENA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARIMBO")) {
        conta = "550078";
        contaMovimento = "550078";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIVERSAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTUMOS")) {
        conta = "522864";
        contaMovimento = "522864";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAG")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("072023")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TDC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIV")) {
        conta = "548735";
        contaMovimento = "548735";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1552";
        contaMovimento = "1552";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EFETIVADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDITORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA")) {
        conta = "5193873";
        contaMovimento = "5193873";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIDAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PORTAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ACO")) {
        conta = "509261";
        contaMovimento = "509261";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RENDE")) {
        conta = "53";
        contaMovimento = "53";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONTRIBUICAO PREVIDENCIARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1659";
        contaMovimento = "1659";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACALUB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "848856";
        contaMovimento = "848856";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMITE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8928860009")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IPTU") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "4668";
        contaMovimento = "4668";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL")) {
        conta = "4333";
        contaMovimento = "4333";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL")) {
        conta = "4889";
        contaMovimento = "4889";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "5939";
        contaMovimento = "5939";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RECOLHIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA")) {
        conta = "5939";
        contaMovimento = "5939";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "63";
        contaMovimento = "63";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEG")) {
        conta = "4548";
        contaMovimento = "4548";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DEB")) {
        conta = "9635";
        contaMovimento = "9635";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS")) {
        conta = "1660";
        contaMovimento = "1660";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA")) {
        conta = "4698";
        contaMovimento = "4698";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSRF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1580";
        contaMovimento = "1580";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRPJ") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1545";
        contaMovimento = "1545";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "1553";
        contaMovimento = "1553";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NATANAEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SAMPAIO")) {
        conta = "4984";
        contaMovimento = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA DE PUBLICIDADE")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXA DE COLETA DE LIXO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "4658";
        contaMovimento = "4658";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DIFERENCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALIQUOTA")) {
        conta = "5006";
        contaMovimento = "5006";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TOTAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TOTAL")) {
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("TOTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTOPAGGRUPOOPEL1', Complemento (06) contem 'TOTAL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TOTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (02) contem 'TOTAL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TOTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TOTAL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BYTEON") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'BYTEON', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '520428'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUPRINT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'DUPRINT', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '860973'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIZEN") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'RAIZEN', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '505585'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINPOSPETRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'SINPOSPETRO', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '4965'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTRANS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'UBERTRANS', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '4351'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PG") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PG', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4658'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'VR', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRINKS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BRINKS', CONTA MOVIMENTO SERA = '522981'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DMAE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DMAE', CONTA MOVIMENTO SERA = '4476'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNALDO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EDNALDO', CONTA MOVIMENTO SERA = '612550'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("META")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'META', CONTA MOVIMENTO SERA = '508417'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOURA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MOURA', CONTA MOVIMENTO SERA = '533642'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'OLIVER', CONTA MOVIMENTO SERA = '845319'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DELLAS', CONTA MOVIMENTO SERA = '508743'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TED', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CEMTRAS', CONTA MOVIMENTO SERA = '511024'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELETROMAC', CONTA MOVIMENTO SERA = '501548'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RSHOP")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Complemento (04) contem 'RSHOP', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NF:000201985")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'NF:000201985', CONTA MOVIMENTO SERA = '741295'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KLAUDCOMP")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'KLAUDCOMP', CONTA MOVIMENTO SERA = '508347'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000005472")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem '0000000005472', CONTA MOVIMENTO SERA = '53'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'MANUTENCAO', CONTA MOVIMENTO SERA = '846173'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST CDC") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PREST CDC', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '5845'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'ENVIO PIX', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TEV")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'ENVIO TEV', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEMAPHORO UNIFORMES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SEMAPHORO UNIFORMES', CONTA MOVIMENTO SERA = '548185'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA NOGUEIRA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FERRAGISTA NOGUEIRA', CONTA MOVIMENTO SERA = '501496'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PG ORG GOV") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PG ORG GOV', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRO MAR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELETRO MAR', CONTA MOVIMENTO SERA = '834437'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO PACOTE SERVICOS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DEBITO PACOTE SERVICOS', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA DE I.O.F.")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'COBRANCA DE I.O.F.', CONTA MOVIMENTO SERA = '7602'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DA BORRACHA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CASA DA BORRACHA', CONTA MOVIMENTO SERA = '503049'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'IOF', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '7602'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WURTH DO BRASIL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'WURTH DO BRASIL', CONTA MOVIMENTO SERA = '510302'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'FGTS', CONTA MOVIMENTO SERA = '1660'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '852924'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '1660'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ICMS', CONTA MOVIMENTO SERA = '1542'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO COURO E PLASTICO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EDUARDO COURO E PLASTICO', CONTA MOVIMENTO SERA = '510287'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'RESCISAO', CONTA MOVIMENTO SERA = '4984'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX EMITIDO OUTRA IF - MESMA TIT.")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PIX EMITIDO OUTRA IF - MESMA TIT.', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CSLL', CONTA MOVIMENTO SERA = '1553'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'IRPJ', CONTA MOVIMENTO SERA = '1545'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  IRRF")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF  IRRF', CONTA MOVIMENTO SERA = '1544'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT', CONTA MOVIMENTO SERA = '505181'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO DOULAS SIQUEIRA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'RESCISAO DOULAS SIQUEIRA', CONTA MOVIMENTO SERA = '4984'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS A RECOLHER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'FGTS A RECOLHER', CONTA MOVIMENTO SERA = '1660'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO', CONTA MOVIMENTO SERA = '1634'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI', CONTA MOVIMENTO SERA = '5380'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA', CONTA MOVIMENTO SERA = '4555'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DECIMO TERCEIRO  PRIMEIRA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PAGAMENTO DECIMO TERCEIRO  PRIMEIRA', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSOCIATIVA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (01) contem 'CONTRIBUICAO', Complemento (01) contem 'ASSOCIATIVA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '4965'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'BB', Fornecedor/Cliente contem 'GIRO', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '1927'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'ALFA', Fornecedor/Cliente contem 'EQUIPAMENT', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '548178'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANDRA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'FERRAGISTA', Fornecedor/Cliente contem 'SANDRA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '511597'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROFIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'PETROFIL', Fornecedor/Cliente contem 'DISTRIBUIDORA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '858933'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RDP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'RDP', Fornecedor/Cliente contem 'UBERLANDIA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '635401'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LARCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'LARCO', Fornecedor/Cliente contem 'COMERCIAL', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '832958'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARPLAST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBALAGENS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ARPLAST', Fornecedor/Cliente contem 'EMBALAGENS', CONTA MOVIMENTO SERA = '500673'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ASERCO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ASERCO', Complemento (01) contem 'ASERCO', CONTA MOVIMENTO SERA = '500000'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOETICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMBIENTAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BIOETICA', Fornecedor/Cliente contem 'AMBIENTAL', CONTA MOVIMENTO SERA = '543297'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CEMTRAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CEMTRAS', Complemento (01) contem 'CEMTRAS', CONTA MOVIMENTO SERA = '511024'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ELETROMAC")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELETROMAC', Complemento (01) contem 'ELETROMAC', CONTA MOVIMENTO SERA = '501548'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAFERCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MAFERCO', Fornecedor/Cliente contem 'MADEIRAS', CONTA MOVIMENTO SERA = '525524'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ATLAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PAPELARIA', Fornecedor/Cliente contem 'ATLAS', CONTA MOVIMENTO SERA = '510127'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIRAMIDE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PAPELARIA', Fornecedor/Cliente contem 'PIRAMIDE', CONTA MOVIMENTO SERA = '547901'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVITEC") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SERVITEC', Complemento (03) contem 'MANUTENCAO', CONTA MOVIMENTO SERA = '559012'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZAPI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERMEABILIZANTES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ZAPI', Fornecedor/Cliente contem 'IMPERMEABILIZANTES', CONTA MOVIMENTO SERA = '506572'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANCA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALIANCA', Complemento (03) contem 'MANUTENCAO', CONTA MOVIMENTO SERA = '761698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'GRF', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("052023")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'NFE:', Complemento (01) contem '052023', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISKAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CRISKAL', Fornecedor/Cliente contem 'TECNOLOGIA', CONTA MOVIMENTO SERA = '848691'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REI")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CRISTO', Fornecedor/Cliente contem 'REI', CONTA MOVIMENTO SERA = '501684'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CYH") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONECT")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CYH', Fornecedor/Cliente contem 'CONECT', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SPR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SPR', Fornecedor/Cliente contem 'AUTOMOTIVE', CONTA MOVIMENTO SERA = '5193874'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSISTENCIAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'CONTRIBUICAO', Complemento (03) contem 'ASSISTENCIAL', CONTA MOVIMENTO SERA = '4965'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROWORLD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PETROWORLD', Fornecedor/Cliente contem 'COMBUSTIVEIS', CONTA MOVIMENTO SERA = '5194230'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGNUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MAGNUS', Fornecedor/Cliente contem 'MADEIRAS', CONTA MOVIMENTO SERA = '513533'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALFLUID") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'VALFLUID', Fornecedor/Cliente contem 'COM', CONTA MOVIMENTO SERA = '506591'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA MINEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("1")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DISTRIBUIDORA MINEIRA', Complemento (04) contem '1', CONTA MOVIMENTO SERA = '857726'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DAM DA NF 463290")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'IMPOSTOS', Complemento (01) contem 'DAM DA NF 463290', CONTA MOVIMENTO SERA = '1582'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'APLICACAO', Portador contem 'CEF', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '63'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FEDERAL', Fornecedor/Cliente contem 'ENERGIA', CONTA MOVIMENTO SERA = '503116'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO PREVIDENCIARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO ASSISTENCIAL A RECOLHER")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'CONTRIBUICAO PREVIDENCIARIA', Complemento (03) contem 'CONTRIBUICAO ASSISTENCIAL A RECOLHER', CONTA MOVIMENTO SERA = '1659'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO FULHO DO DOUGLAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PENSAO FULHO DO DOUGLAS', Complemento (03) contem 'PENSAO ALIMENTICIA', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RETIDO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'ISSQN', Complemento (01) contem 'RETIDO', CONTA MOVIMENTO SERA = '1582'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO DOS FILHOS DO WILSON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'PENSAO DOS FILHOS DO WILSON', Complemento (03) contem 'PENSAO ALIMENTICIA', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FUNCIONARIOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FOLHA', Complemento (01) contem 'FUNCIONARIOS', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA IBAMA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBAMA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TAXA IBAMA', Fornecedor/Cliente contem 'IBAMA', CONTA MOVIMENTO SERA = '10185'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VENCIMENTO CHEQUE ESPECIAL EMPRESARIAL:") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICOOB") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'VENCIMENTO CHEQUE ESPECIAL EMPRESARIAL:', Portador contem 'SICOOB', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF - CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF - CSLL', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1553'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA', Complemento (04) contem 'TARIFA', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TELEFONE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'TELEFONE', Complemento (03) contem 'TELEFONE', CONTA MOVIMENTO SERA = '4478'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("JUROS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'JUROS', Complemento (04) contem 'JUROS', CONTA MOVIMENTO SERA = '9635'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO RTDPJ UBERLNDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DESPESAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CARTORIO RTDPJ UBERLNDIA', Complemento (03) contem 'DESPESAS', CONTA MOVIMENTO SERA = '4555'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FERIAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FERIAS', Complemento (03) contem 'FERIAS', CONTA MOVIMENTO SERA = '4333'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PACOTE', Fornecedor/Cliente contem 'PJ', Fornecedor/Cliente contem 'FACIL', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PACOTE', Fornecedor/Cliente contem 'SERVICOS', Fornecedor/Cliente contem 'DOC', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MSM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Complemento (04) contem 'PIX', Fornecedor/Cliente contem 'MSM', Complemento (01) contem 'UMUARAMA', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PREST', Fornecedor/Cliente contem 'CDC', Portador contem '0000000005472', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '5845'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TINTAS") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'IMPERIO', Fornecedor/Cliente contem 'DAS', Fornecedor/Cliente contem 'TINTAS', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '665987'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRUPADAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'TAR', Fornecedor/Cliente contem 'AGRUPADAS', Portador contem '148837', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORARIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'DESPESA', Fornecedor/Cliente contem 'CARTORARIA', Portador contem '148837', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4555'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'DB', Fornecedor/Cliente contem 'CEST', Portador contem 'CEF', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROCES") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'TAR', Fornecedor/Cliente contem 'DEPOS', Fornecedor/Cliente contem 'PROCES', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("14")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BIT', Fornecedor/Cliente contem 'AZUL', Documento/NF contem '14', CONTA MOVIMENTO SERA = '861389'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BISA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CASA', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'BISA', CONTA MOVIMENTO SERA = '524320'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CONTRATA', Fornecedor/Cliente contem 'TRANSPORTES', Fornecedor/Cliente contem 'LOGISTICA', CONTA MOVIMENTO SERA = '841564'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'COSTA', Fornecedor/Cliente contem 'MORAES', Fornecedor/Cliente contem 'MATRIZ', CONTA MOVIMENTO SERA = '505268'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'IMPOSTOS', Fornecedor/Cliente contem 'DARF', Complemento (04) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'IMPOSTOS', Fornecedor/Cliente contem 'DARF', Complemento (04) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'IMPOSTOS', Fornecedor/Cliente contem 'DARF', Complemento (04) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPRESSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EXPRESSO', Fornecedor/Cliente contem 'GAS', Complemento (01) contem 'GAS', CONTA MOVIMENTO SERA = '861390'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FELIX', Fornecedor/Cliente contem 'DISTRIBUIDORA', Complemento (03) contem 'COMBUSTIVEL', CONTA MOVIMENTO SERA = '860376'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPCAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPEIS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'OPCAO', Fornecedor/Cliente contem 'PAPEIS', Fornecedor/Cliente contem 'COMERCIO', CONTA MOVIMENTO SERA = '555438'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAARA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SAARA', Fornecedor/Cliente contem 'DISTRIBUIDORA', Complemento (03) contem 'COMBUSTIVEL', CONTA MOVIMENTO SERA = '852924'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SADA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SADA', Fornecedor/Cliente contem 'COMBUSTIVEIS', Complemento (03) contem 'COMBUSTIVEL', CONTA MOVIMENTO SERA = '860590'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANOEL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELETRICA', Fornecedor/Cliente contem 'SAO', Fornecedor/Cliente contem 'MANOEL', CONTA MOVIMENTO SERA = '549566'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FERRAGISTA', Fornecedor/Cliente contem 'UBERLANDIA', Complemento (03) contem 'MANUTENCAO', CONTA MOVIMENTO SERA = '518150'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INMETRO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'IMPOSTOS', Fornecedor/Cliente contem 'INMETRO', Complemento (01) contem 'INMETRO', CONTA MOVIMENTO SERA = '10187'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'LOEL', Fornecedor/Cliente contem '-', Fornecedor/Cliente contem 'UBERLANDIA', CONTA MOVIMENTO SERA = '508145'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'UBERLANDIA', Fornecedor/Cliente contem 'MATRIZ', Fornecedor/Cliente contem 'UBERLANDIA', CONTA MOVIMENTO SERA = '500489'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.SALDO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BLOQ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'BLOQ.SALDO', Complemento (04) contem 'BLOQ', Complemento (04) contem 'SALDO', CONTA MOVIMENTO SERA = '5442'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BIT', Fornecedor/Cliente contem 'AZUL', Complemento (03) contem 'MANUTENCAO', CONTA MOVIMENTO SERA = '861389'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROTORQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIB")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PETROTORQUE', Fornecedor/Cliente contem 'JC', Fornecedor/Cliente contem 'DISTRIB', CONTA MOVIMENTO SERA = '5192540'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOMBAS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'RS', Fornecedor/Cliente contem 'BOMBAS', Fornecedor/Cliente contem 'LOGISTICA', CONTA MOVIMENTO SERA = '859586'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DE', Fornecedor/Cliente contem 'COMERCIO', Fornecedor/Cliente contem 'FILTROS', CONTA MOVIMENTO SERA = '854150'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1659'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERPEC") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONSUMO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FERPEC', Complemento (03) contem 'USO', Complemento (03) contem 'CONSUMO', CONTA MOVIMENTO SERA = '5061177'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'COMPRA', Fornecedor/Cliente contem 'COM', Fornecedor/Cliente contem 'CARTAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'LEONE', Fornecedor/Cliente contem 'EQUIPAMENTOS', Fornecedor/Cliente contem 'AUTOMOTIVOS', CONTA MOVIMENTO SERA = '548120'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MARCOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ANTONIO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (01) contem 'IRRF', Complemento (01) contem 'MARCOS', Complemento (01) contem 'ANTONIO', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '1544'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'DEB', Fornecedor/Cliente contem 'JUROS', Portador contem 'CEF', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '9635'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENERGIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CEMIG', Fornecedor/Cliente contem 'DISTRIBUICAO', Complemento (01) contem 'ENERGIA', CONTA MOVIMENTO SERA = '500977'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CEMIG', Fornecedor/Cliente contem 'DISTRIBUICAO', Complemento (03) contem 'ENERGIA', CONTA MOVIMENTO SERA = '500977'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KUTY") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("REF NFS:357 - KUTY EXTINTORES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'KUTY', Fornecedor/Cliente contem 'EXTINTORES', Complemento (01) contem 'REF NFS:357 - KUTY EXTINTORES', CONTA MOVIMENTO SERA = '851675'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIFERENCA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DIFERENCA', Complemento (01) contem 'DE', Complemento (01) contem 'DISSIDIO', CONTA MOVIMENTO SERA = '1634'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'FOLHA', Complemento (01) contem 'DE', Complemento (01) contem 'PAGAMENTO', CONTA MOVIMENTO SERA = '1634'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OURO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA', Fornecedor/Cliente contem 'CHEQUE', Fornecedor/Cliente contem 'OURO', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF IRRF', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', CONTA MOVIMENTO SERA = '1544'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSRF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DARF', Complemento (01) contem 'CSRF', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1580'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF PIS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'DARF PIS', CONTA MOVIMENTO SERA = '1556'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA PAGAMENTO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'FOLHA PAGAMENTO', CONTA MOVIMENTO SERA = '1634'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS COMPLEMENTAR DE FRETE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'ICMS COMPLEMENTAR DE FRETE', CONTA MOVIMENTO SERA = '1542'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Complemento (04) contem 'TAR', Fornecedor/Cliente contem 'CBR', Fornecedor/Cliente contem 'LIQUIDACAO', Fornecedor/Cliente contem 'TAR', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'DB', Fornecedor/Cliente contem 'CEST', Fornecedor/Cliente contem 'PJ', Portador contem '0000000005472', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRESTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MG") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (01) contem 'PRESTACAO', Complemento (01) contem 'SERVICO', Fornecedor/Cliente contem 'CREA', Fornecedor/Cliente contem 'MG', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '5380'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIADO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'PIX', Fornecedor/Cliente contem 'ENVIADO', Complemento (04) contem 'PIX', Complemento (04) contem 'ENVIADO', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '11'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("INTERNET")) {
        conta = "Quando Fornecedor/Cliente contem 'TAR', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem 'INTERNET', Complemento (04) contem 'TED', Complemento (04) contem 'INTERNET', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ABC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ABC', Fornecedor/Cliente contem 'MANUTENCAO', Fornecedor/Cliente contem 'DE', Fornecedor/Cliente contem 'EXTINTORES', CONTA MOVIMENTO SERA = '845770'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'PENSAO', Complemento (01) contem 'ALIMENTICIA', CONTA MOVIMENTO SERA = '1637'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("6")) {
        conta = "Quando Fornecedor/Cliente contem 'CBR', Fornecedor/Cliente contem 'LIQUIDACAO', Portador contem '148837', Portador contem '-', Portador contem '6', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANJOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUARDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MONITORAMENTO/VIGILANCIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ANJOS', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'GUARDA', Complemento (03) contem 'MONITORAMENTO/VIGILANCIA', CONTA MOVIMENTO SERA = '504360'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DANIEL', Fornecedor/Cliente contem 'VIANA', Fornecedor/Cliente contem 'RAMOS', Complemento (03) contem 'MANUTENCAO', CONTA MOVIMENTO SERA = '783821'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILIAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'UBERLANDIA', Fornecedor/Cliente contem 'FIC', Fornecedor/Cliente contem 'FILIAL', Fornecedor/Cliente contem 'UBERLANDIA', CONTA MOVIMENTO SERA = '508299'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PREFEITURA', Fornecedor/Cliente contem 'MUNICIPAL', Fornecedor/Cliente contem 'DE', Fornecedor/Cliente contem 'UBERLANDIA', CONTA MOVIMENTO SERA = '4658'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PJ")) {
        conta = "Quando Fornecedor/Cliente contem 'PACOTE', Fornecedor/Cliente contem 'PJ', Fornecedor/Cliente contem 'FACIL', Complemento (04) contem 'PACOTE', Complemento (04) contem 'PJ', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SAQUE', Fornecedor/Cliente contem 'NO', Fornecedor/Cliente contem 'TAA', Complemento (04) contem 'SAQUE', CONTA MOVIMENTO SERA = '5'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SAQUE', Fornecedor/Cliente contem 'NO', Fornecedor/Cliente contem 'TAA', Complemento (04) contem 'SAQUE', CONTA MOVIMENTO SERA = '5'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CERTA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CONTA")) {
        conta = "Quando Fornecedor/Cliente contem 'TAR', Fornecedor/Cliente contem 'CONTA', Fornecedor/Cliente contem 'CERTA', Complemento (04) contem 'TAR', Complemento (04) contem 'CONTA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINK") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARD") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRADORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'LINK', Fornecedor/Cliente contem 'CARD', Fornecedor/Cliente contem 'ADMINISTRADORA', Fornecedor/Cliente contem 'DE', CONTA MOVIMENTO SERA = '829412'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'DIST', Fornecedor/Cliente contem '.', Fornecedor/Cliente contem 'RIO', Fornecedor/Cliente contem 'BRANCO', CONTA MOVIMENTO SERA = '505605'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("12") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFONSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PENA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARIMBO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (02) contem '12', Fornecedor/Cliente contem 'AFONSO', Fornecedor/Cliente contem 'PENA', Fornecedor/Cliente contem 'CARIMBO', CONTA MOVIMENTO SERA = '550078'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIVERSAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTUMOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PAZ', Fornecedor/Cliente contem 'UNIVERSAL', Fornecedor/Cliente contem 'SERVICOS', Fornecedor/Cliente contem 'POSTUMOS', CONTA MOVIMENTO SERA = '522864'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("PAG")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'PAG', Complemento (04) contem 'SISPAG', Complemento (04) contem 'PAG', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("072023")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'NFE:', Complemento (01) contem '072023', CONTA MOVIMENTO SERA = '5784'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TDC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIV")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TDC', Fornecedor/Cliente contem 'DISTRIBUIDORA', Fornecedor/Cliente contem 'DE', Fornecedor/Cliente contem 'COMBUSTIV', CONTA MOVIMENTO SERA = '548735'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'DARF CONFINS', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1552'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EFETIVADO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DEB', Fornecedor/Cliente contem 'TIT', Fornecedor/Cliente contem 'COMPE', Fornecedor/Cliente contem 'EFETIVADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDITORA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'EDITORA', Fornecedor/Cliente contem 'E', Fornecedor/Cliente contem 'GRAF', Complemento (01) contem 'UBERLANDIA', CONTA MOVIMENTO SERA = '5193873'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIDAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PORTAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ACO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'UNIDAS', Complemento (01) contem 'PORTAS', Complemento (01) contem 'DE', Complemento (01) contem 'ACO', CONTA MOVIMENTO SERA = '509261'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("BB") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RENDE")) {
        conta = "Quando Fornecedor/Cliente contem 'BB', Fornecedor/Cliente contem 'RENDE', Fornecedor/Cliente contem 'FACIL', Complemento (04) contem 'BB', Complemento (04) contem 'RENDE', CONTA MOVIMENTO SERA = '53'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONTRIBUICAO PREVIDENCIARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'DARF CONTRIBUICAO PREVIDENCIARIA', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1659'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA', Fornecedor/Cliente contem 'PACOTE', Fornecedor/Cliente contem 'SERVICOS', Fornecedor/Cliente contem 'COBRANCA', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACALUB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PACALUB', Fornecedor/Cliente contem 'COMERCIO', Fornecedor/Cliente contem 'E', Fornecedor/Cliente contem 'LOGISTICA', CONTA MOVIMENTO SERA = '848856'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMITE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8928860009")) {
        conta = "Quando Fornecedor/Cliente contem 'JUROS', Fornecedor/Cliente contem 'LIMITE', Fornecedor/Cliente contem 'DA', Fornecedor/Cliente contem 'CONTA', Portador contem '8928860009', CONTA MOVIMENTO SERA = '9635'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IPTU") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'PREFEITURA', Fornecedor/Cliente contem 'MUNICIPAL', Fornecedor/Cliente contem 'DE', Complemento (01) contem 'IPTU', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '4668'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'FERIAS', Complemento (03) contem 'PESSOAL', CONTA MOVIMENTO SERA = '4333'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'RESCISAO', Complemento (01) contem 'CONTRATUAL', CONTA MOVIMENTO SERA = '4889'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'RESCISAO', Complemento (03) contem 'PESSOAL', CONTA MOVIMENTO SERA = '4984'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'GRF', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '5939'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RECOLHIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'RECOLHIMENTO', Complemento (01) contem 'FGTS', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', CONTA MOVIMENTO SERA = '5939'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO")) {
        conta = "Quando Complemento (04) contem 'APLICACAO', Fornecedor/Cliente contem 'APLICACAO', Portador contem '0000000005472', Complemento (01) contem '0000000005472', Tipo Planilha contem 'EXTRATO', CONTA MOVIMENTO SERA = '63'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEG")) {
        conta = "Quando Fornecedor/Cliente contem 'SEGURO', Fornecedor/Cliente contem 'VIDA', Fornecedor/Cliente contem 'EMPRESA', Fornecedor/Cliente contem 'FLEX', Fornecedor/Cliente contem 'SEG', CONTA MOVIMENTO SERA = '4548'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("DEB")) {
        conta = "Quando Fornecedor/Cliente contem 'DEB', Fornecedor/Cliente contem '.', Fornecedor/Cliente contem 'JUROS', Portador contem '0000000005472', Complemento (04) contem 'DEB', CONTA MOVIMENTO SERA = '9635'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRF") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS")) {
        conta = "Quando Fornecedor/Cliente contem 'INT', Fornecedor/Cliente contem 'FGTS', Fornecedor/Cliente contem '-', Fornecedor/Cliente contem 'GRF', Complemento (04) contem 'FGTS', CONTA MOVIMENTO SERA = '1660'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA', Fornecedor/Cliente contem 'PACOTE', Fornecedor/Cliente contem 'DE', Fornecedor/Cliente contem 'SERVICOS', Complemento (04) contem 'TARIFA', CONTA MOVIMENTO SERA = '4698'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSRF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'DARF CSRF', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1580'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRPJ") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'DARF IRPJ', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1545'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSLL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALTO', Fornecedor/Cliente contem 'UMUARAMA', Complemento (01) contem 'DARF CSLL', Complemento (03) contem 'IMPOSTOS', CONTA MOVIMENTO SERA = '1553'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RESCISAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("NATANAEL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SAMPAIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'RESCISAO', Complemento (01) contem 'PAGTO', Complemento (01) contem 'NATANAEL', Complemento (01) contem 'SAMPAIO', CONTA MOVIMENTO SERA = '4984'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA DE PUBLICIDADE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'PREFEITURA', Fornecedor/Cliente contem 'MUNICIPAL', Fornecedor/Cliente contem 'UBERLANDIA', Complemento (01) contem 'TAXA DE PUBLICIDADE', CONTA MOVIMENTO SERA = '4658'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXA DE COLETA DE LIXO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'PREFEITURA', Fornecedor/Cliente contem 'MUNICIPAL', Fornecedor/Cliente contem 'DE', Complemento (03) contem 'TAXA DE COLETA DE LIXO', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '4658'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ICMS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DIFERENCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ALIQUOTA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (03) contem 'ICMS', Complemento (03) contem 'DIFERENCIAL', Complemento (03) contem 'DE', Complemento (03) contem 'ALIQUOTA', CONTA MOVIMENTO SERA = '5006'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (nomePortador.contains("BRASIL")) {
        conta = "10";
        contaMovimento = "10";
    }
    if (nomePortador.contains("CAIXA(POSTO)")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (nomePortador.contains("0000000005472")) {
        conta = "20";
        contaMovimento = "20";
    }
    if (nomePortador.contains("CAIXA(POSTO)")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (nomePortador.contains("17347-9")) {
        conta = "9765";
        contaMovimento = "9765";
    }
    if (nomePortador.contains("SICOOB")) {
        conta = "9765";
        contaMovimento = "9765";
    }
    if (nomePortador.contains("BANCO ITAU")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (nomePortador.contains("BANCO ITAU")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (nomePortador.contains("BANCO ITAU")) {
        conta = "11";
        contaMovimento = "11";
    }
    if (nomePortador.contains("EM BRANCO")) {
        conta = "5784";
        contaMovimento = "5784";
    }
    if (nomePortador.contains("CAIXA ECONOMICA FEDERAL")) {
        conta = "20";
        contaMovimento = "20";
    }
    if (nomePortador.contains("CEF - 3274")) {
        conta = "20";
        contaMovimento = "20";
    }
    if (nomePortador.contains("BANCO DO BRASIL")) {
        conta = "10";
        contaMovimento = "10";
    }
    if (nomePortador.contains("CAIXA ECONOMICA FEDERAL")) {
        conta = "20";
        contaMovimento = "20";
    }
    if (nomePortador.contains("01315825756")) {
        conta = "14";
        contaMovimento = "14";
    }
    if (nomePortador.contains("SICOOB-PDF - CONTA: 17.347-9 / ALTO UMUARAMA COMBUSTIVEIS LTDA")) {
        conta = "9765";
        contaMovimento = "9765";
    }
    if (nomePortador.contains("SICOOB-PDF - CONTA: 17.347-9 / ALTO UMUARAMA COMBUSTIVEIS LTDA")) {
        conta = "9765";
        contaMovimento = "9765";
    }
    if (nomePortador.contains("SICOOB-PDF - CONTA: 17.347-9 / ALTO UMUARAMA COMBUSTIVEIS LTDA")) {
        conta = "9765";
        contaMovimento = "9765";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("BRASIL")) {
        conta = "10";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("CAIXA(POSTO)")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472")) {
        conta = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("CAIXA(POSTO)")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("17347-9")) {
        conta = "9765";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICOOB")) {
        conta = "9765";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO ITAU")) {
        conta = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO ITAU")) {
        conta = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO ITAU")) {
        conta = "11";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("EM BRANCO")) {
        conta = "5784";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("CAIXA ECONOMICA FEDERAL")) {
        conta = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF - 3274")) {
        conta = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO BRASIL")) {
        conta = "10";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("CAIXA ECONOMICA FEDERAL")) {
        conta = "20";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("01315825756")) {
        conta = "14";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICOOB-PDF - CONTA: 17.347-9 / ALTO UMUARAMA COMBUSTIVEIS LTDA")) {
        conta = "9765";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICOOB-PDF - CONTA: 17.347-9 / ALTO UMUARAMA COMBUSTIVEIS LTDA")) {
        conta = "9765";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SICOOB-PDF - CONTA: 17.347-9 / ALTO UMUARAMA COMBUSTIVEIS LTDA")) {
        conta = "9765";
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTOPAGGRUPOOPEL1") &&
        StringUtil.removeSpecialCharsToUC(line).contains("PENDENCIA BANCARIA:")) {
        tratarIgnoraLinha = true;
    }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4698-INATIVO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4698-INATIVO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XPTOFORNECEDORES"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUPRINT") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINPOSPETRO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:279";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIZEN") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BYTEON") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTRANS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST CDC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PG") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:231";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED ENVIADA DE MESMA TIT") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TED"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:12";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNALDO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRINKS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("META"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOURA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVER"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DMAE"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TED"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO PACOTE SERVICOS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("14"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:12";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAS"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:19";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  IRRF"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:254";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:232";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX EMITIDO OUTRA IF - MESMA TIT."))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO COURO E PLASTICO"))  historico = "" + " " + documento + " " + "|" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA DE I.O.F."))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO DOULAS SIQUEIRA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TEV"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO DOULAS SIQUEIRA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TEV"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NF:000201985"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KLAUDCOMP"))  historico = "" + " " + complemento01 + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO IN"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO OUT"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS A RECOLHER"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:12";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DA BORRACHA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEMAPHORO UNIFORMES"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000005472"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:16";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WURTH DO BRASIL"))  historico = "" + " " + complemento01 + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:92";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:91";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA NOGUEIRA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRO MAR"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICO DE TRANSPORTES"))  historico = "" + " " + documento + " " + "|" + " " + complemento03 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA DE ELETRONICOS ROUTE 66 LTDA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHURRASCARIA PORTO ALEGRE"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOVEIS ARAUJO"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA MINEIRA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZAPI IMPERMEABILIZQANTES"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO MAQUINA SAFRAPAY"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO IN"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDITORA E GRAFICA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8928860009") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSOCIATIVA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + nomeOrigem + " " + "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VR") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANDRA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RDP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENT") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROFIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:16";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LARCO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVITEC") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARPLAST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBALAGENS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ASERCO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOETICA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMBIENTAL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CEMTRAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAFERCO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ELETROMAC"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ATLAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIRAMIDE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZAPI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERMEABILIZANTES"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANCA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA IBAMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBAMA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:231";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RETIDO"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + documento + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:14";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TELEFONE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("JUROS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO FULHO DO DOUGLAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO DOS FILHOS DO WILSON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO PREVIDENCIARIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO ASSISTENCIAL A RECOLHER"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:13";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") && StringUtil.removeSpecialCharsToUC(complemento01).contains("052023"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF - CSLL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:91";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:13";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISKAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REI"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REI"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DAM DA NF 463290"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:14";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CYH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONECT"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SPR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVE"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSISTENCIAL"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:91";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROWORLD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGNUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALFLUID") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO RTDPJ UBERLNDIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DESPESAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA MINEIRA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("1"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FERIAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1039";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO OUT") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TAXA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8928860009") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("01315825756") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MSM") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OURO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MARCOS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + "" + " " + complemento02 + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:0";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDC") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TINTAS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRUPADAS") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESPESA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORARIA") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TED") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO TED") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROCES") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRRF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:254";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") && StringUtil.removeSpecialCharsToUC(documento).contains("14"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ENERGIA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:6";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:6";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS COMPLEMENTAR DE FRETE"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:19";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA PAGAMENTO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:232";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BISA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPRESSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPCAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPEIS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF PIS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANOEL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DIFERENCA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:232";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:232";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INMETRO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.SALDO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("BLOQ") && StringUtil.removeSpecialCharsToUC(complemento04).contains("SALDO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOMBAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROTORQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIB"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "5952"  + " " + "|" + " " + mesAnoAnterior + " " + "" + " " + documento + " " + ""  + " " + "" + "  CodigoHistorico:185";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "5952"  + " " + "|" + " " + mesAnoAnterior + " " + "" + " " + documento + " " + ""  + " " + "" + "  CodigoHistorico:185";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "5952"  + " " + "|" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:185";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KUTY") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("REF NFS:357 - KUTY EXTINTORES"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERPEC") && StringUtil.removeSpecialCharsToUC(complemento03).contains("USO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CONSUMO"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVOS"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(complemento04).contains("POS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMITE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("8928860009"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CERTA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CONTA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") && StringUtil.removeSpecialCharsToUC(complemento04).contains("INTERNET"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLEX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEG"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") && StringUtil.removeSpecialCharsToUC(complemento04).contains("BB") && StringUtil.removeSpecialCharsToUC(complemento04).contains("RENDE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:16";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("6ALTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(complemento01).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:16";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("-") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("6"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(complemento04).contains("DEB"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:12";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IPTU") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:231";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXA DE COLETA DE LIXO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento03 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:231";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRESTACAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MG") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:9";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1039";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRPJ") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:92";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:271";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ABC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:185";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + complemento01 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONFINS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:11";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:231";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSLL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:91";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RECOLHIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:271";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONTRIBUICAO PREVIDENCIARIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:13";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANJOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUARDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MONITORAMENTO/VIGILANCIA"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA DE PUBLICIDADE"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:231";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:0";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ELETR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED TRANSF.ELETR.DISPONIV - 341 8928 004748235000117 ALTO UMUARAMA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:51";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINK") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NATANAEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SAMPAIO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("12") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFONSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PENA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARIMBO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIVERSAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTUMOS"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NATANAEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SAMPAIO"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1040";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("12") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFONSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PENA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARIMBO"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIVERSAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTUMOS"))  historico = "" + " " + documento + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:192";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TDC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIV"))  historico = "" + " " + complemento01 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") && StringUtil.removeSpecialCharsToUC(complemento01).contains("072023"))  historico = "" + " " + complemento01 + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10007";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDITORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PORTAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ACO"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ICMS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DIFERENCIAL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ALIQUOTA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:19";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACALUB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUBRIFICANTES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:7";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CHEQUE") && StringUtil.removeSpecialCharsToUC(complemento04).contains("OURO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("MANUT"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1311";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4698-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4698-INATIVO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4698-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4698-INATIVO, HISTORICO = Fornecedor/Cliente";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XPTOFORNECEDORES"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem XPTOFORNECEDORES, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem IOF, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUPRINT") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DUPRINT, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINPOSPETRO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem SINPOSPETRO, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIZEN") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem RAIZEN, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BYTEON") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem BYTEON, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTRANS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem UBERTRANS, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ENVIO PIX, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST CDC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PREST CDC, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PG") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PG, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED ENVIADA DE MESMA TIT") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TED ENVIADA DE MESMA TIT, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PAGAMENTO DE BOLETO - DISTR.COMBUSTIVEIS SAARA LTDA, Tipo Planilha contem EXTRATO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TED"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIO TED, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem FGTS, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNALDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDNALDO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRINKS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BRINKS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("META"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem META, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MOURA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OLIVER, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DMAE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DMAE, HISTORICO = Mes-Ano Anterior Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TED"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIO TED, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO PACOTE SERVICOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO PACOTE SERVICOS, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("14"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (02) contem 14, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FGTS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DELLAS, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ICMS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TED, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIO PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF  IRRF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF IRRF, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PAGAMENTO DISSIDIO NOVEMBRO E DEZEMBRO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DISSIDIO DO MES 12/2022 - PENSAO DO DOUGLAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DISSIDIO DO MES 11/2022 - PENSAO DO DOUGLAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CEMTRAS, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELETROMAC, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX EMITIDO OUTRA IF - MESMA TIT."))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX EMITIDO OUTRA IF - MESMA TIT., HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO COURO E PLASTICO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDUARDO COURO E PLASTICO, HISTORICO = Documento/NF | Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA DE I.O.F."))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem COBRANCA DE I.O.F., HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO DOULAS SIQUEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RESCISAO DOULAS SIQUEIRA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TEV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIO TEV, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO DOULAS SIQUEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RESCISAO DOULAS SIQUEIRA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TEV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIO TEV, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NF:000201985"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem NF:000201985, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RESCISAO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KLAUDCOMP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem KLAUDCOMP, HISTORICO = Complemento (01) | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO IN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO TAXA DE SERVICO IN, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO OUT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO TAXA DE SERVICO OUT, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS A RECOLHER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem FGTS A RECOLHER, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DA BORRACHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CASA DA BORRACHA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEMAPHORO UNIFORMES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SEMAPHORO UNIFORMES, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("0000000005472"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem 0000000005472, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SIND TRAB COM MIN E DER PETROLEO DE UBERLANDI, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem UBERTUBOS MAT HID. INCENDIO IRRIGACAO LT, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WURTH DO BRASIL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem WURTH DO BRASIL, HISTORICO = Complemento (01) | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IRPJ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem IRPJ, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CSLL, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA NOGUEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FERRAGISTA NOGUEIRA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CARTORIO DO 2 OFICIO DE NOTAS DE UBERLANDIA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem MANUTENCAO, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRO MAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELETRO MAR, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("SERVICO DE TRANSPORTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem SERVICO DE TRANSPORTES, HISTORICO = Documento/NF | Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA DE ELETRONICOS ROUTE 66 LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DISTRIBUIDORA DE ELETRONICOS ROUTE 66 LTDA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHURRASCARIA PORTO ALEGRE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CHURRASCARIA PORTO ALEGRE, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOVEIS ARAUJO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MOVEIS ARAUJO, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem UBERLANDIA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA MINEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DISTRIBUIDORA MINEIRA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZAPI IMPERMEABILIZQANTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ZAPI IMPERMEABILIZQANTES, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO MAQUINA SAFRAPAY"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO MAQUINA SAFRAPAY, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO IN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO TAXA DE SERVICO IN, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDITORA E GRAFICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDITORA E GRAFICA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8928860009") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem 8928860009, Portador contem 0000000005472, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ASSOCIATIVA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem CONTRIBUICAO, Complemento (01) contem ASSOCIATIVA, Tipo Planilha contem MOVIMENTO, HISTORICO = Fornecedor/Cliente Mes-Ano Anterior Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem BB, Fornecedor/Cliente contem GIRO, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VR") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem VR, Portador contem 0000000005472, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANDRA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem FERRAGISTA, Fornecedor/Cliente contem SANDRA, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RDP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem RDP, Fornecedor/Cliente contem UBERLANDIA, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENT") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALFA, Fornecedor/Cliente contem EQUIPAMENT, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROFIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PETROFIL, Fornecedor/Cliente contem DISTRIBUIDORA, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem APLICACAO, Portador contem CEF, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TARIFA, Complemento (04) contem TARIFA, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LARCO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LARCO, Fornecedor/Cliente contem COMERCIAL, Tipo Planilha contem EXTRATO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVITEC") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SERVITEC, Complemento (03) contem MANUTENCAO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARPLAST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBALAGENS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ARPLAST, Fornecedor/Cliente contem EMBALAGENS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASERCO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ASERCO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ASERCO, Complemento (01) contem ASERCO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIOETICA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMBIENTAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BIOETICA, Fornecedor/Cliente contem AMBIENTAL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMTRAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CEMTRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CEMTRAS, Complemento (01) contem CEMTRAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENERGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FEDERAL, Fornecedor/Cliente contem ENERGIA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAFERCO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MAFERCO, Fornecedor/Cliente contem MADEIRAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETROMAC") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ELETROMAC"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELETROMAC, Complemento (01) contem ELETROMAC, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ATLAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PAPELARIA, Fornecedor/Cliente contem ATLAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPELARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIRAMIDE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PAPELARIA, Fornecedor/Cliente contem PIRAMIDE, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZAPI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERMEABILIZANTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ZAPI, Fornecedor/Cliente contem IMPERMEABILIZANTES, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANCA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALIANCA, Complemento (03) contem MANUTENCAO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA IBAMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBAMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem TAXA IBAMA, Fornecedor/Cliente contem IBAMA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RETIDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem ISSQN, Complemento (01) contem RETIDO, HISTORICO = Mes-Ano Anterior Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TELEFONE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem TELEFONE, Complemento (03) contem TELEFONE, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("JUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem JUROS, Complemento (04) contem JUROS, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO FULHO DO DOUGLAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PENSAO FULHO DO DOUGLAS, Complemento (03) contem PENSAO ALIMENTICIA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO DOS FILHOS DO WILSON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PENSAO ALIMENTICIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem PENSAO DOS FILHOS DO WILSON, Complemento (03) contem PENSAO ALIMENTICIA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRIBUICAO PREVIDENCIARIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO ASSISTENCIAL A RECOLHER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem CONTRIBUICAO PREVIDENCIARIA, Complemento (03) contem CONTRIBUICAO ASSISTENCIAL A RECOLHER, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") && StringUtil.removeSpecialCharsToUC(complemento01).contains("052023"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem NFE:, Complemento (01) contem 052023, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF - CSLL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF - CSLL, Complemento (03) contem IMPOSTOS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem GRF, Complemento (03) contem IMPOSTOS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISKAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CRISKAL, Fornecedor/Cliente contem TECNOLOGIA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CRISTO, Fornecedor/Cliente contem REI, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CRISTO, Fornecedor/Cliente contem REI, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DAM DA NF 463290"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem IMPOSTOS, Complemento (01) contem DAM DA NF 463290, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CYH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONECT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CYH, Fornecedor/Cliente contem CONECT, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SPR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SPR, Fornecedor/Cliente contem AUTOMOTIVE, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ASSISTENCIAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem CONTRIBUICAO, Complemento (03) contem ASSISTENCIAL, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROWORLD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PETROWORLD, Fornecedor/Cliente contem COMBUSTIVEIS, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAGNUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MAGNUS, Fornecedor/Cliente contem MADEIRAS, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALFLUID") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VALFLUID, Fornecedor/Cliente contem COM, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO RTDPJ UBERLNDIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DESPESAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CARTORIO RTDPJ UBERLNDIA, Complemento (03) contem DESPESAS, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA MINEIRA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("1"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DISTRIBUIDORA MINEIRA, Complemento (04) contem 1, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FERIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FERIAS, Complemento (03) contem FERIAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO TAXA DE SERVICO OUT") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TAXA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO TAXA DE SERVICO OUT, Complemento (04) contem TAXA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("8928860009") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("01315825756") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem 8928860009, Portador contem 01315825756, Complemento (04) contem TED, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PACOTE, Fornecedor/Cliente contem PJ, Fornecedor/Cliente contem FACIL, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PACOTE, Fornecedor/Cliente contem SERVICOS, Fornecedor/Cliente contem DOC, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MSM") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Complemento (04) contem PIX, Fornecedor/Cliente contem MSM, Complemento (01) contem UMUARAMA, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OURO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TARIFA, Fornecedor/Cliente contem CHEQUE, Fornecedor/Cliente contem OURO, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MARCOS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem IRRF, Complemento (01) contem MARCOS, Complemento (01) contem ANTONIO, Tipo Planilha contem MOVIMENTO, HISTORICO = Mes-Ano Anterior Complemento (01) Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ENVIO, Fornecedor/Cliente contem TED, Portador contem 0000000005472, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CDC") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PREST, Fornecedor/Cliente contem CDC, Portador contem 0000000005472, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPERIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TINTAS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem IMPERIO, Fornecedor/Cliente contem DAS, Fornecedor/Cliente contem TINTAS, Tipo Planilha contem MOVIMENTO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRUPADAS") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TAR, Fornecedor/Cliente contem AGRUPADAS, Portador contem 148837, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESPESA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORARIA") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DESPESA, Fornecedor/Cliente contem CARTORARIA, Portador contem 148837, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem JUROS, Portador contem CEF, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DB, Fornecedor/Cliente contem CEST, Portador contem CEF, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO TED") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO TED") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CEF") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ENVIO TED, Complemento (04) contem ENVIO TED, Portador contem CEF, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROCES") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TAR, Fornecedor/Cliente contem DEPOS, Fornecedor/Cliente contem PROCES, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SAARA, Fornecedor/Cliente contem DISTRIBUIDORA, Complemento (03) contem COMBUSTIVEL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRRF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF IRRF, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, HISTORICO = Mes-Ano Anterior Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") && StringUtil.removeSpecialCharsToUC(documento).contains("14"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BIT, Fornecedor/Cliente contem AZUL, Documento/NF contem 14, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ENERGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CEMIG, Fornecedor/Cliente contem DISTRIBUICAO, Complemento (01) contem ENERGIA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENERGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CEMIG, Fornecedor/Cliente contem DISTRIBUICAO, Complemento (03) contem ENERGIA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS COMPLEMENTAR DE FRETE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem ICMS COMPLEMENTAR DE FRETE, HISTORICO = Mes-Ano Anterior Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA PAGAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem FOLHA PAGAMENTO, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTRATA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CONTRATA, Fornecedor/Cliente contem TRANSPORTES, Fornecedor/Cliente contem LOGISTICA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BISA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CASA, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem BISA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem COSTA, Fornecedor/Cliente contem MORAES, Fornecedor/Cliente contem MATRIZ, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPRESSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EXPRESSO, Fornecedor/Cliente contem GAS, Complemento (01) contem GAS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FELIX, Fornecedor/Cliente contem DISTRIBUIDORA, Complemento (03) contem COMBUSTIVEL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPCAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAPEIS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OPCAO, Fornecedor/Cliente contem PAPEIS, Fornecedor/Cliente contem COMERCIO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF PIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem DARF PIS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEIS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMBUSTIVEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SADA, Fornecedor/Cliente contem COMBUSTIVEIS, Complemento (03) contem COMBUSTIVEL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANOEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELETRICA, Fornecedor/Cliente contem SAO, Fornecedor/Cliente contem MANOEL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRAGISTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FERRAGISTA, Fornecedor/Cliente contem UBERLANDIA, Complemento (03) contem MANUTENCAO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LOEL, Fornecedor/Cliente contem -, Fornecedor/Cliente contem UBERLANDIA, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATRIZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem UBERLANDIA, Fornecedor/Cliente contem MATRIZ, Fornecedor/Cliente contem UBERLANDIA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DIFERENCA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DISSIDIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DIFERENCA, Complemento (01) contem DE, Complemento (01) contem DISSIDIO, HISTORICO = Mes-Ano Anterior Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FOLHA, Complemento (01) contem DE, Complemento (01) contem PAGAMENTO, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INMETRO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INMETRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem IMPOSTOS, Fornecedor/Cliente contem INMETRO, Complemento (01) contem INMETRO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem IMPOSTOS, Fornecedor/Cliente contem DARF, Complemento (04) contem IMPOSTOS, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLOQ.SALDO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("BLOQ") && StringUtil.removeSpecialCharsToUC(complemento04).contains("SALDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem BLOQ.SALDO, Complemento (04) contem BLOQ, Complemento (04) contem SALDO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AZUL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BIT, Fornecedor/Cliente contem AZUL, Complemento (03) contem MANUTENCAO, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOMBAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RS, Fornecedor/Cliente contem BOMBAS, Fornecedor/Cliente contem LOGISTICA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROTORQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIB"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PETROTORQUE, Fornecedor/Cliente contem JC, Fornecedor/Cliente contem DISTRIB, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem FILTROS, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF, Complemento (01) contem CSRF, Complemento (03) contem IMPOSTOS, HISTORICO = 5952 | Mes-Ano Anterior Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILTROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem FILTROS, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CSRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem DARF, Complemento (01) contem CSRF, Complemento (03) contem IMPOSTOS, HISTORICO = 5952 | Mes-Ano Anterior Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (03) contem IMPOSTOS, HISTORICO = 5952 | Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KUTY") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES") && StringUtil.removeSpecialCharsToUC(complemento01).contains("REF NFS:357 - KUTY EXTINTORES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem KUTY, Fornecedor/Cliente contem EXTINTORES, Complemento (01) contem REF NFS:357 - KUTY EXTINTORES, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERPEC") && StringUtil.removeSpecialCharsToUC(complemento03).contains("USO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CONSUMO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FERPEC, Complemento (03) contem USO, Complemento (03) contem CONSUMO, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPAMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LEONE, Fornecedor/Cliente contem EQUIPAMENTOS, Fornecedor/Cliente contem AUTOMOTIVOS, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(complemento04).contains("POS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Complemento (04) contem DEBITO, Complemento (04) contem ALUGUEL, Complemento (04) contem POS, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIT"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TED, Fornecedor/Cliente contem ENVIADA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem MESMA, Fornecedor/Cliente contem TIT, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMITE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("8928860009"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem JUROS, Fornecedor/Cliente contem LIMITE, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem CONTA, Portador contem 8928860009, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CERTA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CONTA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TAR, Fornecedor/Cliente contem CONTA, Fornecedor/Cliente contem CERTA, Complemento (04) contem TAR, Complemento (04) contem CONTA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") && StringUtil.removeSpecialCharsToUC(complemento04).contains("INTERNET"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TAR, Fornecedor/Cliente contem TED, Fornecedor/Cliente contem INTERNET, Complemento (04) contem TED, Complemento (04) contem INTERNET, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLEX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEG"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem SEGURO, Fornecedor/Cliente contem VIDA, Fornecedor/Cliente contem EMPRESA, Fornecedor/Cliente contem FLEX, Fornecedor/Cliente contem SEG, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENDE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FACIL") && StringUtil.removeSpecialCharsToUC(complemento04).contains("BB") && StringUtil.removeSpecialCharsToUC(complemento04).contains("RENDE"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem BB, Fornecedor/Cliente contem RENDE, Fornecedor/Cliente contem FACIL, Complemento (04) contem BB, Complemento (04) contem RENDE, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TARIFA, Fornecedor/Cliente contem PACOTE, Fornecedor/Cliente contem SERVICOS, Fornecedor/Cliente contem COBRANCA, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("6ALTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (04) contem PIX, Complemento (04) contem ENVIADO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Complemento (01) contem 6ALTO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("TAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Complemento (04) contem TAR, Fornecedor/Cliente contem CBR, Fornecedor/Cliente contem LIQUIDACAO, Fornecedor/Cliente contem TAR, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento04).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(complemento01).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Complemento (04) contem APLICACAO, Fornecedor/Cliente contem APLICACAO, Portador contem 0000000005472, Complemento (01) contem 0000000005472, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CBR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDACAO") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("148837") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("-") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("6"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem CBR, Fornecedor/Cliente contem LIQUIDACAO, Portador contem 148837, Portador contem -, Portador contem 6, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PJ") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DB, Fornecedor/Cliente contem CEST, Fornecedor/Cliente contem PJ, Portador contem 0000000005472, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("0000000005472") && StringUtil.removeSpecialCharsToUC(complemento04).contains("DEB"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem ., Fornecedor/Cliente contem JUROS, Portador contem 0000000005472, Complemento (04) contem DEB, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("-") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem INT, Fornecedor/Cliente contem FGTS, Fornecedor/Cliente contem -, Fornecedor/Cliente contem GRF, Complemento (04) contem FGTS, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACOTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem TARIFA, Fornecedor/Cliente contem PACOTE, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem SERVICOS, Complemento (04) contem TARIFA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IPTU") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PREFEITURA, Fornecedor/Cliente contem MUNICIPAL, Fornecedor/Cliente contem DE, Complemento (01) contem IPTU, Tipo Planilha contem MOVIMENTO, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TAXA DE COLETA DE LIXO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PREFEITURA, Fornecedor/Cliente contem MUNICIPAL, Fornecedor/Cliente contem DE, Complemento (03) contem TAXA DE COLETA DE LIXO, Tipo Planilha contem MOVIMENTO, HISTORICO = Fornecedor/Cliente Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRESTACAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MG") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PRESTACAO, Complemento (01) contem SERVICO, Fornecedor/Cliente contem CREA, Fornecedor/Cliente contem MG, Tipo Planilha contem MOVIMENTO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("PIX") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Complemento (04) contem PIX, Complemento (04) contem ENVIADO, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem FERIAS, Complemento (03) contem PESSOAL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF IRPJ") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem DARF IRPJ, Complemento (03) contem IMPOSTOS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PESSOAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem RESCISAO, Complemento (03) contem PESSOAL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GRF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem GRF, Complemento (01) contem FGTS, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ABC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUTENCAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXTINTORES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ABC, Fornecedor/Cliente contem MANUTENCAO, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem EXTINTORES, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSRF") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem DARF CSRF, Complemento (03) contem IMPOSTOS, HISTORICO = Mes-Ano Anterior Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem RESCISAO, Complemento (01) contem CONTRATUAL, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem PENSAO, Complemento (01) contem ALIMENTICIA, HISTORICO = Mes-Ano Anterior Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONFINS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem DARF CONFINS, Complemento (03) contem IMPOSTOS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAMOS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MANUTENCAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DANIEL, Fornecedor/Cliente contem VIANA, Fornecedor/Cliente contem RAMOS, Complemento (03) contem MANUTENCAO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PREFEITURA, Fornecedor/Cliente contem MUNICIPAL, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem UBERLANDIA, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FILIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem UBERLANDIA, Fornecedor/Cliente contem FIC, Fornecedor/Cliente contem FILIAL, Fornecedor/Cliente contem UBERLANDIA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CSLL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem DARF CSLL, Complemento (03) contem IMPOSTOS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RECOLHIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem RECOLHIMENTO, Complemento (01) contem FGTS, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DARF CONTRIBUICAO PREVIDENCIARIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem DARF CONTRIBUICAO PREVIDENCIARIA, Complemento (03) contem IMPOSTOS, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANJOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUARDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MONITORAMENTO/VIGILANCIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANJOS, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem GUARDA, Complemento (03) contem MONITORAMENTO/VIGILANCIA, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREFEITURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UBERLANDIA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA DE PUBLICIDADE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PREFEITURA, Fornecedor/Cliente contem MUNICIPAL, Fornecedor/Cliente contem UBERLANDIA, Complemento (01) contem TAXA DE PUBLICIDADE, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem EMIT, Fornecedor/Cliente contem ., Fornecedor/Cliente contem OUTRA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TED") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ELETR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED TRANSF.ELETR.DISPONIV - 341 8928 004748235000117 ALTO UMUARAMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Complemento (04) contem TED, Complemento (04) contem TRANSF, Complemento (04) contem ELETR, Fornecedor/Cliente contem TED TRANSF.ELETR.DISPONIV - 341 8928 004748235000117 ALTO UMUARAMA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LINK") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADMINISTRADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LINK, Fornecedor/Cliente contem CARD, Fornecedor/Cliente contem ADMINISTRADORA, Fornecedor/Cliente contem DE, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRANCO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DIST, Fornecedor/Cliente contem ., Fornecedor/Cliente contem RIO, Fornecedor/Cliente contem BRANCO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NATANAEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SAMPAIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem RESCISAO, Complemento (01) contem PAGTO, Complemento (01) contem NATANAEL, Complemento (01) contem SAMPAIO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("12") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFONSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PENA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARIMBO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (02) contem 12, Fornecedor/Cliente contem AFONSO, Fornecedor/Cliente contem PENA, Fornecedor/Cliente contem CARIMBO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIVERSAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTUMOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PAZ, Fornecedor/Cliente contem UNIVERSAL, Fornecedor/Cliente contem SERVICOS, Fornecedor/Cliente contem POSTUMOS, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RESCISAO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NATANAEL") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SAMPAIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem RESCISAO, Complemento (01) contem PAGTO, Complemento (01) contem NATANAEL, Complemento (01) contem SAMPAIO, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("12") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFONSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PENA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARIMBO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (02) contem 12, Fornecedor/Cliente contem AFONSO, Fornecedor/Cliente contem PENA, Fornecedor/Cliente contem CARIMBO, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIVERSAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTUMOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PAZ, Fornecedor/Cliente contem UNIVERSAL, Fornecedor/Cliente contem SERVICOS, Fornecedor/Cliente contem POSTUMOS, HISTORICO = Documento/NF Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SAQUE, Fornecedor/Cliente contem NO, Fornecedor/Cliente contem TAA, Complemento (04) contem SAQUE, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TDC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DISTRIBUIDORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem TDC, Fornecedor/Cliente contem DISTRIBUIDORA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem COMBUSTIV, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UMUARAMA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("NFE:") && StringUtil.removeSpecialCharsToUC(complemento01).contains("072023"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALTO, Fornecedor/Cliente contem UMUARAMA, Complemento (01) contem NFE:, Complemento (01) contem 072023, HISTORICO = Complemento (01) Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDITORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRAF") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UBERLANDIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDITORA, Fornecedor/Cliente contem E, Fornecedor/Cliente contem GRAF, Complemento (01) contem UBERLANDIA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PORTAS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ACO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem UNIDAS, Complemento (01) contem PORTAS, Complemento (01) contem DE, Complemento (01) contem ACO, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ICMS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DIFERENCIAL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ALIQUOTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (03) contem ICMS, Complemento (03) contem DIFERENCIAL, Complemento (03) contem DE, Complemento (03) contem ALIQUOTA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACALUB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PACALUB, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem E, Fornecedor/Cliente contem LOGISTICA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUBRIFICANTES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INDUSTRIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MAX, Fornecedor/Cliente contem LUBRIFICANTES, Fornecedor/Cliente contem INDUSTRIA, Fornecedor/Cliente contem COMERCIO, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("CHEQUE") && StringUtil.removeSpecialCharsToUC(complemento04).contains("OURO") && StringUtil.removeSpecialCharsToUC(complemento04).contains("MANUT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Complemento (04) contem TARIFA, Complemento (04) contem CHEQUE, Complemento (04) contem OURO, Complemento (04) contem MANUT, HISTORICO = Complemento (04)";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomeOrigem")) lote = cutString(lote,0,"-"); //ROT-2022-1136164

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    if (parametro.equals("valorDocumento") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XPTO")) {
        retornaColunas = "4;5";
    }
    return retornaColunas.replace(",",";").trim();
}

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
	
    return mapaVariavel;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
 
    return true;
}


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
  
    return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readFrancesinhagrupoAilosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
 }


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	  return true;
}


public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}



public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


		
		/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


		
		/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


				
		/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


	
/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


		
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}



/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
 }


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
      
    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  

    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	
    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
			   
   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   

   return mapaVariavel;
}


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}



public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
          
	return mapaVariavel;
}						
           
        


 /*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
        public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
           
				 return mapaVariavel;
            }


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   


   return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	logger.logDebug("BBPDF");
	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
	String valorDocumentoAux = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 4;
	int inomePortador	=-1;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 5;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		logger.logInfo("NA = "+nomeArquivo.toUpperCase());
		// naoLeMais = false; //Nao era dado false antes da condicao para true do naoLeMais, fazendo o codigo nao ler o resto que era necessario
        // if (line.replaceAll(" ", "").contains("999") && line.replaceAll(" ", "").contains("SALDO") && !line.contains("ANTERIOR")) naoLeMais = true;
        if (line.replaceAll(" ", "").contains("999") && line.replaceAll(" ", "").contains("SALDO") && !line.contains("ANTERIOR")) continue;
		if (line.startsWith("TRANSACAO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.startsWith("SERVICO DE ATENDIMENTO") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("PARA DEFICIENTES") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("---------------") && memFile.getFieldsSize() == 1) continue;
		if (memFile.getFieldsSize() == 1 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DESPESAS VINCULADAS")) naoLeMais = true; 
		if (naoLeMais) continue;
		
		//logger.logInfo("Line -> "+line);
	
		if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("/")){
			// logger.logInfo("TP1");
			idataMovimento	= 0;
			idocumento      = 5;
			inomePortador	=-1;
			inomeOrigem		= 4;
			ivalorDocumento	= 6;
			nomePortador = nomePortador.replaceAll("\\?","");
			complemento01 = nomePortador.replaceAll("\\?","");
			
			//Douglas feito para o chamado #2305-005743
			try {
				if (cutString(memFile.getStringFieldRemoveEspCharsUpper(1), " ").matches("[0-9]{4}")){
					idataMovimento	= 0;
					idocumento      = 4;
					inomePortador	=-1;
					inomeOrigem		= 3;
					ivalorDocumento	= 5;
				}
			}catch(Exception e) {
				logger.logInfo("ERRO - "+e);
			}
		}else{
			// logger.logInfo("TP2");
			idataMovimento	= 0;
			idocumento      = 4;
			inomePortador	=-1;
			inomeOrigem		= 3;
			ivalorDocumento	= 5;
			//#2306-007500 Quando não há NF (Documento) o pdf faz um deslocamento de colunas
			if(memFile.getStringFieldRemoveEspCharsUpper(5).equals("") || (memFile.getStringFieldRemoveEspCharsUpper(4).contains("C") || memFile.getStringFieldRemoveEspCharsUpper(4).contains("D"))){
				ivalorDocumento	= 4;
				idocumento      = -1;
			}
			nomePortador = nomePortador.replaceAll("\\?","");
			complemento01 = nomePortador.replaceAll("\\?","");
		}
		
		debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
		
		//2401-027930 - Em casos que o valor está na casa do milhão, o D ou C descola para a proxima coluna 
		if(!debitoCreditoAux.contains("C") && !debitoCreditoAux.contains("D")) debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1).replaceAll("[^A-Za-z]", "").trim();
			
		if (debitoCreditoAux.contains("C")) debitoCredito = "EXTRATO-CREDITO";
        if (debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
		
		// comentado por xavier em20-04-2021
		//if(tipoLancamento.contains("PAG") && debitoCreditoAux.contains("C"))continue;
		//if(tipoLancamento.contains("REC") && debitoCreditoAux.contains("D"))continue;

        if (memFile.getFieldsSize() == 1) {
			// logger.logDebug("NOEEEEE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);
			nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
				

                valorDocumento  = 0;
				debitoCreditoAux = "";
				
				//logger.logInfo("LOG VALOR TESTE - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                
				if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("*")) continue; 
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
				
				//#2309-016021 - Tratamento de valores que nao vem no formato correto ex: 5.000.00 em vez de 5.000,00
				if(valorDocumento == 0 && !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(",") &&
				!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
					try{
						valorDocumentoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[.CD]", "").trim();
						// logger.logInfo("LOG VALOR AUX - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
						valorDocumento = Double.parseDouble(valorDocumentoAux) / 100;
						// logger.logInfo("LOG VALOR - " + valorDocumento);
					} catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
					
				}
				
                if (valorDocumento == 0) continue;

				//logger.logInfo("DM -> "+dataMovimento+" - VD -> "+valorDocumento);
       
				nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                if(idocumento>=0) {//#2306-007500
					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;
					
				}

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				// logger.logInfo("LOG CONTLINHA - " + contLinhaExtrato);
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                
				
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

				// Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

	public boolean readExtratoBancoDoBrasil2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {	
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     =	 "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String lineAux           = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

	int idataMovimento	=  0;
	int idocumento      = -1;
	int inomePortador	= -1;
	int inomeOrigem		=  1;
	int ivalorDocumento	=  2;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
		lineAux = line;
        line = StringUtil.removeSpecialCharsToUC(line);
		

        // logger.logInfo("coluna Valor -> " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
		
		if(line.startsWith("EXTRATO")) naoLeMais = true;
		
		if(line.startsWith("DIA")){ 
			naoLeMais = false;
			continue;
		}

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA:")) {
			nomePortador = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), "CONTA:");
		}

		if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        // if (line.startsWith("EXTRATO DE")) {
        //     chaveExtrato = "";
        //     continue;
        // }
        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("INFORMACOES ADICIONAIS") || 
            memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL APLICACOES FINANCEIRAS")) {naoLeMais = true;}
        
        if (naoLeMais) continue;
		
		if (memFile.getFieldsSize() == 1) {
			
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
		}
		

		
        try {
            
            // logger.logInfo("SHR LINE = " + line + " | FS -> " + memFile.getFieldsSize());
            
            // if(memFile.getFieldsSize() != 2){
            if(memFile.getFieldsSize() == 2){
				//logger.logInfo("LOG LINE - " + line);
                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d{2}/\\d{2}/\\d{4}")){
					
                    try{
                        dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
						
						//logger.logInfo("ENTROU IF INTERNO - " + dataMovimento);

                        dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");

                        nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
						
						//logger.logInfo("FIELD SIZE 2 DATA - " + " NO COMPLETO -> " + nomeOrigem + "Data - " + dataMovimento);
                        

                        continue;
                    }

                    catch(Exception e){}
                }
				
				
            }

            nomeOrigem = nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0);

            if(memFile.getFieldsSize() == 3){
                try{
                        dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

                        dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                    }

                    catch(Exception e){}

                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                logger.logInfo("LOG NOME ORIGEM > " + nomeOrigem + " | DATA > " + dataMovimento);
            }

            // }
            
            
            // logger.logInfo(" is -> " + ivalorDocumento + " | " + inomeOrigem);
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
            if (debitoCreditoAux.contains("C") || debitoCreditoAux.contains("+")) {
                debitoCredito = "EXTRATO-CREDITO";
				logger.logInfo("LOG EXTRATO CREDITO");
            }
            if (debitoCreditoAux.contains("D") || debitoCreditoAux.contains("-")) {
				logger.logInfo("LOG EXTRATO DEBITO");
                debitoCredito = "EXTRATO-DEBITO";
            }

            valorDocumento  = 0;
            try{

                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).replace("(-)", "").replace("(+)", "").trim();
                
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                //logger.logInfo("LOG VALOR DOC AUX - " + valorDocAux);
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
                //logger.logInfo("LOG VALOR DOC Convertido- " + Double.toString(valorDocumento));
                
                //logger.logInfo("LOG CONTEUDO - " + valorDocAux);

            }
            catch (Exception vlrd) { 
                valorDocumento = 0; 
                
                //logger.logInfo("LOG CATCH- " + stringTeste);
            }

            //logger.logInfo("LOG VALOR - " + valorDocumento);
            if (valorDocumento == 0) continue;
            // if(memFile.getFieldsSize() == 2)
                // nomeOrigem		= complemento08 + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
            
            
            //logger.logInfo(" VD -> " + valorDocumento + " NO COMPLETO -> " + nomeOrigem + "Data - " + dataMovimento);
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
        
    }
    return true;
}

public boolean readExtratoBancoDoBrasil3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

	int idataMovimento	=  0;
	int idocumento      =  2;
	int inomeOrigem		=  1;
	int ivalorDocumento	=  3;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}

        if (naoLeMais) continue;

        try {

			try{
				dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
				dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
			} catch(Exception e){}

			if(dataMovimento.equals("")) continue;

			nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

			documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("C")) {
                debitoCredito = "EXTRATO-CREDITO";
            }
            if (debitoCreditoAux.contains("D")) {
                debitoCredito = "EXTRATO-DEBITO";
            }

            try{
                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("D", "").replace("C", "").trim();
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
            } catch (Exception vlrd) {valorDocumento = 0;}

            if (valorDocumento == 0) continue;


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}
 


public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	//logger.logInfo("PADRAO CAIXA PDF123");


    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao  = "";

	String valorDocAux = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

	boolean tipoUmSemSaldo = false;
	String linhaRun = "";

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINHA"))   linhaRun   = jDados.optString("LINHA");

	if(tipoPadrao.equals("001") && linhaRun.contains("DATA") && !linhaRun.contains("SALDO")) tipoUmSemSaldo = true;

	//logger.logInfo("Tipo: "+tipoPadrao);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.contains("SALDO") && line.contains("DIA")) continue;
		if (line.contains("SAC") && line.contains("CAIXA")) continue;
		if (line.contains("PESSOAS") && line.contains("DEFICIENCIA")) continue;
		if (line.contains("OUVIDORIA") && line.contains("0800")) continue;
		if (line.contains("ALO CAIXA") && line.contains("0800")) continue;
		if (line.contains("HELP") && line.contains("DESK")) continue;
		if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("INTERNETBANKING") && line.contains("IMPRIME")) continue;
		if (line.contains("CAIXA.GOV.BR")) continue;


		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + cutString(line,line.lastIndexOf("|"),line.length()).replaceAll(";", " ");
		}
		//Douglas. Feito para o Chamado #2304-003957 para leitura das colunas 1 2 e 3
		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " / " + memFile.getStringFieldRemoveEspCharsUpper(2) + " / " + memFile.getStringFieldRemoveEspCharsUpper(3);
		}

		// logger.logInfo("DENTRO DO EXTRAto tipoPadrao -> " + tipoPadrao);
		//logger.logInfo("linelength " + line.length());
		if(tipoPadrao.contains("002")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				// logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}
		}
		if(tipoPadrao.contains("001")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				 logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i+1;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}

			if(line.startsWith("SALDO")) continue;
		}
		if(tipoPadrao.contains("003")){
			if (line.contains("MOVIMENTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO")) {
				idataMovimento	= -1;
				idocumento      = -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOVIMENTO"))      idataMovimento = i;
					ivalorDocumento = 4;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento + " | LIN == "+line);
				continue;
			}
			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}
		if(tipoPadrao.contains("004")){
			idataMovimento = 0;

			if (memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("C") || memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("D")) {
				inomeOrigem = 2;
				idocumento = 2;
				ivalorDocumento = 5;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(3);
			}
			else {
				inomeOrigem = 1;
				idocumento = 1;
				ivalorDocumento = 4;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}

        if (memFile.getFieldsSize() == 1 ) {
			if(tipoPadrao.equals("001") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().startsWith("EXTRATO")) {
				continue;
			} else {
				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			}
        } else {
				// logger.logInfo("DTS " + dataString);
            try {

                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");


                if (dataString.equals("000000")) continue;
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { continue; }
                    }
                }



                if (dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }

				//2401-026791
				if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo) valorDocumento = 1;

                if (valorDocumento == 0) continue;


                nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				if (nomeOrigem.contains("SALDO C/C")) continue;
                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                complemento02 = documento;

				//2401-026791
				if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo){
					if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("C")){
						ivalorDocumento = memFile.getFieldsSize()-2;
					} else {
						ivalorDocumento = memFile.getFieldsSize()-1;
					}
					valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
					valorDocumento  = 0;
					try{valorDocumento = Double.parseDouble(valorDocAux);}
					catch (Exception vlrd) { valorDocumento = 0; }

					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);

					documento = memFile.getStringFieldRemoveEspCharsUpper(1);

					for(int i = 2; i < ivalorDocumento; i++){
						if(i == 2) nomeOrigem = "";
						nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(i);
					}
				}


				if(tipoPadrao.equals("003")){
					if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
					if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-CREDITO";
				}
				else if (tipoPadrao.equals("004")) {
					if (complemento03.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if (complemento03.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				}
				else{
                if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
				}
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );



                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

            // Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(documento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoCefPDF4(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
	if (nomeArquivo.toUpperCase().contains("CSV")) {
		memFile.setFieldSeparator(";");
	}

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

	//logger.logInfo("LOG IDATAMOVIMENTO - " + idataMovimento);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("AGENCIA:")) {
            nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
        }
		if (line.startsWith("FILE:")) {naoLeMais = true;}
        if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("EXTRATO POR PERIODO")) {naoLeMais = true;}
        if (line.startsWith("DATA DE")) {
            naoLeMais = false;
            continue;
        }
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("SALDO DIA")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("BLOQ.SALDO")) {continue;}
        if (naoLeMais) continue;
        try {
            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            //Tenta capturar o valor caso o memFile.getDoubleField tenha falhado
            if (valorDocumento == 0 && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches("[\\d\\.\\)\\-,\\s\\(]*")) {
                try {
                    valorDocumento = capturaValor(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                } catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
            }
            if (valorDocumento == 0) continue;
            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			documento       = "";
			documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}

//2312-024906
public boolean readExtratoCefPDF6(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

	int colunaVerificado = 0;
    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	//if (nomeArquivo.toUpperCase().contains("CSV")) {
	//	memFile.setFieldSeparator(";");
	//}

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		logger.logInfo("Linha: "+line);

		colunaVerificado = 0;

        if (naoLeMais) continue;
        try {

			for(int i = 0; i < 2; i++){

				idataMovimento = -1;
				idocumento = -1;
				inomeOrigem = -1;
				ivalorDocumento = -1;

				//Tratamento para pegar as colunas de cada lancamento a partir da coluna com a data
				for(int col = colunaVerificado; col < memFile.getFieldsSize(); col++){
					if(memFile.getStringFieldRemoveEspCharsUpper(col).trim().length() == 10 && !memFile.getStringFieldRemoveEspCharsUpper(col).contains(",") &&
					memFile.getStringFieldRemoveEspCharsUpper(col).contains("/")){
						idataMovimento = col;
						idocumento = col + 1;
						inomeOrigem = col + 2;
						ivalorDocumento = col + 3;

						colunaVerificado = col + 4;
						break;
					}
				}

				if(idataMovimento == -1 && ivalorDocumento == -1) continue;

				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}

				logger.logInfo("Data: "+dataMovimento);

				if(dataMovimento.equals("")) continue;

				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

				if (debitoCreditoAux.contains("D")) {
					debitoCredito = "EXTRATO-DEBITO";
				} else if(debitoCreditoAux.contains("C")) {
					debitoCredito = "EXTRATO-CREDITO";
				}

				valorDocumento  = 0;

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }

				logger.logInfo("Valor: "+valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();

				documento       = "";
				documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();
				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			}
        } catch (Exception ex) {
        }
    }
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  
  return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento		= 1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    int icomplemento02	= 1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
		String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
		// logger.logDebug("MFF " + memFile.getStringFieldRemoveEspCharsUpper(2));
		
        if (memFile.getStringFieldRemoveEspCharsUpper(2).contains("SALDO") && memFile.getStringFieldRemoveEspCharsUpper(2).contains("DIA")) continue;
		
		if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") 
			&& !memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue; 
		// logger.logDebug("LIN " + memFile.getFieldsSize() + " | " + line);
        if (memFile.getFieldsSize() == 3) {
			nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
				logger.logDebug("ERRO AO DAR UPDATE NA IO_EXTRATO " + sqlUpdateException.getMessage());
			}
			continue;
		}else{
			nomeOrigem = "";
            dataMovimento = "";
            valorDocumento = 0;
			try {	
				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}

				valorDocumento  = 0;
				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }
				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
				complemento01   = nomePortador;
				complemento02	= "";
				complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
				documento		= "";
				documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

				if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("C")) debitoCredito = "EXTRATO-CREDITO";
				if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D")) debitoCredito = "EXTRATO-DEBITO";

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();

				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
					// Atualizar Chave caso encontrada.
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			} catch (Exception readExtratoException) {
				logger.logError("Erro de leitura de Extrato Padr㯠Sicoob", readExtratoException);
			}
		}
		
    }
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento		= 1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
	int icomplemento02	= 3;
    String dataAux = "";
    String cont = "";
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).toUpperCase().trim().startsWith("SALDO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) dataAux = dataMovimento;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if(valorDocumento != 0){ nomeOrigem = ""; cont = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");}
            nomeOrigem		+= " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").trim();
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
            if (complemento02.contains("C")) debitoCredito = "EXTRATO-CREDITO";
            if (complemento02.contains("D")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = cont;

            chaveExtrato = codEmpresa  + "-" + debitoCredito + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO, HISTORICO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(nomeOrigem)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Sicoob", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String linha        	 = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String anoData			 = "";
    String dataSemAno        = "";
	String tipoLayout		 = "";
	String anoAux 			 = "";
	
	boolean naoLeMais = false;
	boolean auxDebitoCredito = false;
	boolean ignoraNomeOrigem = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	// double valorDocumentoAcima = memFile.getDoubleField(0);
	// double valorDocumentoAcima = 0.0;
	
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
	
	

    if (jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if (jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("LINE"))  	    linha  		 = jDados.optString("LINE");
	if(jDados.has("ANODATA"))  	    anoData  	 = jDados.optString("ANODATA");
	if(jDados.has("TIPO"))  	    tipoLayout   = jDados.optString("TIPO");
	if(linha.contains(";") && !linha.contains("\\|")){
		memFile.setFieldSeparator(";");	
	}
	
	anoAux = anoData;

	
    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
				
		if (memFile.getStringFieldRemoveEspCharsUpper(3).equals("") || tipoLayout.equals("002")) inomeOrigem = 1;
		else inomeOrigem = 2;
		
		//if(!line.contains("DEP") && !line.contains("CHEQUE")){
			//if(line.toUpperCase().contains("SALDO DO DIA")){
			//	auxDebitoCredito = false;
			//}


		if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PERIODO:")) continue;
		if (line.toUpperCase().contains("PLATAFORMA DE SERVICOS FINANCEIROS")) continue;
		if (line.toUpperCase().contains("SALDO ANTERIOR")) continue;
		if (line.toUpperCase().startsWith("PREVISAO ")) continue;
		if (line.toUpperCase().startsWith("TAXA ")) continue;
		if (line.toUpperCase().startsWith("PREVISAO ")) continue;
		if (line.toUpperCase().startsWith("OUVIDORIA SICOOB")) continue;
		if (line.toUpperCase().startsWith("EXTRATO NO.:")) continue;
		if (line.toUpperCase().startsWith("SALDO DE APLICACOES EM")) continue;
		//if (line.toUpperCase().contains("LIMITE CONTA GARANTIDA")) continue; //2312-025567 - Tem no arquivo um lancamento que usa esse termo
		if (line.toUpperCase().contains("LIMITE CONTA GARANTIDA") && line.contains("\\(")  && line.contains(":")) continue;
		if (line.toUpperCase().startsWith("SALDO EM CONTA")) continue;
		if (line.toUpperCase().startsWith("SALDO BLOQUEADO")) continue;
		if (line.toUpperCase().startsWith("SALDO DISPONIVEL")) continue;
		if (line.toUpperCase().startsWith("SALDO DO DIA ===== >")) continue;
		if (line.toUpperCase().contains("SALDO DO DIA")) continue;
		if (line.matches(".*[[0-9]{2}/[0-9]{2}/[0-9]{4}].*") && line.contains(" OF ")) continue;
		if (line.toUpperCase().startsWith("REM.:") && line.toUpperCase().contains("FINCO")) continue;
		//*Sergio* chamado 202005-0007053 e 202005-0007052
		if (line.contains("EXTRATOS") && line.contains("EMITIDOS") && line.contains("ATE")) continue;
		// if (line.contains("**")) continue;	
		if (line.toUpperCase().contains("SALDO EM CONTA CORRENTE")) continue;	
		if (line.toUpperCase().contains("LIMITE CHEQUE ESPECIAL")) continue;	
		if (line.toUpperCase().contains("SALDO DEVEDOR")) continue;	
		if (line.toUpperCase().contains("VENCIMENTO CHEQUE")) continue;	
		if (line.toUpperCase().contains("TAXA CHEQUE")) continue;	
		if (line.toUpperCase().contains("EXTRATOS EMITIDOS")) continue;
		if (line.contains("RESUMO")) return true;
		if (line.toUpperCase().startsWith("MENSAGENS") || line.toUpperCase().contains("MENSAGENS"))naoLeMais = true;	
		if (memFile.getFieldsSize() > 1) naoLeMais = false;
		// 2310-019753 descomentado if abaixo
		if (line.contains("DOC.:")) continue; 
		if (naoLeMais == true) continue;
		//}
		
		if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")) {
			idataMovimento	= -1;
			idocumento      = -1;
			inomePortador	= -1;
			inomeOrigem		= -1;
			ivalorDocumento	= -1;
			for (int i = 0; i < memFile.getFieldsSize(); i++) {
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
			}

			continue;
		}
		if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("VALOR") && !line.contains("DOCUMENTO")) {
			idataMovimento	= -1;
			idocumento      = -1;
			inomePortador	= -1;
			inomeOrigem		= -1;
			ivalorDocumento	= -1;
			for (int i = 0; i < memFile.getFieldsSize(); i++) {
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
				if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
			}
			


			continue;
		}
		
        if (memFile.getFieldsSize() == 1) {

            //#2309-015855
            //Captura a data quando o ano vem deslocado uma linha abaixo
            if (line.length() == 5 && memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d{2}/\\d{2}")) {
                dataSemAno = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
                // logger.logInfo("DATA SEM ANO -> "+ dataSemAno);
            }
			
			if (ignoraNomeOrigem) continue;
			
			// if(memFile.getStringFieldRemoveEspCharsUpper(0).length() > 4){
			if(memFile.getStringFieldRemoveEspCharsUpper(0).length() > 1){
				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
			}

			if(memFile.getStringFieldRemoveEspCharsUpper(0).length() == 1 && auxDebitoCredito == true){
				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(0);
				if(complemento03.equals("C")) debitoCredito = "EXTRATO-CREDITO";
				if(complemento03.equals("D")) debitoCredito = "EXTRATO-DEBITO";
				
				
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("DEBITOCREDITO")
					.where("CHAVE = ? ")
					.param(debitoCredito)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
				complemento03 = "";
				continue;
			}

			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
			// ignoraNomeOrigem = true;
			
        } else {
			ignoraNomeOrigem = false;
            // nomeOrigem = "";
			

			
            dataMovimento = "";
            valorDocumento = 0;
            try {
                try {
					String dataString;
					if(anoData.length() < 4 || anoData.contains("SALDO")){
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","")+"/"+anoAux;
					} else{
						dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","")+"/"+anoData;
					}
					//String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","")+"/"+anoData;
					dataString = dataString.replaceAll("//", "/"); //anoAux
					Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { 
							try {
								//#2309-015855
								String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                                anoData = cutString(dataString, dataString.lastIndexOf("/")).trim();
                                dataString = cutString(dataString, 0, dataString.lastIndexOf("/")).trim() + anoData; 
								Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
								dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							} catch (Exception dt3) {}
						}
                    }
                }
				
				//#2305-005913
				//Captura a data no formato 01/jan (ano acima da principal)
				String dataAux = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				if (dataMovimento.equals("") && dataAux.matches("(\\d){2,2}\\/(\\w){3,3}.*") && !line.startsWith("/202")) {
					dataMovimento = cutString(dataAux, 0, "/"); //dia
					dataMovimento += "/" + getMonth(dataAux.substring(dataAux.indexOf("/") + 1)) + "/" + anoData;
				}

                //#2309-015855
                //Captura a data quando o ano vem deslocado uma linha abaixo
				if (dataSemAno.matches("\\d{2}/\\d{2}") && memFile.getStringFieldRemoveEspCharsUpper(0).matches("/\\d{4}")) {
                    dataSemAno += memFile.getStringFieldRemoveEspCharsUpper(0);
                    dataMovimento = dataSemAno.matches("\\d{2}/\\d{2}/\\d{4}") ? dataSemAno.replaceAll("\\s+", " ") : "";
                }
				
                valorDocumento  = 0;
                debitoCredito = "";
				strValorDocumento =  "";
				
				////#2308-013175 - Novo indice em valorDocumento devido a quebra de Strings
				if(valorDocumento == 0){
					try{
						valorDocumento = memFile.getDoubleField(memFile.getFieldsSize() - 1);
						strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).replaceAll("D", "").replaceAll("C", "");
						}
					catch (Exception vlrd) { valorDocumento = 0; }
					
					//if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("D") || memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("C")){ //
					if((memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("D") || memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("C") || memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("*")) && memFile.getFieldsSize() > 3){ //
						try{
							valorDocumento = memFile.getDoubleField(memFile.getFieldsSize() - 2);
							strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2);
							}
						catch (Exception vlrd) { valorDocumento = 0; }
					}
				}

				//Douglas #
						// valorDocumentoAcima = memFile.getDoubleField(0);
				// if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("/") && valorDocumento == 0){
					// try{
						// valorDocumento = valorDocumentoAcima;
					// }
					// catch (Exception vlrAc) {}
				// }

				// logger.logInfo("DT -> " + dataMovimento + " |VD ->  " + valorDocumento + " |MFvd -> " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " |mfVD+1 " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1) + " |CPL03 -> " + complemento03);
                if (memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("D")) debitoCredito = "EXTRATO-DEBITO";
                if (memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("C")) debitoCredito = "EXTRATO-CREDITO";
				// complemento03 = "";
				// if (debitoCredito.equals("")) debitoCredito = "EXTRATO-DEBITO"; //202303-0026660 JWR vai dar problema retirar essa linha
				
				//#2305-004552 e #2305-004348. Alguns casos não era identificado se o registro era débito ou crédito.
				if(debitoCredito.equals("")){
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("CR ")) debitoCredito = "EXTRATO-CREDITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEP.")) debitoCredito = "EXTRATO-CREDITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("CRED")) debitoCredito = "EXTRATO-CREDITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("PIX RECEB.")) debitoCredito = "EXTRATO-CREDITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEB.") || memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEB ")) debitoCredito = "EXTRATO-DEBITO";
					
					//if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEB.") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("CHEQUE")) debitoCredito = "EXTRATO-CREDITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DB.")) debitoCredito = "EXTRATO-DEBITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("PIX EMIT") || memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("PIX.EMIT.")) debitoCredito = "EXTRATO-DEBITO";
					
					if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("CHQ CMP")) debitoCredito = "EXTRATO-DEBITO";
						
					if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("CHQ") && memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEV")) debitoCredito = "EXTRATO-DEBITO";

				}
				
				if (debitoCredito.equals("")){					
					auxDebitoCredito = true;
				} else {
					auxDebitoCredito = false;
				}
				

                valorDocumento = Math.abs(valorDocumento);
				
				// logger.logInfo("INFOS " + debitoCredito + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + nomeOrigem + " | " + line);

				if (valorDocumento == 0) continue;

                nomeOrigem      = "";

				// #2312-024018 - Leal - Inicio
				int tamanhoCampoDoc = memFile.getStringFieldRemoveEspCharsUpper(idocumento).length() - 1;
				int inomeOrigemAux = inomeOrigem;

				int tamanhoCampoNome = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).length() - 1;
				String nomeOrigemAux = "";
				
				//logger.logInfo("LOG SUBSTRING - " + memFile.getStringFieldRemoveEspCharsUpper(idocumento).substring(tamanhoCampoDoc));

				//2402-028413 - 2 lancamentos pegavam o valor como nomeOrigem pq o documento termina com -
				//if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).substring(tamanhoCampoDoc).equals("-")){
				if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).substring(tamanhoCampoDoc).equals("-") && memFile.getFieldsSize() > 4){

					documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento) + " " + memFile.getStringFieldRemoveEspCharsUpper(idocumento + 1);
					inomeOrigemAux = inomeOrigem + 1;
					
					//logger.logInfo("LOG ENTROU IF TAMANHOCAMPO - " + inomeOrigemAux + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigemAux) + " " + documento);
				}
				
				else{
					if (idocumento > -1) documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
				}

				if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).substring(tamanhoCampoNome).equals("-")){
					nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem + 1);
				}
				
				
				//#2308-013175 - Concatenação de Strings que estavam quebrando no conversor
				//if (memFile.getFieldsSize() > 3 && tipoLayout.equals("002") && !memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2).replaceAll(",", "").replaceAll(".", "").matches("[0-9]*"))
				if (memFile.getFieldsSize() > 3 && tipoLayout.equals("002") && !memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2).contains(strValorDocumento))
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim() + " " + memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2); //
				else 
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigemAux).replaceAll("\"","").replaceAll("\\?","").trim() + " " + nomeOrigemAux;
				
				// #2312-024018 - Leal - Fim
				
				// logger.logInfo("INOMEORIGEM: "+ inomeOrigem);
				//#2308-013175 
				// complemento03 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
				//if (idocumento > -1) documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                complemento02 = documento;
                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

            // Inserir caso Chave nao encontrada.
            
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(complemento03)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")	
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

//2311-021100 - Padrao 4
public boolean readExtratoSicoob2PDF(MemoryFile memFile,String nomePortador,JSONObject jDados,DataBase dbIOCont,InoutLogger logger)throws Exception{
	JSONObject extratoEmpresa=new JSONObject();

	// Inicializacao de Variaveis
	String linha             = "";
	String codEmpresa        = "";
	String nomeArquivo       = "";
	String chaveExtrato      = "";

	String documento         = "";
	String nomeOrigem        = "";
	String dataMovimento     = "";
	String dataLote          = "";
	String complemento01     = "";
	String complemento02     = "";
	String complemento03     = "";
	String complemento04     = "";
	String complemento05     = "";
	String complemento06     = "";
	String complemento07     = "";
	String complemento08     = "";
	String complemento09     = "";
	String complemento10     = "";
	String debitoCredito     = "";
	String cpfCnpj           = "";
	String historico         = "";
	String debitoCreditoAux  = "";

	String strValorDocumento = "";
	String contLinhaExtrato  = "";
	String dataString 		 = "";
	String nomeOrigemBackup	 = "";

	boolean naoLeMais = false;

	double valorDocumento    = 0.0;
	double valorJuros        = 0.0;
	double valorDesconto     = 0.0;
	double valorMulta        = 0.0;
	double valorPagamento    = 0.0;
	double valorDocumentoCredito    = 0.0;
	double valorDocumentoDebito    = 0.0;

	int inomePortador	= -1;
	int idataMovimento	= 0;
	int inomeOrigem		= 1;
	int idocumento 		= 2;
	int ivalorDocumento	= 3;

	nomePortador = nomePortador.replaceAll("\\?","");
	
	if(jDados.has("CODEMPRESA"))codEmpresa=jDados.optString("CODEMPRESA");
	if(jDados.has("NOMEARQUIVO"))nomeArquivo=jDados.optString("NOMEARQUIVO");

	while(memFile.hasNextLine()){
		String line = memFile.nextLine();
		line = StringUtil.removeSpecialCharsToUC(line);

		if(memFile.getFieldsSize() < 3){
			continue;
		}

		try{
			try{
				dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
				dataMovimento = getCampoDate(dataString);
				dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
			} catch(Exception e){

			}

			if(dataMovimento.equals(""))continue;

			valorDocumento = 0;
			debitoCreditoAux = "";
			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

			if(!debitoCreditoAux.contains("-")) debitoCredito="EXTRATO-CREDITO";
			if(debitoCreditoAux.contains("-")) debitoCredito="EXTRATO-DEBITO";

			try{valorDocumento=Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch(Exception vlrd){valorDocumento=0;}

			if(valorDocumento==0) continue;

			nomeOrigem = "";
			nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

			documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();

			contLinhaExtrato=StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()),05,"0");

			chaveExtrato=codEmpresa+"-"+dataMovimento+"-"+debitoCredito+"-"+String.format("%.2f",valorDocumento)+"-"+nomePortador+"-"+contLinhaExtrato;

			// Buscar Extrato por Chave na Tabela IO_EXTRATO.
			extratoEmpresa=dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
			.fields("CHAVE")
			.param(chaveExtrato)
			.queryUnique();


			// Inserir caso Chave nao encontrada.
			if(extratoEmpresa==null||!extratoEmpresa.has("CHAVE")){
				try{
					dbIOCont.insert("IO_EXTRATO")
					.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
					.param(chaveExtrato)
					.param(codEmpresa)
					.param(dataMovimento)
					.param(documento)
					.param(nomePortador)
					.param(nomeOrigem)
					.param(nomeArquivo.toUpperCase())
					.param(complemento02)
					.param(valorDocumento)
					.param(debitoCredito)
					.param(0)
					.execute();
				}catch(Exception sqlInsertException){
					logger.logError("Error inserting to IO_EXTRATO",sqlInsertException);
					continue;
				}
			}else{
				try{
					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(0)
					.param(chaveExtrato)
					.execute();
				}catch(Exception sqlUpdateException){
					logger.logError("Error updating IO_EXTRATO",sqlUpdateException);
					continue;
				}
			}
		}catch(Exception ex){
		}
	}

	return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

 

	return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}



/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

     
    return true;
}


public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
     
    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}








/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
	
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public HashMap readFrancesinha_BradescoExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_SicoobPDFF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BB-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFrancesinhaSantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	return mapaVariavel;
}


public boolean readExtratoSulcrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


public boolean readExtratoPoupeCrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//2312-024960
public HashMap readFrancesinhaUnicrediPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public boolean readExtratoAilosCiviaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoBMGPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoSicoobCapitalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercantilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoInfinitePayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBKBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNextPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoEfiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPagPixBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}

